%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Mouth sync flat icon set.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Виталий Викторович
%%CreationDate: 6/30/2020
%%BoundingBox: 0 0 2400 2000
%%HiResBoundingBox: 0 0 2400 1999.9996
%%CropBox: 0 0 2400 1999.9996
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Mouth sync flat icon set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Mouth sync flat icon set. Lips for cartoon character animation or English pronunciation signs isolated vector illustration collection. Talking and speaking concept</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>mouth</rdf:li>
               <rdf:li>animation</rdf:li>
               <rdf:li>lip</rdf:li>
               <rdf:li>sync</rdf:li>
               <rdf:li>cartoon</rdf:li>
               <rdf:li>talking</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>face</rdf:li>
               <rdf:li>speaking</rdf:li>
               <rdf:li>sprite</rdf:li>
               <rdf:li>character</rdf:li>
               <rdf:li>smile</rdf:li>
               <rdf:li>female</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>set</rdf:li>
               <rdf:li>flat</rdf:li>
               <rdf:li>isolated</rdf:li>
               <rdf:li>concept</rdf:li>
               <rdf:li>collection</rdf:li>
               <rdf:li>group</rdf:li>
               <rdf:li>kit</rdf:li>
               <rdf:li>pack</rdf:li>
               <rdf:li>icon</rdf:li>
               <rdf:li>English</rdf:li>
               <rdf:li>pronunciation</rdf:li>
               <rdf:li>sign</rdf:li>
               <rdf:li>emotion</rdf:li>
               <rdf:li>articulation</rdf:li>
               <rdf:li>letter</rdf:li>
               <rdf:li>motion</rdf:li>
               <rdf:li>artistic</rdf:li>
               <rdf:li>chart</rdf:li>
               <rdf:li>explainer</rdf:li>
               <rdf:li>expressive</rdf:li>
               <rdf:li>pronouncing</rdf:li>
               <rdf:li>animated</rdf:li>
               <rdf:li>various</rdf:li>
               <rdf:li>education</rdf:li>
               <rdf:li>syncing</rdf:li>
               <rdf:li>tongue</rdf:li>
               <rdf:li>human</rdf:li>
               <rdf:li>basic</rdf:li>
               <rdf:li>sound</rdf:li>
               <rdf:li>language</rdf:li>
               <rdf:li>alphabet</rdf:li>
               <rdf:li>communication</rdf:li>
               <rdf:li>facial</rdf:li>
               <rdf:li>expression</rdf:li>
               <rdf:li>speech</rdf:li>
               <rdf:li>movement</rdf:li>
            </rdf:Bag>
         </dc:subject>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2020-06-30T21:57:11+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2020-06-30T21:57:12+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2020-06-30T21:57:12+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>216</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA2AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FV&#xA;C4v7G2/3ouI4T1pI6r+s5GUwOZbIYZz+kE+4IJ/NHl9K1vozT+WrfqBys54d7kDs/Of4S5PNPl9+&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:AB55A68103BBEA11B497B0D6C2CC4BDD</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:AB55A68103BBEA11B497B0D6C2CC4BDD</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:8b58957e-a09d-4e43-ad4f-a16362a9e73c</stRef:instanceID>
            <stRef:documentID>xmp.did:8306EB042CA3EA1187B5B77943939995</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4e7f337f-21b4-0148-8168-756b4eb4a2bd</stEvt:instanceID>
                  <stEvt:when>2020-05-21T23:30:47+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e9f249d1-232c-de44-ab44-9edbe4538a82</stEvt:instanceID>
                  <stEvt:when>2020-05-25T22:20:18+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8306EB042CA3EA1187B5B77943939995</stEvt:instanceID>
                  <stEvt:when>2020-05-31T13:52:36+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8b58957e-a09d-4e43-ad4f-a16362a9e73c</stEvt:instanceID>
                  <stEvt:when>2020-06-03T13:14:58+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge 2019 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AB55A68103BBEA11B497B0D6C2CC4BDD</stEvt:instanceID>
                  <stEvt:when>2020-06-30T21:57:12+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2400.000000</stDim:w>
            <stDim:h>2000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=28 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>28</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2000 li
2400 2000 li
2400 0 li
cp
clp
2400 2000 mo
0 2000 li
0 0 li
2400 0 li
2400 2000 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
669.237 289.716 mo
678.479 322.743 664.031 378.373 625.593 427.693 cv
587.793 476.66 526.004 519.317 455.373 518.247 cv
384.744 519.317 322.953 476.659 285.155 427.693 cv
246.716 378.373 232.268 322.743 241.511 289.716 cv
258.12 237.407 318.371 239.175 391.629 240.944 cv
412.085 241.437 433.555 241.931 455.373 241.248 cv
477.191 241.931 498.661 241.437 519.118 240.944 cv
592.376 239.175 652.627 237.407 669.237 289.716 cv
.45098 .0862745 .141176 rgb
f
571.761 435.236 mo
571.761 435.236 327.917 435.236 327.632 435.236 cv
327.049 435.236 323.104 409.577 322.436 407.036 cv
318.225 391.047 315.061 371.803 324.289 357.326 cv
331.096 346.647 341.513 338.578 352.364 332.327 cv
381.84 315.347 417.569 309.427 451.189 309.427 cv
493.38 309.427 597.428 325.955 582.284 389.603 cv
578.654 404.857 575.159 419.94 571.761 435.236 cv
.509804 .184314 .235294 rgb
f
544.308 435.236 mo
358.071 435.236 li
362.049 376.102 li
364.563 338.721 403.727 309.427 451.189 309.427 cv
498.652 309.427 537.815 338.721 540.33 376.102 cv
544.308 435.236 li
cp
.337255 .0627451 .105882 rgb
f
474.557 342.15 mo
473.551 339.213 471.836 336.351 469.991 333.928 cv
467.46 330.603 464.5 327.12 463.913 323.145 cv
463.013 317.038 469.172 310.32 469.043 304.161 cv
440.626 304.161 li
440.498 310.32 448.63 316.464 447.729 322.573 cv
447.193 326.21 444.243 329.404 441.698 332.303 cv
439.961 334.281 438.054 336.177 436.639 338.324 cv
433.134 343.641 433.041 351.266 438.858 355.503 cv
442.9 358.447 448.516 359.77 453.858 359.979 cv
459.233 360.19 464.993 359.309 469.459 356.768 cv
475.87 353.121 476.395 347.511 474.557 342.15 cv
cp
.45098 .0862745 .141176 rgb
f
443.276 334.851 mo
437.996 345.398 441.946 350.684 451.431 351.254 cv
454.772 351.456 454.472 356.51 451.126 356.309 cv
450.808 356.29 450.449 356.182 450.619 356.226 cv
442.408 354.071 436.835 348.902 439.935 340.535 cv
440.758 338.433 441.953 336.569 443.276 334.851 cv
cp
.780392 .635294 .654902 rgb
f
669.237 289.716 mo
647.99 222.8 555.325 244.379 455.374 241.248 cv
355.422 244.379 262.758 222.8 241.511 289.716 cv
238.705 299.744 238.083 311.857 239.653 325.245 cv
296.621 296.2 329.096 305.806 384.925 298.577 cv
384.925 298.577 449.47 302.624 451.161 291.121 cv
451.175 291.121 li
451.388 291.402 454.574 295.394 464.637 296.074 cv
475.039 296.776 507.917 294.319 508.1 294.305 cv
508.354 294.341 508.608 294.376 508.862 294.414 cv
574.326 303.859 614.611 299.268 671.836 316.086 cv
672.255 306.315 671.388 297.403 669.237 289.716 cv
cp
.956863 .92549 .929412 rgb
f
643.067 309.023 mo
652.288 310.847 661.8 313.137 671.836 316.086 cv
672.255 306.315 671.388 297.403 669.237 289.716 cv
647.99 222.8 555.325 244.379 455.374 241.248 cv
355.422 244.379 262.758 222.8 241.511 289.716 cv
238.871 299.147 238.165 310.422 239.396 322.867 cv
240.455 323.22 241.459 323.554 242.4 323.864 cv
248.66 320.767 254.625 318.137 260.363 315.899 cv
297.561 276.768 374.387 277.829 455.777 275.032 cv
532.081 277.655 603.901 276.886 643.067 309.023 cv
cp
.811765 .717647 .705882 rgb
f
589.46 438.277 mo
577.071 429.105 563.241 421.289 549.688 414.027 cv
509.627 392.566 493.467 393.194 452.523 402.403 cv
450.454 402.868 411.745 386.371 359.896 408.454 cv
346.884 413.997 309.713 424.241 311.87 443.358 cv
316.368 483.246 459.845 505.67 459.845 505.67 cv
459.845 505.67 598.807 460.932 589.46 438.277 cv
cp
.929412 .109804 .141176 rgb
f
451.386 468.037 mo
358.105 470.663 307.321 386.154 254.793 377.54 cv
262.276 394.248 272.394 411.318 285.155 427.692 cv
322.953 476.659 384.744 519.317 455.374 518.248 cv
526.004 519.317 587.793 476.66 625.592 427.693 cv
637.989 411.787 647.89 395.224 655.307 378.975 cv
587.102 385.78 548.726 470.778 451.386 468.037 cv
cp
.956863 .92549 .929412 rgb
f
637.569 403.172 mo
597.206 452.139 530.474 502.512 455.05 501.442 cv
379.625 502.512 314.391 452.139 274.028 403.171 cv
267.054 394.792 260.821 386.231 255.325 377.63 cv
255.147 377.6 254.97 377.569 254.793 377.54 cv
262.276 394.248 272.394 411.318 285.155 427.692 cv
322.953 476.659 384.744 519.317 455.374 518.248 cv
526.004 519.317 587.793 476.66 625.592 427.693 cv
637.855 411.958 647.675 395.583 655.064 379.503 cv
649.868 387.474 644.037 395.401 637.569 403.172 cv
cp
.811765 .717647 .705882 rgb
f
451.958 470.262 mo
447.398 512.014 li
455.374 512.014 li
451.958 470.262 li
cp
f
504.668 460.002 mo
517.354 501.019 li
523.696 498.482 li
504.668 460.002 li
cp
f
395.147 460.002 mo
380.347 491.717 li
384.576 491.717 li
395.147 460.002 li
cp
f
368.93 261.682 mo
383.73 295.087 li
376.33 258.299 li
368.93 261.682 li
cp
f
447.398 255.339 mo
450.846 286.63 li
454.928 253.647 li
447.398 255.339 li
cp
f
516.135 266.313 mo
509.157 293.799 li
523.535 266.313 li
516.135 266.313 li
cp
f
455.777 269.293 mo
555.679 272.422 647.896 270.252 669.205 337.045 cv
672.843 318.969 672.847 302.617 669.237 289.716 cv
647.99 222.8 553.028 213.224 453.077 210.093 cv
353.126 213.224 262.758 222.8 241.511 289.716 cv
237.9 302.617 237.905 318.968 241.543 337.045 cv
262.85 270.252 355.876 272.422 455.777 269.293 cv
cp
1 .564706 .509804 rgb
f
669.205 337.045 mo
663.53 365.244 649.015 397.639 625.592 427.693 cv
587.793 476.66 522.017 509.7 451.386 508.63 cv
380.756 509.7 322.953 476.659 285.155 427.692 cv
261.732 397.639 247.218 365.244 241.543 337.045 cv
241.511 337.146 li
232.268 370.172 246.716 425.802 285.155 475.123 cv
322.953 524.09 384.744 566.747 455.374 565.677 cv
526.004 566.747 587.793 524.09 625.592 475.123 cv
664.031 425.803 678.479 370.173 669.237 337.146 cv
669.205 337.045 li
cp
f
393.461 608.183 mo
384.893 621.994 li
387.31 621.375 390.975 620.626 395.887 619.747 cv
393.461 608.183 li
cp
399.243 635.355 mo
398.724 633.557 398.074 630.413 397.295 625.918 cv
393.95 626.378 391.568 626.958 381.328 629.063 cv
380.329 631.681 378.621 635.505 376.206 640.538 cv
374.444 643.619 370.513 642.01 370.513 639.19 cv
370.513 638.231 372.021 634.586 375.037 628.255 cv
373.992 626.657 374.296 624.087 377.463 623.342 cv
378.827 620.782 392.067 597.249 394.929 597.249 cv
399.071 597.249 398.381 604.313 400.052 610.61 cv
404.516 631.431 li
406.778 637.502 408.013 639.825 406.163 641.556 cv
405.544 642.135 400.492 639.691 399.243 635.355 cv
cp
0 0 0 rgb
f
418.176 651.023 mo
416.673 649.464 417.586 647.858 419.254 644.013 cv
421.464 638.94 422.112 637.272 423.809 637.272 cv
425.284 637.272 426.414 638.599 426.414 639.969 cv
426.414 640.448 424.996 643.863 422.161 650.214 cv
421.29 652.255 419.303 652.194 418.176 651.023 cv
cp
f
457.87 601.442 mo
458.384 605.151 458.021 610.425 457.63 616.002 cv
476.797 614.162 480.968 612.616 480.968 617.23 cv
480.968 621.56 476.199 619.949 471.082 620.916 cv
457.241 622.173 li
456.042 643.395 455.963 637.782 477.343 637.782 cv
481.54 637.782 481.52 643.212 477.972 643.923 cv
475.425 644.438 457.786 645.698 453.856 642.036 cv
450.006 638.468 450.989 626.279 451.309 620.645 cv
450.825 619.635 450.843 618.353 451.549 617.35 cv
452.272 606.904 452.279 604.384 451.849 601.308 cv
451.373 597.914 451.051 594.493 454.545 594.493 cv
455.383 594.493 456.103 594.782 456.701 595.361 cv
471.406 591.44 487.41 594.146 482.346 600.185 cv
479.771 603.204 475.959 596.439 457.87 601.442 cv
cp
f
491.813 651.023 mo
490.31 649.464 491.224 647.858 492.892 644.013 cv
495.101 638.94 495.749 637.272 497.445 637.272 cv
498.92 637.272 500.051 638.599 500.051 639.969 cv
500.051 640.448 498.633 643.863 495.798 650.214 cv
494.926 652.255 492.94 652.194 491.813 651.023 cv
cp
f
539.446 603.18 mo
537.955 622.018 539.517 627.245 538.787 635.325 cv
544.282 635.876 551.19 633.333 551.19 638.261 cv
551.19 642.302 546.809 641.497 538.158 641.497 cv
531.236 641.497 523.329 644.957 523.329 639.549 cv
523.329 635.749 526.802 636.666 532.735 635.834 cv
533.85 626.805 531.539 626.983 533.484 602.94 cv
533.311 602.945 525.188 603.165 525.695 603.15 cv
524.01 603.15 522.67 601.912 522.67 600.065 cv
522.67 596.306 525.987 596.77 534.563 596.77 cv
538.537 596.77 543.521 597.199 549.512 598.057 cv
552.742 598.53 552.758 602.192 551.159 603.51 cv
549.544 604.75 546.709 604.201 539.446 603.18 cv
cp
f
218.628 247.391 mo
212.737 240.577 205.757 264.335 204.275 269.019 cv
192.148 307.35 190.96 350.777 204.175 393.518 cv
205.137 396.628 210.037 395.302 209.068 392.169 cv
185.829 317.004 214.918 255.83 216.387 253.176 cv
218.249 249.81 219.643 248.564 218.628 247.391 cv
cp
.254902 .0470588 .0784314 rgb
f
695.802 269.67 mo
707.594 305.092 712.552 342.121 710.496 379.397 cv
710.316 382.661 715.391 382.651 715.57 379.397 cv
717.65 341.701 712.62 304.142 700.695 268.32 cv
699.668 265.237 694.767 266.559 695.802 269.67 cv
cp
f
240.891 991.989 mo
232.401 967.168 263.546 937.396 289.593 910.417 cv
331.627 866.454 400.121 828.365 478.122 829.84 cv
556.134 829.384 624.125 868.364 665.582 912.872 cv
691.274 940.188 720.13 969.764 713.214 995.068 cv
708.73 1011.48 586.896 1077.96 476.488 1080.07 cv
366.117 1076.52 246.544 1008.52 240.891 991.989 cv
.168627 .0313726 .054902 rgb
f
601.85 1032.14 mo
601.85 1032.14 358.012 1030.55 357.725 1030.55 cv
357.143 1030.55 353.398 999.952 352.749 996.922 cv
348.664 977.846 345.649 954.899 354.988 937.712 cv
361.879 925.034 372.359 915.488 383.258 908.113 cv
412.409 888.385 447.538 881.47 480.702 881.47 cv
481.222 881.47 481.741 881.471 482.26 881.475 cv
524.45 881.751 628.367 902.122 612.727 977.849 cv
608.979 995.998 605.367 1013.94 601.85 1032.14 cv
.380392 .160784 .196078 rgb
f
574.397 1031.96 mo
388.165 1030.75 li
392.602 960.327 li
395.408 915.809 434.798 881.165 482.26 881.475 cv
529.721 881.785 568.656 916.94 570.879 961.49 cv
574.397 1031.96 li
cp
.337255 .0627451 .105882 rgb
f
505.372 920.612 mo
504.389 917.107 502.696 913.687 500.87 910.787 cv
498.365 906.809 495.432 902.641 494.877 897.901 cv
494.023 890.619 500.234 882.656 500.154 875.318 cv
471.737 875.133 li
471.561 882.469 479.646 889.843 478.697 897.114 cv
478.133 901.444 475.158 905.231 472.59 908.667 cv
470.839 911.011 468.917 913.258 467.484 915.807 cv
463.938 922.118 463.787 931.201 469.57 936.287 cv
473.588 939.821 479.195 941.433 484.535 941.718 cv
489.909 942.006 495.675 940.992 500.161 937.994 cv
506.6 933.691 507.168 927.011 505.372 920.612 cv
cp
.45098 .0862745 .141176 rgb
f
474.149 911.712 mo
468.734 924.367 472.943 930.586 482.176 931.309 cv
483.571 931.417 484.625 932.854 484.53 934.517 cv
484.336 937.914 481.114 937.282 481.325 937.226 cv
470.204 933.668 465.827 924.393 474.149 911.712 cv
cp
.780392 .635294 .654902 rgb
f
343.597 896.34 mo
355.927 905.593 369.706 913.499 383.212 920.849 cv
423.131 942.571 439.295 942.048 480.297 933.107 cv
482.37 932.656 520.971 949.406 572.962 927.66 cv
586.01 922.203 623.247 912.203 621.216 893.07 cv
616.978 853.155 473.65 829.793 473.65 829.793 cv
473.65 829.793 334.399 873.625 343.597 896.34 cv
cp
.929412 .109804 .141176 rgb
f
289.593 910.417 mo
283.061 917.184 277.148 924.086 271.852 931.033 cv
309.912 944.925 384.563 939.007 463.737 940.744 cv
559.016 939.898 647.603 950.047 674.275 922.629 cv
671.515 919.354 668.618 916.098 665.582 912.872 cv
637.113 882.308 596.131 854.349 547.983 839.98 cv
521.356 840.29 492.884 840.904 463.865 839.97 cv
444.324 840.344 425.04 840.019 406.401 839.566 cv
358.814 853.464 318.113 880.589 289.593 910.417 cv
cp
.956863 .92549 .929412 rgb
f
461.768 840.007 mo
461.34 840.015 460.914 840.021 460.486 840.028 cv
460.341 840.03 460.196 840.032 460.051 840.035 cv
459.515 840.042 458.978 840.05 458.441 840.056 cv
458.337 840.058 458.232 840.059 458.128 840.061 cv
457.679 840.066 457.231 840.071 456.782 840.076 cv
456.625 840.078 456.467 840.08 456.309 840.081 cv
455.872 840.086 455.436 840.089 455 840.093 cv
454.872 840.095 454.744 840.096 454.615 840.098 cv
454.083 840.102 453.552 840.106 453.021 840.109 cv
452.884 840.111 452.747 840.112 452.611 840.112 cv
452.162 840.115 451.713 840.117 451.265 840.12 cv
451.159 840.121 451.053 840.121 450.947 840.122 cv
450.428 840.124 449.91 840.126 449.392 840.128 cv
449.229 840.128 li
448.685 840.13 448.14 840.131 447.596 840.132 cv
447.461 840.132 447.326 840.132 447.191 840.132 cv
446.747 840.133 446.303 840.133 445.86 840.133 cv
445.738 840.133 445.618 840.133 445.497 840.133 cv
444.954 840.132 444.411 840.132 443.868 840.13 cv
443.771 840.13 443.675 840.13 443.579 840.13 cv
443.135 840.129 442.692 840.128 442.25 840.126 cv
442.067 840.125 441.885 840.125 441.702 840.124 cv
441.316 840.123 440.932 840.122 440.547 840.12 cv
440.382 840.119 440.216 840.117 440.05 840.117 cv
439.5 840.114 438.951 840.111 438.402 840.107 cv
438.38 840.106 li
437.851 840.104 437.322 840.099 436.792 840.095 cv
436.657 840.094 436.521 840.093 436.385 840.092 cv
435.975 840.088 435.564 840.085 435.155 840.081 cv
434.994 840.08 434.832 840.079 434.671 840.077 cv
434.175 840.072 433.68 840.067 433.185 840.062 cv
432.969 840.06 432.754 840.057 432.539 840.055 cv
432.227 840.051 431.916 840.047 431.603 840.044 cv
431.388 840.042 431.171 840.039 430.956 840.037 cv
430.467 840.03 429.979 840.024 429.491 840.018 cv
429.397 840.016 li
428.841 840.008 428.286 840.001 427.73 839.993 cv
427.618 839.991 427.506 839.99 427.395 839.988 cv
426.988 839.982 426.583 839.976 426.177 839.969 cv
426.008 839.967 425.838 839.964 425.669 839.962 cv
425.235 839.956 424.8 839.948 424.366 839.94 cv
424.121 839.937 423.875 839.932 423.631 839.928 cv
423.241 839.921 422.851 839.916 422.461 839.908 cv
422.32 839.906 422.179 839.903 422.037 839.901 cv
421.666 839.895 421.296 839.888 420.926 839.881 cv
420.715 839.877 420.502 839.873 420.291 839.87 cv
419.799 839.86 419.307 839.851 418.816 839.841 cv
418.696 839.838 418.576 839.836 418.457 839.834 cv
418.019 839.825 417.582 839.817 417.146 839.808 cv
417.023 839.805 416.9 839.803 416.779 839.8 cv
416.385 839.792 415.992 839.784 415.599 839.775 cv
415.33 839.77 415.062 839.765 414.793 839.759 cv
414.408 839.75 414.023 839.742 413.638 839.734 cv
413.438 839.729 413.239 839.725 413.039 839.721 cv
412.7 839.712 412.362 839.705 412.024 839.698 cv
411.815 839.693 411.607 839.689 411.399 839.684 cv
411.034 839.675 410.667 839.667 410.301 839.659 cv
409.832 839.648 409.363 839.637 408.896 839.626 cv
408.63 839.62 li
408.293 839.612 407.956 839.604 407.619 839.595 cv
407.285 839.588 406.951 839.58 406.617 839.572 cv
406.401 839.566 li
369.659 850.297 337.021 868.913 310.925 890.571 cv
353.45 883.137 407.201 883.284 463.143 882.216 cv
539.681 884.677 612.578 884.81 657.771 904.864 cv
629.838 877.487 591.89 853.084 547.983 839.98 cv
547.857 839.981 li
547.077 839.99 546.295 840 545.511 840.009 cv
545.453 840.01 li
544.76 840.018 544.065 840.027 543.371 840.037 cv
543.149 840.039 542.928 840.042 542.705 840.044 cv
541.457 840.061 540.203 840.077 538.946 840.093 cv
537.982 840.106 537.016 840.119 536.047 840.131 cv
535.519 840.139 534.988 840.146 534.458 840.152 cv
534.04 840.158 533.622 840.164 533.204 840.169 cv
532.957 840.173 532.708 840.176 532.46 840.178 cv
531.894 840.187 531.326 840.193 530.759 840.201 cv
530.424 840.206 530.089 840.21 529.753 840.214 cv
528.295 840.233 526.832 840.251 525.365 840.269 cv
525.204 840.271 525.042 840.273 524.882 840.275 cv
524.136 840.284 523.389 840.292 522.639 840.301 cv
522.445 840.304 li
521.661 840.313 520.875 840.322 520.088 840.331 cv
519.998 840.331 519.908 840.332 519.818 840.333 cv
519.028 840.342 518.236 840.35 517.444 840.358 cv
517.232 840.36 li
516.51 840.367 515.786 840.374 515.062 840.381 cv
514.873 840.382 514.684 840.384 514.494 840.386 cv
513.733 840.393 512.969 840.399 512.205 840.405 cv
512.037 840.406 li
511.181 840.413 510.324 840.419 509.465 840.425 cv
509.451 840.425 li
508.62 840.431 507.787 840.436 506.954 840.44 cv
506.741 840.442 li
505.939 840.446 505.135 840.449 504.332 840.453 cv
504.104 840.454 li
503.288 840.457 502.471 840.459 501.652 840.462 cv
501.464 840.462 li
500.61 840.464 499.755 840.465 498.9 840.466 cv
498.863 840.466 li
498.017 840.467 497.169 840.466 496.32 840.465 cv
496.162 840.465 li
495.321 840.464 494.479 840.462 493.636 840.459 cv
493.505 840.459 li
492.672 840.457 491.838 840.454 491.004 840.449 cv
490.815 840.448 li
489.973 840.444 489.129 840.438 488.285 840.432 cv
488.155 840.431 li
487.307 840.425 486.458 840.418 485.608 840.41 cv
485.462 840.409 li
484.604 840.401 483.746 840.391 482.887 840.381 cv
482.787 840.38 li
481.049 840.358 479.307 840.333 477.562 840.304 cv
477.366 840.301 li
475.609 840.27 473.848 840.235 472.085 840.195 cv
471.983 840.192 li
471.094 840.173 470.206 840.151 469.316 840.128 cv
469.294 840.127 li
467.486 840.081 465.676 840.029 463.865 839.97 cv
463.314 839.981 462.764 839.99 462.212 840 cv
462.065 840.002 461.916 840.005 461.768 840.007 cv
cp
.811765 .717647 .705882 rgb
f
467.182 935.832 mo
463.631 875.706 li
472.586 875.765 li
467.182 935.832 li
cp
f
548.051 876.257 mo
543.733 933.175 li
558.199 876.323 li
548.051 876.257 li
cp
f
389.905 875.225 mo
397.442 929.694 li
381.447 875.17 li
389.905 875.225 li
cp
f
263.662 1001.74 mo
254.314 1017.91 268.583 1045.36 306.863 1069.86 cv
311.366 1072.77 316.214 1075.64 321.378 1078.43 cv
364.357 1082.39 419.364 1078.23 476.488 1080.07 cv
534.195 1078.97 589.664 1083.95 632.877 1080.35 cv
637.999 1077.66 642.813 1074.89 647.292 1072.08 cv
685.889 1048.08 700.515 1020.83 691.379 1004.53 cv
670.347 971.493 577.615 981.497 477.676 979.306 cv
377.717 980.193 285.123 968.979 263.662 1001.74 cv
cp
.956863 .92549 .929412 rgb
f
262.682 1003.67 mo
255.456 1020.04 270.066 1046.31 306.863 1069.86 cv
311.366 1072.77 316.214 1075.64 321.378 1078.43 cv
364.357 1082.39 419.364 1078.23 476.488 1080.07 cv
534.195 1078.97 589.664 1083.95 632.877 1080.35 cv
637.999 1077.66 642.813 1074.89 647.292 1072.08 cv
684.888 1048.71 699.739 1022.24 692.042 1005.82 cv
650.63 1037.52 565.991 1036.11 476.318 1037.82 cv
387.287 1034.96 303.762 1035.25 262.682 1003.67 cv
cp
.811765 .717647 .705882 rgb
f
481.056 984.261 mo
476.721 1044.34 li
485.676 1044.39 li
481.056 984.261 li
cp
f
561.141 1044.89 mo
557.565 987.917 li
571.289 1044.95 li
561.141 1044.89 li
cp
f
402.995 1043.85 mo
411.243 989.489 li
394.538 1043.8 li
402.995 1043.85 li
cp
f
713.427 994.472 mo
642.729 1047.03 586.561 1052.63 476.208 1054.73 cv
365.892 1051.19 331.946 1042.1 240.696 991.417 cv
243.391 1008.51 304.231 1121.03 478.757 1121.03 cv
652.667 1115.18 711.478 1013.98 713.427 994.472 cv
cp
1 .564706 .509804 rgb
f
240.891 991.99 mo
247.324 966.559 390.16 866.462 468.16 867.938 cv
546.172 867.481 707.114 969.559 713.215 995.073 cv
713.251 994.983 li
723.653 965.214 708.025 914.856 665.862 870.025 cv
624.405 825.517 551.145 791.738 473.132 792.195 cv
395.131 790.72 331.906 823.608 289.872 867.571 cv
247.128 911.847 230.843 961.998 240.856 991.9 cv
240.891 991.99 li
cp
f
466.773 1203.97 mo
460.562 1203.97 455.928 1202.18 452.873 1198.61 cv
447.121 1191.93 447.75 1179.61 447.75 1170.66 cv
447.75 1168.45 447.775 1162.16 448.469 1160.08 cv
449.523 1157 453.921 1156.36 453.921 1162.96 cv
453.921 1180.54 li
453.921 1192.65 458.155 1198.7 466.624 1198.7 cv
474.592 1198.7 478.577 1188.51 478.577 1168.14 cv
478.577 1167.38 478.577 1166.4 478.577 1165.2 cv
478.556 1164.01 478.546 1163.21 478.546 1162.81 cv
478.546 1161.57 478.766 1160.48 479.206 1159.54 cv
479.765 1158.35 480.594 1157.75 481.692 1157.75 cv
483.689 1157.75 484.688 1159.11 484.688 1161.85 cv
484.688 1162.67 484.698 1163.91 484.718 1165.56 cv
484.718 1167.22 484.718 1168.46 484.718 1169.28 cv
484.718 1192.41 478.736 1203.97 466.773 1203.97 cv
cp
0 0 0 rgb
f
435.395 751.016 mo
452.827 764.629 473.992 758.213 492.702 751.016 cv
495.718 749.855 494.409 744.947 491.353 746.122 cv
474.808 752.488 454.698 759.7 438.983 747.429 cv
436.439 745.441 432.823 749.008 435.395 751.016 cv
cp
.254902 .0470588 .0784314 rgb
f
485.951 1407.98 mo
375.559 1410.81 249.82 1497.26 249.82 1497.26 cv
249.82 1497.26 411.025 1614.39 489.033 1613.42 cv
567.041 1614.39 690.613 1530.7 722.839 1498.47 cv
699.372 1438.02 596.343 1410.81 485.951 1407.98 cv
.168627 .0313726 .054902 rgb
f
gsave
602.339 1587.8 mo
602.339 1587.8 595.788 1587.8 584.828 1587.8 cv
591.405 1584.81 597.972 1581.63 604.463 1578.32 cv
603.75 1581.48 603.043 1584.63 602.339 1587.8 cv
400.896 1587.8 mo
375.567 1587.8 358.284 1587.8 358.208 1587.8 cv
357.742 1587.8 355.116 1571.32 353.747 1563.47 cv
369.106 1572.08 385.097 1580.45 400.896 1587.8 cv
clp
353.747 1563.47 mo
604.463 1563.47 li
604.463 1587.8 li
353.747 1587.8 li
cp
.760784 .603922 .627451 rgb
f
grestore
584.828 1587.8 mo
546.701 1587.8 455.256 1587.8 400.896 1587.8 cv
385.097 1580.45 369.106 1572.08 353.747 1563.47 cv
353.408 1561.52 353.146 1560.11 353.014 1559.6 cv
348.803 1543.61 345.638 1524.37 354.867 1509.89 cv
361.673 1499.21 372.09 1491.14 382.941 1484.89 cv
412.417 1467.91 448.147 1461.99 481.768 1461.99 cv
523.959 1461.99 628.007 1478.52 612.861 1542.17 cv
609.983 1554.26 607.19 1566.25 604.463 1578.32 cv
597.972 1581.63 591.405 1584.81 584.828 1587.8 cv
.380392 .160784 .196078 rgb
f
574.885 1587.8 mo
388.648 1587.8 li
392.627 1528.67 li
395.141 1491.29 434.305 1461.99 481.767 1461.99 cv
529.229 1461.99 568.393 1491.29 570.907 1528.67 cv
574.885 1587.8 li
cp
.168627 .0313726 .054902 rgb
f
619.731 1541.47 mo
607.342 1532.3 593.511 1524.48 579.958 1517.22 cv
539.897 1495.76 491.668 1468.87 485.644 1468.75 cv
476.858 1468.57 442.015 1489.56 390.167 1511.65 cv
377.154 1517.19 339.984 1527.43 342.14 1546.55 cv
346.639 1586.44 490.115 1608.86 490.115 1608.86 cv
490.115 1608.86 629.077 1564.12 619.731 1541.47 cv
cp
.929412 .109804 .141176 rgb
f
619.731 1541.47 mo
610.427 1534.58 600.311 1528.46 590.109 1522.76 cv
510.345 1579.37 392.657 1538.96 358.317 1525.19 cv
348.668 1530.66 341.135 1537.64 342.14 1546.55 cv
346.639 1586.44 490.115 1608.86 490.115 1608.86 cv
490.115 1608.86 629.077 1564.12 619.731 1541.47 cv
cp
.470588 .00784314 .027451 rgb
f
484.109 1513.29 mo
483.796 1509.65 483.405 1506.35 482.923 1503.49 cv
482.923 1503.49 483.396 1507.23 484.109 1513.29 cv
cp
f
484.003 1590.31 mo
490.728 1590.31 li
490.255 1567.86 486.174 1530.83 484.109 1513.29 cv
485.854 1533.51 485.161 1564.26 484.003 1590.31 cv
cp
f
651.8 1529.85 mo
651.091 1529.12 556.223 1555.33 486.917 1554.75 cv
417.612 1555.33 312.072 1529.12 311.363 1529.85 cv
306.362 1534.89 301.768 1540.02 297.579 1545.18 cv
299.475 1547.32 301.431 1549.45 303.446 1551.56 cv
345.193 1595.8 411.025 1614.39 489.033 1613.42 cv
563.93 1614.35 632.239 1598.81 674.324 1556.83 cv
668.057 1547.76 660.55 1538.67 651.8 1529.85 cv
cp
.956863 .92549 .929412 rgb
f
659.954 1538.54 mo
617.074 1573.64 551.661 1589.35 481.767 1588.48 cv
409.181 1589.38 348.672 1572.4 306.979 1534.4 cv
303.646 1537.97 300.513 1541.57 297.579 1545.18 cv
299.475 1547.32 301.431 1549.45 303.446 1551.56 cv
345.193 1595.8 408.331 1609.83 486.339 1608.86 cv
561.237 1609.79 632.239 1598.81 674.324 1556.83 cv
670.098 1550.71 665.308 1544.59 659.954 1538.54 cv
cp
.811765 .717647 .705882 rgb
f
719.344 1454.36 mo
695.878 1393.91 596.343 1413.41 485.951 1410.58 cv
375.56 1413.41 275.417 1393.91 251.95 1454.36 cv
246.606 1469.98 246.764 1484.45 253.115 1508.39 cv
276.476 1503.49 299.311 1508.39 322.145 1497.02 cv
323.381 1496.41 323.723 1493.7 323.723 1493.7 cv
323.723 1493.7 325.309 1496.41 327.076 1496.68 cv
351.317 1500.45 376.16 1496.39 404.82 1493.77 cv
404.819 1493.77 li
404.819 1493.77 406.171 1500.22 431.943 1498.47 cv
457.989 1496.71 478.176 1497.43 480.149 1495.45 cv
481.234 1494.37 482.068 1492 482.599 1490.08 cv
482.797 1490.08 li
483.498 1491.81 484.459 1493.73 485.521 1494.61 cv
487.674 1496.39 508.186 1495.74 534.011 1496.29 cv
546.273 1496.55 552.828 1493.37 556.329 1491.06 cv
591.506 1495.19 626.603 1498.47 652.576 1494.4 cv
653.915 1494.19 653.368 1492.52 654.723 1492.56 cv
656.172 1492.59 656.367 1494.51 657.771 1494.87 cv
681.856 1500.94 700.745 1501.51 719.173 1503.49 cv
725.969 1483.16 724.142 1468.39 719.344 1454.36 cv
cp
.956863 .92549 .929412 rgb
f
719.344 1454.36 mo
695.878 1393.91 596.343 1413.41 485.951 1410.58 cv
375.56 1413.41 273.214 1393.91 249.748 1454.36 cv
244.653 1469.26 246.077 1489.24 254.06 1511.05 cv
283.078 1474.94 334.597 1463.95 395.111 1459.48 cv
404.819 1493.77 li
402.409 1458.98 li
426.664 1457.4 452.247 1456.73 478.317 1455.81 cv
483.081 1490.08 li
485.345 1455.56 li
485.706 1455.54 486.066 1455.53 486.427 1455.52 cv
511.109 1456.45 535.392 1457.05 558.589 1458.29 cv
555.7 1490.01 li
564.633 1458.63 li
704.298 1453.59 717.516 1507.06 719.173 1507.25 cv
725.969 1486.92 724.142 1468.39 719.344 1454.36 cv
cp
.811765 .717647 .705882 rgb
f
486.397 1433.32 mo
596.734 1436.15 699.305 1438.13 722.839 1498.47 cv
726.857 1482.14 724.35 1465.22 720.362 1453.56 cv
696.895 1393.11 593.807 1369.87 483.415 1367.04 cv
373.022 1369.87 273.214 1391.32 249.748 1451.77 cv
245.761 1463.42 245.76 1481.94 249.778 1498.27 cv
273.311 1437.93 376.06 1436.15 486.397 1433.32 cv
cp
1 .564706 .509804 rgb
f
485.703 1565.81 mo
369.186 1565.81 249.832 1497.23 249.82 1497.26 cv
246.764 1554.42 354.846 1624.81 487.905 1624.79 cv
630.582 1624.77 722.839 1547.54 723.681 1494.52 cv
723.669 1494.49 602.219 1565.81 485.703 1565.81 cv
cp
f
508.733 1713.23 mo
486.762 1717.07 492.286 1711.22 492.286 1698.94 cv
493.971 1669.26 492.04 1668.29 493.919 1666.31 cv
495.102 1665.06 497.065 1665.14 498.173 1666.31 cv
500.671 1668.94 497.574 1705.91 497.648 1708.25 cv
511.898 1708.42 521.286 1700.43 521.286 1707.56 cv
521.286 1710.9 515.686 1712.02 508.733 1713.23 cv
cp
0 0 0 rgb
f
435.185 1332.3 mo
459.265 1343.91 487.926 1341.6 509.607 1325.82 cv
512.222 1323.92 509.693 1319.52 507.046 1321.44 cv
486.885 1336.11 460.276 1338.78 437.746 1327.92 cv
434.817 1326.51 432.24 1330.88 435.185 1332.3 cv
cp
.254902 .0470588 .0784314 rgb
f
763.722 1423.19 mo
783.525 1464.31 767.24 1524.55 751.046 1567.15 cv
749.885 1570.2 754.57 1572.15 755.732 1569.1 cv
765.021 1544.66 772.456 1519.15 776.224 1493.24 cv
779.77 1468.87 779.245 1443.74 768.388 1421.19 cv
766.978 1418.26 762.299 1420.23 763.722 1423.19 cv
cp
f
212.48 1426.64 mo
187.13 1464.59 194.847 1526.52 204.936 1570.96 cv
205.66 1574.14 200.748 1575.42 200.023 1572.23 cv
194.236 1546.74 190.437 1520.44 190.321 1494.26 cv
190.213 1469.63 194.239 1444.82 208.138 1424.01 cv
209.944 1421.31 214.302 1423.91 212.48 1426.64 cv
cp
f
1360.66 1563.28 mo
1363.98 1574.1 1360.55 1601.49 1360.55 1601.49 cv
1360.55 1601.49 1228.3 1622.73 1157.67 1621.75 cv
1087.04 1622.73 936.532 1605.46 936.532 1605.46 cv
936.532 1605.46 933.344 1574.05 936.955 1562.27 cv
958.202 1501.22 1049.37 1520.91 1149.33 1518.05 cv
1249.28 1520.91 1339.41 1502.23 1360.66 1563.28 cv
cp
.811765 .717647 .705882 rgb
f
1364.64 1597.59 mo
1252.66 1595.09 1065.16 1594.4 935.216 1604.16 cv
937.035 1620.73 1015 1636.15 1161.88 1636.15 cv
1304.71 1624.76 1362.28 1616.6 1364.64 1597.59 cv
cp
1 .564706 .509804 rgb
f
935.216 1604.16 mo
963.459 1598.3 1063.75 1588.86 1063.75 1588.86 cv
1063.75 1588.86 1070.28 1591.38 1072.28 1591.29 cv
1116.15 1589.32 1165.93 1588.32 1213.16 1588.86 cv
1215.62 1588.88 1219.43 1585.21 1219.43 1585.21 cv
1219.43 1585.21 1336.64 1592.72 1364.64 1597.59 cv
1335.89 1598.44 1190.96 1592.26 1146.07 1593.03 cv
1027.64 1595.07 975.56 1603.46 935.216 1604.16 cv
cp
.45098 .0862745 .141176 rgb
f
1363.19 1562.27 mo
1341.94 1501.22 1249.28 1520.91 1149.33 1518.05 cv
1049.37 1520.91 956.71 1501.22 935.463 1562.27 cv
931.948 1573.73 931.86 1588.18 935.216 1604.16 cv
975.824 1598.31 1017.6 1590.61 1066.9 1586.11 cv
1066.9 1586.11 1068.37 1592.49 1094.02 1589.46 cv
1119.67 1586.43 1140.25 1589.76 1142.23 1587.79 cv
1143.31 1586.71 1144.14 1584.34 1144.67 1582.42 cv
1144.87 1582.42 li
1145.57 1584.15 1146.53 1586.07 1147.6 1586.95 cv
1149.75 1588.73 1170.26 1587.03 1196.09 1587.59 cv
1208.35 1587.85 1214.9 1585.71 1218.4 1583.4 cv
1273.44 1585.82 1320.97 1592.22 1364.64 1597.59 cv
1366.7 1584.22 1366.22 1572.14 1363.19 1562.27 cv
cp
.956863 .92549 .929412 rgb
f
1363.19 1562.27 mo
1341.94 1501.22 1249.28 1520.91 1149.33 1518.05 cv
1049.37 1520.91 956.71 1501.22 935.463 1562.27 cv
933.259 1569.46 932.403 1577.82 932.898 1587 cv
963.006 1563.72 1007 1555.53 1057.19 1551.83 cv
1066.9 1586.11 li
1064.48 1551.32 li
1088.74 1549.74 1114.32 1549.07 1140.39 1548.15 cv
1145.16 1582.42 li
1147.42 1547.9 li
1147.78 1547.88 1148.14 1547.87 1148.5 1547.86 cv
1173.18 1548.79 1197.47 1549.39 1220.66 1550.63 cv
1217.78 1582.35 li
1226.71 1550.97 li
1283.42 1554.32 1333.17 1562.09 1365.64 1588.86 cv
1366.36 1578.95 1365.54 1569.94 1363.19 1562.27 cv
cp
.811765 .717647 .705882 rgb
f
1149.73 1543.64 mo
1245.17 1546.37 1339.31 1553.02 1362.21 1597.67 cv
1363.47 1600.13 1364.24 1600.17 1364.64 1597.59 cv
1366.7 1584.22 1366.22 1572.14 1363.19 1562.27 cv
1341.94 1501.22 1246.98 1492.48 1147.03 1489.62 cv
1047.08 1492.48 956.71 1501.22 935.463 1562.27 cv
931.853 1574.05 931.757 1588.58 935.395 1605.08 cv
956.703 1544.13 1049.83 1546.49 1149.73 1543.64 cv
cp
1 .564706 .509804 rgb
f
1114.54 1684.42 mo
1114.18 1684.42 1113.8 1684.34 1113.4 1684.18 cv
1107.36 1681.94 1099.32 1682.82 1093 1683.97 cv
1092.94 1696.91 li
1098.89 1695.34 1101.63 1694.88 1111.19 1695.92 cv
1113.06 1696.12 1114 1697.14 1114 1698.98 cv
1114 1699.88 1113.71 1700.62 1113.13 1701.21 cv
1112.55 1701.8 1111.83 1702.09 1110.98 1702.09 cv
1109.94 1702.09 1108.38 1702 1106.3 1701.83 cv
1104.22 1701.65 1102.67 1701.56 1101.63 1701.56 cv
1100.27 1701.56 1097.33 1702.13 1092.82 1703.29 cv
1092.55 1723.9 li
1092.55 1724.76 1092.27 1725.48 1091.71 1726.07 cv
1091.15 1726.67 1090.44 1726.96 1089.59 1726.96 cv
1088.73 1726.96 1088.01 1726.67 1087.44 1726.07 cv
1086.87 1725.48 1086.59 1724.76 1086.59 1723.9 cv
1086.59 1719.97 1086.66 1714.06 1086.81 1706.18 cv
1086.96 1698.3 1087.04 1692.4 1087.04 1688.46 cv
1087.04 1687.58 1087.02 1686.26 1086.99 1684.49 cv
1086.96 1682.73 1086.95 1681.4 1086.95 1680.52 cv
1086.95 1679.65 1087.22 1678.91 1087.77 1678.31 cv
1088.32 1677.71 1089.04 1677.41 1089.92 1677.41 cv
1090.57 1677.41 1091.16 1677.59 1091.68 1677.95 cv
1095.38 1677.29 1099.84 1676.66 1103.58 1676.66 cv
1105.87 1676.66 1108.5 1676.99 1111.46 1677.65 cv
1115.47 1678.57 1117.48 1679.77 1117.48 1681.24 cv
1117.48 1682.04 1117.22 1682.75 1116.7 1683.37 cv
1116.12 1684.07 1115.4 1684.42 1114.54 1684.42 cv
cp
0 0 0 rgb
f
1127.18 1734.09 mo
1126.48 1734.09 1125.87 1733.82 1125.36 1733.28 cv
1124.83 1732.74 1124.58 1732.12 1124.58 1731.42 cv
1124.58 1730.85 1125.2 1729.13 1126.43 1726.27 cv
1127.51 1723.79 1128.34 1722.03 1128.92 1720.97 cv
1129.44 1720.01 1130.13 1719.53 1130.99 1719.53 cv
1131.71 1719.53 1132.32 1719.8 1132.83 1720.35 cv
1133.34 1720.9 1133.59 1721.53 1133.59 1722.23 cv
1133.59 1722.7 1132.18 1726.12 1129.34 1732.47 cv
1128.88 1733.55 1128.16 1734.09 1127.18 1734.09 cv
cp
f
1193.09 1682.71 mo
1191.85 1684.57 1190.84 1686.52 1190.06 1688.55 cv
1187.79 1695.11 li
1179.73 1716.89 li
1178.79 1719.45 1177.69 1721.94 1176.43 1724.38 cv
1175.79 1725.58 1174.9 1726.18 1173.74 1726.18 cv
1172.2 1726.18 1171.12 1725.4 1170.5 1723.84 cv
1168.09 1717.77 1165.4 1709.03 1162.44 1697.63 cv
1160.08 1689.39 li
1158.9 1685.24 1158.31 1682.52 1158.31 1681.24 cv
1158.31 1680.35 1158.63 1679.6 1159.27 1679.03 cv
1159.85 1678.49 1160.55 1678.22 1161.37 1678.22 cv
1162.88 1678.22 1163.86 1679.04 1164.3 1680.67 cv
1165.41 1685.89 li
1168.29 1696.07 li
1170.2 1703.5 1172.07 1709.9 1173.89 1715.27 cv
1174.07 1714.8 li
1182.1 1693.05 li
1184.64 1685.71 li
1185.78 1682.75 1186.99 1680.51 1188.27 1679 cv
1188.93 1678.2 1189.71 1677.8 1190.6 1677.8 cv
1191.4 1677.8 1192.12 1678.1 1192.75 1678.71 cv
1193.38 1679.32 1193.69 1680.06 1193.69 1680.91 cv
1193.69 1681.51 1193.49 1682.11 1193.09 1682.71 cv
cp
f
973.299 1474.28 mo
933.829 1502.68 905.764 1544.58 894.773 1591.97 cv
894.037 1595.15 898.929 1596.51 899.667 1593.32 cv
910.347 1547.27 937.46 1506.29 975.86 1478.66 cv
978.486 1476.77 975.956 1472.37 973.299 1474.28 cv
cp
.254902 .0470588 .0784314 rgb
f
1335.22 1500.01 mo
1360.97 1531.35 1380.32 1567.27 1392.41 1605.98 cv
1393.38 1609.09 1398.28 1607.76 1397.3 1604.63 cv
1384.94 1565.05 1365.13 1528.46 1338.81 1496.42 cv
1336.74 1493.9 1333.16 1497.5 1335.22 1500.01 cv
cp
f
1366.44 1156.48 mo
1369.76 1167.3 1369.75 1180.71 1366.95 1195.62 cv
1361.94 1222.25 1231.56 1273.98 1160.93 1273 cv
1090.3 1273.98 944.426 1225.39 938.751 1199.66 cv
935.113 1183.17 935.108 1168.25 938.719 1156.48 cv
959.966 1095.42 1052.63 1115.11 1152.58 1112.26 cv
1252.53 1115.11 1345.2 1095.42 1366.44 1156.48 cv
cp
.45098 .0862745 .141176 rgb
f
1158.64 1235.88 mo
1017.1 1207.62 li
1031.5 1188.42 li
1158.64 1194.89 li
1262.66 1183.06 li
1299.87 1192.21 li
1310.29 1205.03 li
1158.64 1235.88 li
cp
.580392 .0392157 .054902 rgb
f
1072.94 1201.67 mo
1083.47 1209.6 1224.76 1211.29 1238.36 1200.56 cv
1260.55 1183.06 1297.5 1195.08 1310.29 1205.03 cv
1305.52 1192.05 1296.67 1184.37 1283.12 1178.22 cv
1243.06 1160.04 1202.2 1169.19 1161.26 1176.99 cv
1159.19 1177.39 1091.4 1152.04 1039.55 1170.75 cv
1029.37 1174.43 1019.93 1193.13 1017.1 1207.62 cv
1020.84 1203.19 1056.1 1188.98 1072.94 1201.67 cv
cp
.929412 .109804 .141176 rgb
f
1364.86 1157.41 mo
1343.61 1096.36 1252.53 1115.11 1152.58 1112.26 cv
1052.63 1115.11 959.966 1095.42 938.719 1156.48 cv
935.204 1167.94 935.116 1182.39 938.472 1198.36 cv
979.08 1192.52 1020.85 1184.81 1070.15 1180.32 cv
1070.15 1180.32 1071.62 1186.69 1097.27 1183.67 cv
1122.93 1180.64 1143.51 1183.97 1145.48 1182 cv
1146.57 1180.91 1147.4 1178.54 1147.93 1176.63 cv
1148.13 1176.63 li
1148.83 1178.35 1149.79 1180.28 1150.85 1181.16 cv
1153.01 1182.93 1173.52 1181.24 1199.34 1181.79 cv
1211.61 1182.05 1218.16 1179.92 1221.66 1177.6 cv
1276.7 1180.02 1323.94 1186.43 1367.61 1191.79 cv
1369.67 1178.43 1367.88 1167.28 1364.86 1157.41 cv
cp
.956863 .92549 .929412 rgb
f
1152.62 1279 mo
1298.36 1264.5 1370.04 1208.73 1366.68 1192.75 cv
1305.96 1207.36 1280.99 1207.22 1221.3 1207.55 cv
1195.47 1207.7 1161.65 1207.28 1159.68 1209.25 cv
1158.6 1210.34 1157.76 1212.71 1157.23 1214.62 cv
1157.04 1214.62 li
1156.33 1212.9 1155.37 1210.97 1154.31 1210.1 cv
1152.15 1208.32 1131.64 1210.03 1105.82 1209.49 cv
1093.56 1209.24 1002.27 1211.47 938.68 1198.36 cv
936.623 1211.73 1052.67 1276.21 1152.62 1279 cv
cp
f
1364.86 1157.41 mo
1343.61 1096.36 1252.53 1115.11 1152.58 1112.26 cv
1052.63 1115.11 959.966 1095.42 938.719 1156.48 cv
936.514 1163.67 935.659 1172.03 936.154 1181.21 cv
966.262 1157.93 1010.26 1149.74 1060.44 1146.03 cv
1070.15 1180.32 li
1067.74 1145.53 li
1092 1143.95 1117.58 1143.28 1143.65 1142.36 cv
1148.41 1176.63 li
1150.68 1142.1 li
1151.04 1142.09 1151.4 1142.07 1151.76 1142.06 cv
1176.44 1142.99 1200.72 1143.59 1223.92 1144.83 cv
1221.03 1176.56 li
1229.96 1145.17 li
1286.68 1148.53 1336.43 1156.3 1368.89 1183.06 cv
1369.61 1173.15 1367.21 1165.08 1364.86 1157.41 cv
cp
.811765 .717647 .705882 rgb
f
1152.99 1137.85 mo
1252.89 1140.7 1345.29 1137.46 1366.6 1198.4 cv
1370.24 1181.91 1370.06 1168.25 1366.44 1156.48 cv
1345.2 1095.42 1250.24 1086.69 1150.29 1083.83 cv
1050.33 1086.69 959.966 1095.42 938.719 1156.48 cv
935.108 1168.25 933.858 1186.53 938.751 1201.08 cv
960.059 1140.14 1053.08 1140.7 1152.99 1137.85 cv
cp
1 .564706 .509804 rgb
f
938.57 1197.82 mo
935.027 1214.15 1015.82 1297.62 1162.7 1297.62 cv
1305.53 1286.23 1365.34 1223.55 1367.63 1193.23 cv
1321.07 1239.8 1004.12 1239.79 938.57 1197.82 cv
cp
f
1071.76 1199.91 mo
1078.49 1211.38 1134.66 1220.64 1157.48 1220.23 cv
1179.08 1219.85 1234.33 1207.66 1240.56 1198.36 cv
1251.39 1189.69 1068.82 1194.91 1071.76 1199.91 cv
cp
.929412 .109804 .141176 rgb
f
1086.1 1196.75 mo
1086.1 1196.75 1137.68 1213.76 1155.11 1213.76 cv
1172.53 1213.76 1218.67 1199.03 1220.73 1197.7 cv
1222.79 1196.37 1201.72 1193.02 1185.88 1196.27 cv
1170.04 1199.54 1177.65 1200.35 1159.27 1197.7 cv
1140.9 1195.04 1143.75 1194.57 1127.28 1196.75 cv
1110.8 1198.92 1088.31 1192.32 1086.1 1196.75 cv
cp
.945098 .341176 .364706 rgb
f
1197.13 1198.36 mo
1188.42 1204.13 1174.29 1211.07 1161.73 1211.7 cv
1160.15 1211.78 1158.78 1211.02 1158.66 1210.01 cv
1158.41 1208 1161.92 1207.97 1161.73 1208.02 cv
1173.06 1208.5 1188.31 1202.76 1197.13 1198.36 cv
cp
.968627 .572549 .588235 rgb
f
900.917 1144.92 mo
897.14 1169.22 898.166 1193.58 904.096 1217.45 cv
904.883 1220.62 909.778 1219.28 908.99 1216.1 cv
903.289 1193.16 902.178 1169.64 905.81 1146.27 cv
906.307 1143.07 901.418 1141.7 900.917 1144.92 cv
cp
.254902 .0470588 .0784314 rgb
f
1398.7 1172.88 mo
1391.42 1194.13 1384.15 1215.39 1376.87 1236.65 cv
1375.82 1239.74 1380.71 1241.07 1381.77 1237.99 cv
1389.04 1216.74 1396.32 1195.48 1403.59 1174.22 cv
1404.65 1171.13 1399.75 1169.8 1398.7 1172.88 cv
cp
f
1139.26 1341.85 mo
1139.28 1342.37 1140.86 1370.85 1140.91 1371.37 cv
1142.1 1383.39 1134.13 1380.86 1135 1375.64 cv
1135.54 1372.4 1133.38 1345.59 1133.29 1341.97 cv
1132.43 1341.94 1125.33 1342.3 1120.48 1341.06 cv
1117.67 1340.33 1117.62 1337.5 1118.87 1336.02 cv
1119.99 1334.71 1121 1334.99 1125.84 1335.61 cv
1135.69 1336.79 1164.82 1333.57 1156.9 1341.63 cv
1155.58 1342.97 1149.32 1341.98 1139.26 1341.85 cv
cp
0 0 0 rgb
f
1181.65 1379.26 mo
1179.35 1371.07 1180.03 1361.27 1180.03 1360.75 cv
1180.03 1353.2 1173.68 1351.76 1166.46 1365.22 cv
1166.46 1372.7 1166.15 1377.12 1165.52 1378.5 cv
1164.01 1381.85 1158.97 1380.29 1160.19 1376.2 cv
1161.09 1373.39 1160.34 1335.88 1160.34 1335.37 cv
1160.34 1333.67 1161.67 1332.52 1163.28 1332.52 cv
1167.46 1332.52 1166.82 1338.29 1166.26 1355.74 cv
1169.05 1352 1172.63 1349.3 1177.27 1349.3 cv
1186.47 1349.3 1185.06 1357.06 1185.68 1365.63 cv
1187.34 1380.07 1188.04 1379.29 1186.51 1380.69 cv
1185.92 1381.23 1182.42 1381.91 1181.65 1379.26 cv
cp
f
1360.65 693.065 mo
1363.97 703.884 1362.92 717.363 1360.11 732.278 cv
1355.11 758.906 1222.98 822.15 1152.35 821.174 cv
1081.72 822.15 938.628 761.979 932.955 736.251 cv
929.316 719.756 929.311 704.837 932.921 693.065 cv
954.168 632.009 1046.83 651.698 1146.79 648.841 cv
1246.74 651.698 1339.4 632.009 1360.65 693.065 cv
cp
.45098 .0862745 .141176 rgb
f
1165.97 736.901 mo
1164.96 733.964 1163.25 731.102 1161.4 728.678 cv
1158.87 725.354 1155.91 721.871 1155.32 717.896 cv
1154.42 711.788 1160.58 705.071 1160.45 698.912 cv
1132.04 698.912 li
1131.91 705.071 1140.04 711.215 1139.14 717.324 cv
1138.6 720.961 1135.65 724.156 1133.11 727.055 cv
1131.37 729.032 1129.47 730.927 1128.05 733.075 cv
1124.55 738.392 1124.45 746.016 1130.27 750.254 cv
1134.31 753.198 1139.93 754.521 1145.27 754.73 cv
1150.65 754.942 1156.4 754.06 1160.87 751.519 cv
1167.28 747.872 1167.81 742.262 1165.97 736.901 cv
cp
f
1134.69 729.603 mo
1129.42 740.132 1133.34 745.433 1142.84 746.005 cv
1146.18 746.207 1145.88 751.262 1142.54 751.06 cv
1142.22 751.041 1141.86 750.933 1142.03 750.978 cv
1133.85 748.83 1128.24 743.67 1131.35 735.286 cv
1132.17 733.185 1133.36 731.32 1134.69 729.603 cv
cp
.780392 .635294 .654902 rgb
f
1306.73 746.785 mo
1294.34 739.014 1266.18 729.583 1252.62 723.43 cv
1212.56 705.244 1196.4 705.776 1155.46 713.579 cv
1153.39 713.973 1114.68 699.994 1062.83 718.708 cv
1049.82 723.403 1008.06 736.678 1010.21 752.878 cv
1014.71 786.677 1162.78 801.084 1162.78 801.084 cv
1162.78 801.084 1316.07 765.982 1306.73 746.785 cv
cp
.929412 .109804 .141176 rgb
f
1360.65 693.064 mo
1339.4 632.009 1246.74 651.698 1146.79 648.841 cv
1046.83 651.698 954.168 632.009 932.921 693.064 cv
929.407 704.526 929.319 718.972 932.675 734.949 cv
973.283 729.106 1015.05 721.399 1064.35 716.904 cv
1064.35 716.904 1065.82 723.279 1091.48 720.251 cv
1117.13 717.224 1137.71 720.556 1139.68 718.582 cv
1140.77 717.498 1141.6 715.127 1142.13 713.212 cv
1142.33 713.211 li
1143.03 714.939 1143.99 716.866 1145.05 717.741 cv
1147.21 719.516 1167.72 717.823 1193.55 718.376 cv
1205.81 718.639 1212.36 716.504 1215.86 714.189 cv
1270.9 716.608 1316.44 723.012 1360.11 728.38 cv
1362.18 715.014 1363.67 702.934 1360.65 693.064 cv
cp
.956863 .92549 .929412 rgb
f
1219.84 745.299 mo
1194.01 745.444 1155.85 744.541 1153.88 746.515 cv
1152.8 747.601 1151.97 749.294 1151.44 751.209 cv
1151.24 751.211 li
1150.54 749.483 1149.57 747.558 1148.51 746.683 cv
1146.36 744.91 1125.85 746.615 1100.02 746.079 cv
1087.76 745.824 996.469 748.05 932.883 734.949 cv
930.826 748.316 1046.87 812.791 1146.83 815.583 cv
1159.41 817.271 1171.4 818.207 1182.8 818.498 cv
1251.38 806.978 1343.36 761.23 1357.73 736.6 cv
1358.87 733.501 1361.23 731.01 1360.88 729.338 cv
1320.28 735.207 1279.53 744.964 1219.84 745.299 cv
cp
f
1358.84 693.064 mo
1337.6 632.009 1246.74 651.698 1146.79 648.841 cv
1046.83 651.698 954.168 632.009 932.921 693.064 cv
930.717 700.253 929.862 708.617 930.357 717.794 cv
960.465 694.511 1004.46 686.323 1054.65 682.616 cv
1064.35 716.904 li
1061.94 682.111 li
1086.2 680.534 1111.78 679.864 1137.85 678.942 cv
1142.62 713.21 li
1144.88 678.687 li
1145.24 678.673 1145.6 678.661 1145.96 678.646 cv
1170.64 679.577 1194.93 680.177 1218.12 681.418 cv
1215.23 713.144 li
1224.17 681.758 li
1280.88 685.114 1328.9 692.886 1361.37 719.648 cv
1362.09 709.741 1361.2 700.734 1358.84 693.064 cv
cp
.811765 .717647 .705882 rgb
f
1147.19 674.43 mo
1247.09 677.285 1338.17 674.691 1359.48 735.636 cv
1365.18 718.724 1364.26 704.836 1360.65 693.065 cv
1339.4 632.009 1244.44 623.271 1144.49 620.414 cv
1044.54 623.271 954.168 632.009 932.921 693.065 cv
929.312 704.836 927.67 725.791 932.954 737.745 cv
954.262 676.801 1047.29 677.285 1147.19 674.43 cv
cp
1 .564706 .509804 rgb
f
932.883 734.949 mo
929.34 751.28 1010.13 834.751 1157.01 834.751 cv
1299.84 823.362 1361.61 747.161 1360.88 729.338 cv
1332.49 785.119 998.434 776.925 932.883 734.949 cv
cp
f
1058.66 869.699 mo
1057.51 867.062 1057.12 867.032 1053.99 867.032 cv
1046.61 867.032 1037.15 882.241 1037.15 890.609 cv
1037.15 895.585 1040.81 900.136 1045.78 900.136 cv
1052.94 900.136 1057.5 893.754 1059.89 893.754 cv
1061.69 893.754 1062.92 895.375 1062.92 896.9 cv
1062.92 900.467 1052.83 906.277 1045.78 906.277 cv
1037.4 906.277 1031.16 898.995 1031.16 890.609 cv
1031.16 878.22 1044.78 856.821 1058.69 861.46 cv
1059.39 860.441 1060.3 859.932 1061.42 859.932 cv
1065.03 859.932 1065.13 868.968 1063.85 870.777 cv
1062.74 872.376 1059.93 872.664 1058.66 869.699 cv
cp
0 0 0 rgb
f
1072.14 915.055 mo
1070.64 913.495 1071.56 911.889 1073.22 908.045 cv
1075.43 902.971 1076.08 901.304 1077.78 901.304 cv
1079.25 901.304 1080.38 902.63 1080.38 904 cv
1080.38 904.479 1078.96 907.895 1076.13 914.246 cv
1075.26 916.287 1073.27 916.225 1072.14 915.055 cv
cp
f
1112.59 866.762 mo
1112.51 879.253 1113.05 855.225 1112.35 900.345 cv
1126.22 906.336 1135.93 898.607 1135.93 888.123 cv
1135.93 882.491 1123.19 871.446 1112.59 866.762 cv
cp
1109.56 905.738 mo
1109.26 905.738 li
1104.39 905.738 1106.81 899.73 1106.81 883.809 cv
1106.81 877.622 1106.54 869.055 1106.54 862.868 cv
1106.54 861.251 1108.57 858.944 1110.31 858.944 cv
1111.48 858.944 1118.73 862.866 1120.44 863.438 cv
1131.36 867.169 1141.98 876.25 1141.98 887.973 cv
1141.98 891.388 1141.17 894.664 1139.56 897.799 cv
1132.69 911.204 1114.88 909.749 1109.56 905.738 cv
cp
f
1151.74 915.055 mo
1150.24 913.495 1151.15 911.889 1152.82 908.045 cv
1155.03 902.971 1155.68 901.304 1157.38 901.304 cv
1158.85 901.304 1159.98 902.63 1159.98 904 cv
1159.98 904.479 1158.56 907.895 1155.73 914.246 cv
1154.86 916.287 1152.87 916.225 1151.74 915.055 cv
cp
f
1222.83 906.727 mo
1217.2 906.727 1194.23 875.832 1190.93 871.286 cv
1190.92 871.456 1190.67 885.828 1190.69 884.917 cv
1190.69 889.268 1190.9 895.372 1190.9 899.866 cv
1190.9 909.537 1186.8 908.653 1185.18 906.876 cv
1183.85 905.458 1184.36 905.463 1184.82 891.493 cv
1185.65 865.532 1181.38 859.093 1187.9 859.093 cv
1190.83 859.093 1193.54 866.613 1205.25 881.142 cv
1209.98 886.995 1215.17 892.586 1220.83 897.918 cv
1220.85 897.602 1220.9 878.464 1219.72 869.399 cv
1219.44 867.604 1218.31 864.937 1218.31 863.077 cv
1218.31 860.761 1219.37 859.603 1221.48 859.603 cv
1224.96 859.603 1226.7 866.083 1226.7 879.045 cv
1226.7 881.262 1226.67 884.573 1226.61 888.977 cv
1226.43 901.782 1227.05 906.727 1222.83 906.727 cv
cp
f
1235.96 915.055 mo
1234.34 913.381 1235.54 911.485 1237.03 908.045 cv
1239.23 903.003 1239.88 901.304 1241.59 901.304 cv
1243.07 901.304 1244.19 902.636 1244.19 904 cv
1244.19 904.479 1242.77 907.895 1239.94 914.246 cv
1239.07 916.287 1237.08 916.226 1235.96 915.055 cv
cp
f
1269.43 896.046 mo
1270.65 894.955 1272.73 894.735 1274.18 896.93 cv
1279.95 905.522 1298.03 901.554 1298.03 892.526 cv
1298.03 886.833 1290.48 884.688 1284.79 884.527 cv
1271.38 884.019 1268.29 873.223 1278.52 865.774 cv
1289.01 858.222 1301.89 862.935 1301.89 865.894 cv
1301.89 870.918 1295.22 867.185 1290.36 867.272 cv
1280.42 867.398 1274.4 876.596 1283.5 878.686 cv
1288.21 879.8 1295.23 878.432 1300.6 883.719 cv
1312.99 895.902 1293.05 913.832 1274.24 905.168 cv
1270.53 903.451 1267.71 897.594 1269.43 896.046 cv
cp
f
1035.15 940.686 mo
1035.42 953.048 1037.86 974.138 1036.37 977.445 cv
1035.37 979.813 1033.11 979.894 1031.61 978.583 cv
1029.88 977.069 1031.26 976.841 1030.76 969.326 cv
1030.75 969.149 1029.07 940.983 1029.06 940.807 cv
1028.2 940.783 1020.95 941.139 1016.03 939.876 cv
1012.08 938.854 1013.37 933.58 1016.69 933.796 cv
1018.97 933.926 1023.09 934.695 1026.34 934.695 cv
1050.39 934.695 1044.99 935.204 1050.93 935.204 cv
1053.81 935.204 1054.88 938.646 1053.09 940.461 cv
1051.37 942.208 1050.08 940.889 1035.15 940.686 cv
cp
f
1058.54 988.679 mo
1056.94 987.015 1058.12 985.13 1059.62 981.668 cv
1061.74 976.813 1062.42 974.928 1064.18 974.928 cv
1065.65 974.928 1066.78 976.255 1066.78 977.625 cv
1066.78 978.104 1065.36 981.518 1062.53 987.87 cv
1061.65 989.921 1059.67 989.846 1058.54 988.679 cv
cp
f
1114.45 957.522 mo
1121.04 967.169 li
1128.17 977.57 1128.83 976.589 1128.83 978.583 cv
1128.83 980.254 1127.45 981.698 1125.74 981.698 cv
1123.48 981.698 1120.37 977.131 1119 975.078 cv
1118.88 974.907 1109.7 961.302 1110.28 962.166 cv
1099.98 974.09 li
1095.09 979.157 1094.49 981.249 1092.28 981.249 cv
1090.64 981.249 1089.19 979.837 1089.19 978.134 cv
1089.19 976.132 1090.83 975.465 1095.36 970.075 cv
1106.6 957.043 li
1090.34 935.308 1090.96 939.042 1090.96 936.761 cv
1090.96 935.19 1092.19 933.616 1093.98 933.616 cv
1096.64 933.616 1098.57 936.227 1110.73 952.4 cv
1114.69 947.14 1123.42 933.616 1126.19 933.616 cv
1127.81 933.616 1129.27 935.01 1129.27 936.731 cv
1129.27 936.934 1116.93 954.77 1114.45 957.522 cv
cp
f
1138.26 988.679 mo
1136.66 987.015 1137.84 985.13 1139.34 981.668 cv
1141.46 976.813 1142.14 974.928 1143.89 974.928 cv
1145.37 974.928 1146.5 976.255 1146.5 977.625 cv
1146.5 978.104 1145.08 981.518 1142.25 987.87 cv
1141.37 989.921 1139.38 989.846 1138.26 988.679 cv
cp
f
1200.06 944.371 mo
1194.91 957.103 li
1188.86 971.559 1187.58 972.305 1185.54 976.307 cv
1184.39 978.122 1183.96 981.279 1181.28 981.279 cv
1179.81 981.279 1178.2 980.069 1178.2 978.254 cv
1178.2 976.582 1183.65 967.137 1184.7 965.132 cv
1175.54 953.31 1180.02 956.292 1173.25 946.109 cv
1168.24 938.592 1167.74 937.892 1167.74 936.672 cv
1167.74 934.913 1169.26 933.616 1170.83 933.616 cv
1173.22 933.616 1173.76 936.207 1175.68 938.738 cv
1178.51 942.933 1181.49 947.268 1183.38 951.981 cv
1184.04 953.638 1185.44 955.906 1187.6 958.781 cv
1194.83 942.013 1197.71 930.105 1202.63 934.485 cv
1203.26 935.043 1203.57 935.764 1203.57 936.642 cv
1203.57 938.532 1201.67 941.205 1200.06 944.371 cv
cp
f
1212.56 988.679 mo
1210.95 987.014 1212.13 985.13 1213.64 981.668 cv
1215.8 976.704 1216.47 974.928 1218.19 974.928 cv
1219.66 974.928 1220.8 976.252 1220.8 977.625 cv
1220.8 978.104 1219.38 981.518 1216.54 987.87 cv
1215.66 989.932 1213.67 989.837 1212.56 988.679 cv
cp
f
1275.05 944.46 mo
1265.21 952.084 1256.39 967.864 1250.72 975.377 cv
1268.3 974.689 1270.29 974.569 1274.06 974.569 cv
1276.7 974.569 1278.65 974.688 1279.9 974.928 cv
1282.99 975.54 1282.93 978.465 1281.46 979.721 cv
1280.24 980.738 1278.75 980.493 1276.61 980.365 cv
1273.08 980.154 1265.65 980.354 1260.33 980.486 cv
1246.7 980.819 1243.2 981.684 1243.2 977.685 cv
1243.2 974.317 1247.04 970.216 1248.27 968.248 cv
1253.87 960.885 1261.83 947.708 1271.51 939.488 cv
1263.32 939.725 1268.8 940.177 1247.01 940.177 cv
1242.82 940.177 1243.21 935.31 1245.45 934.394 cv
1247.4 933.569 1252.66 934.175 1254.87 934.409 cv
1264.62 935.448 1266.67 934.246 1274.87 934.246 cv
1292.16 934.246 1275.13 944.288 1275.05 944.46 cv
cp
f
899.317 679.337 mo
892.372 713.332 896.122 748.08 910.062 779.84 cv
911.372 782.823 915.745 780.243 914.444 777.279 cv
901.085 746.845 897.56 713.237 904.21 680.686 cv
904.862 677.499 899.972 676.135 899.317 679.337 cv
cp
.254902 .0470588 .0784314 rgb
f
1114.83 590.545 mo
1133.44 599.482 1153.99 599.895 1172.97 591.851 cv
1175.97 590.581 1173.38 586.208 1170.41 587.47 cv
1153.26 594.736 1134.16 594.217 1117.39 586.163 cv
1114.46 584.756 1111.89 589.13 1114.83 590.545 cv
cp
f
1388.7 674.145 mo
1395.23 711.87 1388.71 750.636 1370.16 784.128 cv
1368.58 786.973 1372.83 789.758 1374.41 786.9 cv
1393.65 752.161 1400.43 712.169 1393.66 673.035 cv
1393.1 669.816 1388.15 670.927 1388.7 674.145 cv
cp
f
1370.36 354.807 mo
1315.32 354.164 1236.72 356.751 1149.05 356.751 cv
1058.49 356.751 976.793 353.995 920.79 354.891 cv
920.773 354.891 li
872.889 362.198 844.016 369.048 844.016 369.048 cv
844.016 390.783 981.36 435.455 1149.05 435.455 cv
1316.72 435.455 1451.24 390.783 1451.24 369.048 cv
1370.36 354.807 li
cp
1 .564706 .509804 rgb
f
1451.24 369.048 mo
1451.24 369.048 1315.3 395.096 1147.63 395.096 cv
979.94 395.096 844.016 369.048 844.016 369.048 cv
844.016 369.048 872.889 362.198 920.773 354.891 cv
920.79 354.891 li
975.322 346.586 1054.46 337.707 1143.72 337.707 cv
1232.67 337.707 1313.79 346.535 1370.36 354.807 cv
1420.42 362.147 1451.24 369.048 1451.24 369.048 cv
cp
f
1223.85 392.728 mo
1118.96 398.563 954.553 386.57 844.455 368.946 cv
844.173 369.011 844.016 369.048 844.016 369.048 cv
844.033 369.224 li
1020.92 405.189 1286 403.423 1451.22 369.224 cv
1451.24 369.048 li
1451.24 369.048 1451.08 369.012 1450.79 368.948 cv
1375.04 380.796 1267.87 390.821 1223.85 392.728 cv
cp
.168627 .0313726 .054902 rgb
f
1072.76 479.576 mo
1072.76 479.746 1072.06 497.55 1072.11 496.413 cv
1093.37 498.209 1090.82 476.709 1072.76 479.576 cv
cp
1077.53 502.854 mo
1076.12 502.854 1074.88 503.145 1071.69 502.674 cv
1071.42 508.355 1071.54 510.416 1071.51 515.616 cv
1077.14 515.422 1084.13 514.607 1088.31 510.883 cv
1090.69 508.858 1091.37 507.703 1086.31 505.371 cv
1084.39 504.471 1078.91 503.181 1077.53 502.854 cv
cp
1069.17 521.757 mo
1062.73 521.757 1066.46 504.338 1066.77 484.699 cv
1066.73 480.204 1066.73 475.35 1068.09 474.514 cv
1090.45 467.607 1100.44 489.316 1087.08 499.199 cv
1098.07 503.885 1097.99 510.494 1092.12 515.557 cv
1086.18 520.772 1077.18 521.757 1069.17 521.757 cv
cp
0 0 0 rgb
f
1105.24 529.816 mo
1103.74 528.256 1104.65 526.65 1106.32 522.806 cv
1108.51 517.762 1109.16 516.065 1110.87 516.065 cv
1112.36 516.065 1113.48 517.407 1113.48 518.762 cv
1113.48 519.241 1112.06 522.656 1109.22 529.007 cv
1108.35 531.046 1106.37 530.988 1105.24 529.816 cv
cp
f
1179.87 521.128 mo
1177.77 517.776 1173.86 493.636 1173.27 490.032 cv
1164.47 516.971 1163.89 521.608 1159.88 521.608 cv
1157.5 521.608 1156.58 518.96 1155.9 516.485 cv
1154.07 509.462 1152.13 503.258 1149.7 490.511 cv
1141.78 524.45 1145.75 509.128 1143.26 519.93 cv
1142.05 523.067 1133.59 526.718 1139.27 506.719 cv
1142.57 494.646 li
1144.48 484.427 1145.35 474.813 1150.06 474.813 cv
1155.32 474.813 1153.48 485.492 1160.42 509.235 cv
1170.74 482.401 1168.08 474.364 1173.6 474.364 cv
1177.45 474.364 1178.2 482.546 1178.7 486.407 cv
1182.46 515.225 1187.94 519.072 1184.73 521.938 cv
1184.08 522.517 1181.2 523.263 1179.87 521.128 cv
cp
f
1194.73 529.816 mo
1193.11 528.143 1194.31 526.247 1195.8 522.806 cv
1198 517.763 1198.65 516.065 1200.36 516.065 cv
1201.84 516.065 1202.96 517.396 1202.96 518.762 cv
1202.96 519.241 1201.54 522.656 1198.71 529.007 cv
1197.84 531.049 1195.85 530.988 1194.73 529.816 cv
cp
f
1233.1 479.188 mo
1232.16 503.081 1232.48 494.84 1232.41 496.623 cv
1233.11 496.589 1238.93 498.351 1244.19 494.466 cv
1252.66 488.209 1246.38 476.966 1233.1 479.188 cv
cp
1232.05 502.345 mo
1231.3 516.59 1233.23 521.039 1229.09 521.039 cv
1227.44 521.039 1226.33 519.756 1226.33 518.193 cv
1226.42 510.523 1226.07 508.947 1226.87 496.982 cv
1228.11 479.125 1226.36 473.141 1230.82 473.854 cv
1231.46 473.656 1232.37 473.505 1233.55 473.405 cv
1253.14 471.743 1259.23 489.854 1247.81 498.779 cv
1244.46 501.417 1237.49 503.098 1232.05 502.345 cv
cp
f
872.982 332.319 mo
847.212 337.554 792.488 352.62 784.486 378.735 cv
775.113 409.33 810.116 414.465 853.393 431.158 cv
856.441 432.334 857.762 427.43 854.741 426.266 cv
798.675 404.638 794.125 404.306 790.02 395.999 cv
774.341 364.267 839.884 344.21 874.331 337.211 cv
877.529 336.562 876.176 331.67 872.982 332.319 cv
cp
.254902 .0470588 .0784314 rgb
f
1419.15 330.258 mo
1444.92 335.495 1499.64 350.56 1507.64 376.675 cv
1517.02 407.27 1482.01 412.405 1438.74 429.099 cv
1435.69 430.274 1434.37 425.37 1437.39 424.205 cv
1493.46 402.578 1498 402.245 1502.11 393.939 cv
1517.79 362.208 1452.25 342.15 1417.8 335.152 cv
1414.6 334.502 1415.96 329.61 1419.15 330.258 cv
cp
f
2075.32 336.123 mo
2085.05 364.582 2069.83 412.516 2029.34 455.013 cv
1989.52 497.207 1924.43 533.963 1850.02 533.041 cv
1775.62 533.963 1710.52 497.207 1670.71 455.013 cv
1630.21 412.516 1614.99 364.582 1624.73 336.123 cv
1642.22 291.05 1705.7 292.575 1782.87 294.098 cv
1804.42 294.524 1827.04 294.95 1850.02 294.361 cv
1873.01 294.95 1895.63 294.524 1917.18 294.098 cv
1994.35 292.574 2057.82 291.05 2075.32 336.123 cv
.168627 .0313726 .054902 rgb
f
1961.04 465.875 mo
1961.04 465.875 1728.45 465.875 1728.18 465.875 cv
1727.62 465.875 1723.86 441.402 1723.23 438.978 cv
1719.21 423.728 1716.19 405.373 1724.99 391.564 cv
1731.48 381.378 1741.42 373.682 1751.77 367.719 cv
1779.89 351.524 1813.96 345.877 1846.03 345.877 cv
1886.28 345.877 1985.52 361.643 1971.07 422.351 cv
1967.61 436.9 1964.28 451.286 1961.04 465.875 cv
.380392 .160784 .196078 rgb
f
1934.85 465.875 mo
1757.21 465.875 li
1761.01 409.473 li
1763.41 373.818 1800.76 345.877 1846.03 345.877 cv
1891.3 345.877 1928.66 373.818 1931.06 409.473 cv
1934.85 465.875 li
cp
.337255 .0627451 .105882 rgb
f
1868.32 377.088 mo
1867.36 374.288 1865.73 371.558 1863.97 369.246 cv
1861.55 366.075 1858.73 362.753 1858.17 358.961 cv
1857.31 353.136 1863.18 346.729 1863.06 340.854 cv
1835.96 340.854 li
1835.83 346.729 1843.59 352.59 1842.73 358.416 cv
1842.22 361.885 1839.41 364.932 1836.98 367.696 cv
1835.32 369.583 1833.5 371.392 1832.15 373.439 cv
1828.81 378.511 1828.72 385.784 1834.27 389.825 cv
1838.13 392.633 1843.48 393.895 1848.58 394.095 cv
1853.71 394.297 1859.2 393.455 1863.46 391.031 cv
1869.57 387.553 1870.07 382.202 1868.32 377.088 cv
cp
.45098 .0862745 .141176 rgb
f
1838.49 370.127 mo
1833.4 380.286 1837.45 385.243 1846.26 385.773 cv
1847.59 385.853 1848.61 386.998 1848.53 388.329 cv
1848.37 391.05 1845.29 390.561 1845.49 390.515 cv
1834.86 387.725 1830.63 380.322 1838.49 370.127 cv
cp
.780392 .635294 .654902 rgb
f
1977.92 468.776 mo
1966.1 460.028 1952.91 452.573 1939.98 445.647 cv
1901.77 425.177 1886.36 425.776 1847.3 434.559 cv
1845.33 435.003 1808.41 419.267 1758.96 440.331 cv
1746.54 445.618 1711.09 455.388 1713.15 473.624 cv
1717.44 511.668 1854.29 533.058 1854.29 533.058 cv
1854.29 533.058 1986.83 490.385 1977.92 468.776 cv
cp
.929412 .109804 .141176 rgb
f
2029.34 455.013 mo
2035.53 448.52 2041.12 441.899 2046.13 435.24 cv
2009.75 422.226 1938.58 428.335 1863.05 427.172 cv
1772.18 428.571 1687.62 419.444 1662.36 445.76 cv
1665.01 448.866 1667.79 451.954 1670.71 455.013 cv
1698.05 483.988 1737.31 510.399 1783.33 523.805 cv
1808.72 523.343 1835.87 522.581 1863.56 523.291 cv
1882.19 522.813 1900.59 523.002 1918.37 523.318 cv
1963.67 509.766 2002.32 483.642 2029.34 455.013 cv
cp
.956863 .92549 .929412 rgb
f
1918.37 523.318 mo
1953.35 512.854 1984.36 494.895 2009.12 474.075 cv
1968.6 481.431 1917.33 481.625 1863.98 482.992 cv
1790.97 481.121 1721.44 481.449 1678.21 462.603 cv
1705.02 488.54 1741.37 511.58 1783.33 523.805 cv
1918.37 523.318 li
cp
.811765 .717647 .705882 rgb
f
1859.8 431.878 mo
1863.56 489.204 li
1855.02 489.204 li
1859.8 431.878 li
cp
f
1783.04 489.204 mo
1786.8 434.889 li
1773.36 489.204 li
1783.04 489.204 li
cp
f
1933.88 489.204 mo
1926.35 437.299 li
1941.95 489.204 li
1933.88 489.204 li
cp
f
2053.5 367.751 mo
2062.32 352.263 2048.54 326.175 2011.88 303.047 cv
2007.56 300.3 2002.92 297.596 1997.98 294.963 cv
1956.96 291.45 1904.52 295.757 1850.02 294.361 cv
1794.99 295.771 1742.05 291.365 1700.86 295.069 cv
1695.99 297.668 1691.42 300.337 1687.16 303.047 cv
1650.5 326.175 1636.72 352.263 1645.53 367.751 cv
1665.8 399.13 1754.18 389.01 1849.52 390.479 cv
1944.85 389.01 2033.24 399.13 2053.5 367.751 cv
cp
.956863 .92549 .929412 rgb
f
2054.43 365.903 mo
2061.22 350.246 2047.12 325.279 2011.88 303.047 cv
2007.56 300.3 2002.92 297.596 1997.98 294.963 cv
1956.96 291.45 1904.52 295.757 1850.02 294.361 cv
1794.99 295.771 1742.05 291.365 1700.86 295.069 cv
1695.99 297.668 1691.42 300.337 1687.16 303.047 cv
1651.45 325.575 1637.45 350.91 1644.89 366.523 cv
1684.19 336.026 1764.93 336.851 1850.45 334.659 cv
1935.38 336.835 2015.05 336.037 2054.43 365.903 cv
cp
.811765 .717647 .705882 rgb
f
1846.26 385.773 mo
1850.02 328.447 li
1841.48 328.447 li
1846.26 385.773 li
cp
f
1769.5 328.447 mo
1773.27 382.762 li
1759.82 328.447 li
1769.5 328.447 li
cp
f
1920.35 328.447 mo
1912.82 380.353 li
1928.41 328.447 li
1920.35 328.447 li
cp
f
1850.45 318.526 mo
1955.69 321.222 2052.84 319.352 2075.29 376.906 cv
2079.12 361.331 2079.12 347.241 2075.32 336.123 cv
2052.94 278.464 1952.9 258.007 1847.6 255.31 cv
1742.31 258.007 1647.11 278.465 1624.73 336.123 cv
1620.92 347.241 1620.93 361.33 1624.76 376.906 cv
1647.21 319.353 1745.21 321.222 1850.45 318.526 cv
cp
1 .564706 .509804 rgb
f
2075.29 376.906 mo
2067.57 401.791 2057.15 424.528 2029.34 447.023 cv
1989.04 479.626 1933.69 497.563 1859.29 496.642 cv
1784.88 497.563 1710.52 497.207 1670.71 455.013 cv
1646.03 429.117 1630.74 401.203 1624.76 376.906 cv
1624.73 376.992 li
1614.99 405.451 1630.21 453.385 1670.71 495.882 cv
1710.52 538.076 1780.61 569.838 1855.02 568.916 cv
1929.42 569.838 1989.52 538.076 2029.34 495.882 cv
2069.83 453.386 2085.05 405.451 2075.32 376.992 cv
2075.29 376.906 li
cp
f
1844.54 632.795 mo
1842.21 644.345 1834.14 652.987 1822.7 652.987 cv
1800.28 652.987 1806.33 620.199 1821.05 607.24 cv
1826.07 602.812 1830.43 603.265 1836.36 605.653 cv
1840.3 607.213 1843.58 609.757 1840.91 612.603 cv
1837.98 615.731 1835.37 610.027 1829.17 610.027 cv
1819.28 610.027 1804.25 646.845 1822.7 646.845 cv
1830.71 646.845 1835.87 641.107 1837.83 633.184 cv
1832.29 633.464 1827.55 634.532 1823.6 636.389 cv
1820.16 638.04 1817.37 633.068 1820.84 630.907 cv
1827.52 626.827 1843.64 626.147 1845.32 627.821 cv
1845.9 628.401 1846.18 629.13 1846.18 630.008 cv
1846.18 631.307 1845.63 632.236 1844.54 632.795 cv
cp
0 0 0 rgb
f
1854 660.417 mo
1852.39 658.742 1853.59 656.847 1855.08 653.406 cv
1857.28 648.364 1857.93 646.665 1859.64 646.665 cv
1861.12 646.665 1862.24 647.998 1862.24 649.362 cv
1862.24 649.841 1860.82 653.256 1857.99 659.607 cv
1857.12 661.648 1855.13 661.587 1854 660.417 cv
cp
f
1895.23 635.131 mo
1895.23 635.308 1895.2 652.317 1895.2 651.249 cv
1895.2 655.031 1891.34 654.884 1889.86 652.716 cv
1888.77 651.118 1888.78 651.301 1889.44 629.08 cv
1890.13 606.433 1889.45 607.294 1890.72 605.953 cv
1891.89 604.716 1893.85 604.774 1894.97 605.953 cv
1896.88 607.958 1895.04 616.377 1895.14 626.264 cv
1910.79 611.427 1913.03 602.414 1917.21 606.461 cv
1919.49 608.661 1917.49 611.352 1910.42 619.194 cv
1906.86 623.088 1903.18 626.903 1899.39 630.638 cv
1906.88 638.504 1913.63 643.963 1913.8 644.119 cv
1917.04 646.617 1919.85 645.911 1919.85 649.062 cv
1919.85 649.741 1919.64 650.391 1919.22 651.009 cv
1915.05 657.11 1898.31 638.021 1895.23 635.131 cv
cp
f
1626.47 298.18 mo
1651.9 270.976 1682.54 249.604 1716.83 235.086 cv
1719.82 233.817 1717.24 229.444 1714.27 230.704 cv
1679.61 245.38 1648.58 267.101 1622.88 294.591 cv
1620.66 296.976 1624.24 300.572 1626.47 298.18 cv
cp
.254902 .0470588 .0784314 rgb
f
1993.3 246.185 mo
2019.9 250.85 2043.97 263.293 2063.08 282.389 cv
2065.39 284.7 2068.98 281.113 2066.66 278.801 cv
2047 259.139 2022.05 246.099 1994.65 241.292 cv
1991.46 240.731 1990.09 245.621 1993.3 246.185 cv
cp
f
1818.08 1473.73 mo
1818.08 1577.46 1753.4 1661.56 1673.63 1661.56 cv
1609.22 1661.56 1554.65 1606.75 1536.02 1531.04 cv
1531.57 1512.97 1529.17 1493.72 1529.17 1473.73 cv
1529.17 1405.49 1557.16 1345.75 1599.03 1312.86 cv
1620.8 1295.75 1728.09 1296.39 1750.31 1314.53 cv
1791.02 1347.75 1818.08 1406.63 1818.08 1473.73 cv
.337255 .0627451 .105882 rgb
f
1673.63 1295.82 mo
1593.85 1295.82 1529.17 1375.94 1529.17 1474.77 cv
1529.17 1481.82 1529.5 1488.77 1530.14 1495.6 cv
1540.78 1497.95 1552.23 1473.76 1573.44 1449.58 cv
1593.8 1426.35 1623.17 1403.11 1669.46 1403.4 cv
1715.97 1402.45 1747.68 1426.02 1770.41 1449.59 cv
1792.86 1472.87 1806.55 1496.15 1817.09 1495.81 cv
1817.74 1488.91 1818.08 1481.89 1818.08 1474.77 cv
1818.08 1375.94 1753.4 1295.82 1673.63 1295.82 cv
.956863 .92549 .929412 rgb
f
1699.7 1298.73 mo
1683.72 1300.81 1671.67 1303.24 1671.67 1303.24 cv
1671.67 1303.24 1660.49 1300.97 1645.87 1299.12 cv
1579.37 1315.15 1529.17 1387.7 1529.17 1474.77 cv
1529.17 1481.82 1529.5 1488.76 1530.14 1495.59 cv
1530.36 1495.64 1530.58 1495.68 1530.81 1495.71 cv
1535.88 1496.31 1541.17 1491.05 1547.64 1482.78 cv
1568.39 1443.65 1601.08 1374.03 1669.93 1374.47 cv
1736.58 1373.04 1774.16 1439.7 1796.7 1479.8 cv
1804.83 1489.32 1811.28 1495.8 1816.84 1495.81 cv
1816.84 1495.81 li
1817.04 1495.81 li
1817.09 1495.81 li
1817.74 1488.91 1818.08 1481.89 1818.08 1474.77 cv
1818.08 1386.97 1767.03 1313.93 1699.7 1298.73 cv
.811765 .717647 .705882 rgb
f
1592.08 1285.05 mo
1616.95 1277.25 1673.63 1288.8 1673.63 1288.8 cv
1673.63 1288.8 1738.9 1274.22 1764.2 1285.91 cv
1824.35 1313.68 1819.68 1497.1 1817.09 1495.81 cv
1798.94 1486.78 1763.7 1358.05 1671.89 1360.03 cv
1583.33 1359.45 1550.47 1479.84 1530.24 1497.26 cv
1525.91 1500.98 1527.22 1305.37 1592.08 1285.05 cv
1 .564706 .509804 rgb
f
1687.38 1656.72 mo
1703.6 1656.72 1722.48 1644 1738.25 1627.07 cv
1752.23 1608.84 1796.81 1616.31 1804.38 1588.56 cv
1802.94 1581.64 1742.41 1541.1 1732.48 1530.28 cv
1700.08 1494.97 1702.14 1460.62 1686.05 1454.49 cv
1650.91 1441.09 1654.23 1486.96 1623.73 1531.03 cv
1600.34 1564.82 1559.35 1594.27 1550.57 1581.44 cv
1555.6 1612.06 1661.58 1656.72 1687.38 1656.72 cv
.929412 .109804 .141176 rgb
f
1673.68 1597.01 mo
1640.22 1597.23 1625.46 1565.03 1622.64 1532.58 cv
1599.09 1565.72 1559.22 1594.07 1550.57 1581.44 cv
1555.6 1612.06 1661.58 1656.72 1687.38 1656.72 cv
1703.6 1656.72 1722.48 1644 1738.25 1627.07 cv
1752.23 1608.84 1796.81 1616.31 1804.38 1588.56 cv
1802.94 1581.64 1742.41 1541.1 1732.48 1530.28 cv
1727.48 1566.11 1705.67 1597.86 1673.68 1597.01 cv
.470588 .00784314 .027451 rgb
f
1673.68 1479.73 mo
1673.68 1479.73 1646.94 1587.01 1678.76 1663.94 cv
1678.76 1663.94 1670.22 1608.57 1668.75 1589.54 cv
1666.99 1566.74 1673.68 1479.73 1673.68 1479.73 cv
cp
f
1816.66 1494.91 mo
1795.45 1505.25 1763.7 1631.25 1671.89 1629.27 cv
1582.9 1629.85 1550.69 1512.88 1530.24 1496.62 cv
1526.56 1493.7 1539.6 1621.03 1562.33 1656.72 cv
1588.08 1697.18 1600.51 1718.01 1681.01 1718.01 cv
1754.98 1718.01 1770.9 1698.96 1792.03 1665.87 cv
1823.31 1616.9 1819.69 1493.44 1816.66 1494.91 cv
1 .564706 .509804 rgb
f
1743.45 1369.89 mo
1743.45 1369.89 1763.84 1356.54 1766.67 1309.86 cv
1766.67 1309.86 1784.53 1349.08 1743.45 1369.89 cv
1 .482353 .427451 rgb
f
1711.47 1361.2 mo
1711.47 1361.2 1729.41 1344.71 1724.61 1298.19 cv
1724.61 1298.19 1748.61 1333.98 1711.47 1361.2 cv
f
1618.03 1365.54 mo
1576.95 1344.73 1594.81 1305.51 1594.81 1305.51 cv
1597.64 1352.2 1618.03 1365.54 1618.03 1365.54 cv
f
1650.01 1356.85 mo
1612.87 1329.64 1636.87 1293.85 1636.87 1293.85 cv
1632.06 1340.37 1650.01 1356.85 1650.01 1356.85 cv
f
1658.55 1710.08 mo
1658.55 1644.96 li
1668.28 1684.71 1658.55 1710.08 1658.55 1710.08 cv
f
1689.42 1707.54 mo
1695.55 1691.26 1690.69 1643.61 1690.69 1643.61 cv
1702.1 1680.33 1689.42 1707.54 1689.42 1707.54 cv
f
1726.13 1842.9 mo
1726.04 1843.72 1725.91 1844.55 1725.75 1845.37 cv
1724.66 1850.94 1721.73 1856.39 1716.87 1859.32 cv
1712.01 1862.26 1705.09 1862.05 1701.16 1857.95 cv
1700.01 1856.75 1699.12 1855.16 1699.21 1853.49 cv
1699.3 1851.83 1700.63 1850.18 1702.3 1850.17 cv
1705.53 1850.14 1705.63 1854.75 1708.85 1855.22 cv
1712.38 1855.74 1716.93 1852.32 1718.16 1849.19 cv
1719.24 1846.45 1719.2 1843.41 1719.16 1840.45 cv
1718.92 1826.17 1718.47 1812.26 1717.07 1798.11 cv
1716.67 1794.18 1716.8 1777.94 1710.24 1777.94 cv
1706.3 1777.94 1702.47 1780.59 1698.73 1785.89 cv
1684.93 1805.54 1698.76 1818.65 1687.86 1818.65 cv
1677.96 1818.65 1684.93 1798.66 1683.69 1776.38 cv
1683.45 1771.93 1683.18 1770.05 1684.91 1768.34 cv
1687.22 1766.07 1692.05 1766.21 1693.08 1771.46 cv
1693.18 1771.98 1693.29 1774.5 1693.42 1779.01 cv
1698.88 1771.73 1704.49 1768.09 1710.24 1768.09 cv
1720.42 1768.09 1722.44 1777.09 1723.06 1785.55 cv
1724.11 1799.85 1723.77 1814.17 1725.58 1828.41 cv
1726.19 1833.21 1726.68 1838.1 1726.13 1842.9 cv
cp
0 0 0 rgb
f
1639.64 1240.33 mo
1653.3 1261.99 1686.76 1264.97 1703.77 1245.64 cv
1705.92 1243.2 1702.34 1239.59 1700.18 1242.05 cv
1685.4 1258.85 1656.04 1256.83 1644.02 1237.77 cv
1642.28 1235.02 1637.89 1237.56 1639.64 1240.33 cv
cp
.254902 .0470588 .0784314 rgb
f
2128.4 1463.87 mo
2128.4 1570.67 2074.23 1657.25 2007.41 1657.25 cv
1953.47 1657.25 1907.77 1600.82 1892.16 1522.87 cv
1889.89 1511.51 1885.77 1485.97 1885.77 1485.97 cv
1885.77 1485.97 1886.43 1471.88 1886.43 1463.87 cv
1886.43 1393.61 1909.87 1332.11 1944.94 1298.24 cv
1963.17 1280.63 2053.03 1281.29 2071.64 1299.96 cv
2105.74 1334.17 2128.4 1394.79 2128.4 1463.87 cv
.337255 .0627451 .105882 rgb
f
2007.41 1280.7 mo
1940.59 1280.7 1886.43 1363.19 1886.43 1464.95 cv
1886.43 1472.2 1886.7 1479.35 1887.24 1486.39 cv
1896.15 1488.81 1905.74 1463.91 1923.5 1439.01 cv
1940.56 1415.09 1965.15 1391.17 2003.93 1391.46 cv
2042.88 1390.48 2069.43 1414.75 2088.47 1439.02 cv
2107.28 1462.99 2118.74 1486.96 2127.57 1486.6 cv
2128.12 1479.5 2128.4 1472.27 2128.4 1464.95 cv
2128.4 1363.19 2074.23 1280.7 2007.41 1280.7 cv
.956863 .92549 .929412 rgb
f
2029.25 1283.69 mo
2015.87 1285.84 2005.78 1288.34 2005.78 1288.34 cv
2005.78 1288.34 1996.41 1286 1984.17 1284.09 cv
1928.47 1300.6 1886.43 1375.29 1886.43 1464.95 cv
1886.43 1472.19 1886.7 1479.35 1887.24 1486.38 cv
1887.42 1486.43 1887.61 1486.47 1887.8 1486.5 cv
1892.04 1487.12 1896.47 1481.7 1901.9 1473.19 cv
1919.27 1432.9 1946.66 1361.22 2004.32 1361.68 cv
2060.14 1360.2 2091.62 1428.83 2110.49 1470.12 cv
2117.31 1479.92 2122.7 1486.59 2127.36 1486.6 cv
2127.37 1486.6 li
2127.53 1486.6 li
2127.57 1486.6 li
2128.12 1479.5 2128.4 1472.27 2128.4 1464.95 cv
2128.4 1374.54 2085.65 1299.35 2029.25 1283.69 cv
.811765 .717647 .705882 rgb
f
2126.84 1495 mo
2109.07 1498.38 2082.34 1593.01 2006.4 1592.79 cv
1967.37 1593.96 1942.17 1570.26 1924.56 1546.57 cv
1907.14 1523.11 1897.15 1499.65 1888.57 1500.32 cv
1889.49 1508.01 1890.69 1515.54 1892.16 1522.87 cv
1907.77 1600.82 1953.47 1657.25 2007.41 1657.25 cv
2067.6 1657.25 2117.52 1587 2126.84 1495 cv
.956863 .92549 .929412 rgb
f
2127.45 1488.15 mo
2123.39 1490.01 2062.79 1613.93 2006.97 1612.45 cv
1978.09 1612.68 1947.85 1581.27 1924.83 1549.86 cv
1901.88 1518.55 1886.11 1487.24 1886.02 1487.27 cv
1885.6 1492.8 1889.2 1498.9 1889.11 1504.57 cv
1889.95 1510.79 1890.96 1516.89 1892.16 1522.87 cv
1907.77 1600.82 1953.47 1657.25 2007.41 1657.25 cv
2069.09 1657.25 2119.98 1583.49 2127.45 1488.15 cv
.811765 .717647 .705882 rgb
f
1882.81 1484.17 mo
1881.93 1482.52 1881.51 1480.66 1881.36 1478.79 cv
1871.66 1358.56 1885.1 1290.41 1939.11 1269.61 cv
1959.94 1261.58 2007.41 1273.47 2007.41 1273.47 cv
2007.41 1273.47 2062.08 1258.46 2083.28 1270.49 cv
2133.65 1299.08 2142.76 1403.14 2133.51 1473 cv
2132.4 1481.43 2128.71 1487.84 2126.54 1486.51 cv
2111.34 1477.21 2082.86 1344.77 2005.96 1346.8 cv
1931.78 1346.21 1908.04 1467.55 1891.09 1485.49 cv
1888.15 1488.6 1884.95 1488.14 1882.81 1484.17 cv
1 .564706 .509804 rgb
f
2128.4 1485.68 mo
2110.64 1496.32 2082.86 1626.05 2005.96 1624.01 cv
1931.43 1624.61 1901.18 1500.91 1884.05 1484.17 cv
1885.42 1485.5 1887.63 1508.09 1887.86 1510.93 cv
1889.31 1529.67 1891.46 1548.38 1894.08 1566.99 cv
1899.6 1606.17 1905.69 1651.44 1931.56 1683.11 cv
1953.34 1709.77 1980.61 1715.37 2013.6 1715.37 cv
2062.23 1715.37 2096.74 1693.07 2112.91 1646.55 cv
2126.68 1606.9 2128.46 1561.92 2128.81 1520.31 cv
2128.83 1517.75 2127.58 1486.17 2128.4 1485.68 cv
f
1965.33 1696.37 mo
1932.77 1663.81 1961.94 1632.09 1961.94 1632.09 cv
1950.1 1677.34 1965.33 1696.37 1965.33 1696.37 cv
1 .482353 .427451 rgb
f
1937.42 1678.19 mo
1904.86 1645.63 1934.04 1613.91 1934.04 1613.91 cv
1922.19 1659.16 1937.42 1678.19 1937.42 1678.19 cv
f
2092.92 1669.65 mo
2092.92 1669.65 2108.14 1650.62 2096.3 1605.38 cv
2096.3 1605.38 2125.48 1637.09 2092.92 1669.65 cv
f
2075.6 1363.79 mo
2075.6 1363.79 2095.99 1350.44 2098.82 1303.76 cv
2098.82 1303.76 2116.68 1342.98 2075.6 1363.79 cv
f
2043.61 1355.1 mo
2043.61 1355.1 2061.56 1338.61 2056.76 1292.09 cv
2056.76 1292.09 2080.76 1327.88 2043.61 1355.1 cv
f
1950.17 1359.44 mo
1909.1 1338.63 1926.96 1299.41 1926.96 1299.41 cv
1929.79 1346.1 1950.17 1359.44 1950.17 1359.44 cv
f
1982.16 1350.75 mo
1945.02 1323.54 1969.02 1287.75 1969.02 1287.75 cv
1964.21 1334.27 1982.16 1350.75 1982.16 1350.75 cv
f
2054.98 1692.77 mo
2054.98 1692.77 2070.2 1673.74 2058.36 1628.49 cv
2058.36 1628.49 2087.54 1660.21 2054.98 1692.77 cv
f
1990.7 1703.98 mo
1990.7 1638.86 li
2000.42 1678.61 1990.7 1703.98 1990.7 1703.98 cv
f
2021.57 1701.44 mo
2027.7 1685.16 2022.84 1637.51 2022.84 1637.51 cv
2034.25 1674.23 2021.57 1701.44 2021.57 1701.44 cv
f
1972.2 1807.89 mo
1976.75 1812.72 1981.93 1814.18 1987.95 1812.77 cv
1984.1 1809.42 1982.17 1806.77 1982.17 1804.83 cv
1982.17 1803 1983.78 1801.78 1985.32 1801.78 cv
1988 1801.78 1987.84 1804.64 1994.57 1810.13 cv
2000.27 1806.82 2003.11 1802.65 2003.11 1797.61 cv
2003.11 1791.68 2001.9 1786.87 1999.49 1783.17 cv
1987.52 1764.79 1953.83 1788.66 1972.2 1807.89 cv
cp
2000.89 1824 mo
1993.73 1817.44 li
1990.36 1818.8 1987.01 1819.48 1983.7 1819.48 cv
1971.42 1819.48 1960.99 1808.04 1960.99 1796.02 cv
1960.99 1772.32 1992.58 1761.91 2004.37 1779.01 cv
2007.65 1783.8 2009.28 1790 2009.28 1797.61 cv
2009.28 1804.22 2006.05 1809.79 1999.58 1814.3 cv
2006.11 1820.32 li
2007.33 1821.85 2013.48 1824.67 2010.2 1828.15 cv
2009.59 1828.8 2005.6 1828.18 2000.89 1824 cv
cp
0 0 0 rgb
f
2019.17 1825.5 mo
2017.56 1823.84 2018.74 1821.96 2020.25 1818.49 cv
2022.46 1813.41 2023.11 1811.75 2024.8 1811.75 cv
2026.29 1811.75 2027.41 1813.09 2027.41 1814.45 cv
2027.41 1814.93 2025.99 1818.34 2023.15 1824.69 cv
2022.28 1826.74 2020.29 1826.67 2019.17 1825.5 cv
cp
f
2086.78 1815.89 mo
2084.69 1810.38 2081.12 1788.67 2080.64 1784.13 cv
2076.14 1800.84 2072.31 1804.83 2070.34 1813.31 cv
2071 1814.58 2070.77 1815.95 2069.5 1816.88 cv
2067.5 1818.37 2063 1818.1 2063 1814.06 cv
2057.25 1788.73 2059.23 1797.47 2058.8 1795.58 cv
2055.43 1782.71 2051.94 1774.78 2051.94 1773.08 cv
2051.94 1769.75 2056.47 1769.14 2058.08 1772.42 cv
2061.66 1779.56 2066.12 1802.63 2066.71 1804.92 cv
2073.62 1788.9 2075.98 1771.19 2081.3 1771.19 cv
2086.28 1771.19 2084.76 1779.54 2088.49 1797.4 cv
2091.07 1809.18 li
2104.82 1776.13 2102.63 1770.32 2107.54 1770.32 cv
2109.56 1770.32 2110.57 1771.32 2110.57 1773.32 cv
2110.57 1773.66 2110.25 1774.66 2109.61 1776.31 cv
2108.41 1779.55 li
2106.76 1784.88 li
2093.27 1818.19 2093.72 1816.7 2093.64 1816.88 cv
2092.29 1819.39 2086.78 1819.38 2086.78 1815.89 cv
cp
f
1963.01 1223.01 mo
1991.07 1244.64 2032.22 1243.15 2059 1220.17 cv
2061.48 1218.04 2057.88 1214.46 2055.41 1216.58 cv
2030.22 1238.2 1991.74 1238.8 1965.57 1218.63 cv
1962.99 1216.63 1960.46 1221.04 1963.01 1223.01 cv
cp
.254902 .0470588 .0784314 rgb
f
2034.01 1745.59 mo
2009.64 1735.3 1979.85 1740.7 1980.42 1748.94 cv
1980.72 1753.34 1987.87 1754.32 1988.28 1748.92 cv
1988.33 1748.21 1988.13 1747.67 1987.78 1747.27 cv
1995.44 1746.31 2009.98 1740.9 2031.45 1749.97 cv
2034.42 1751.23 2037.01 1746.86 2034.01 1745.59 cv
cp
f
2080.28 902.155 mo
2090.55 932.164 1954.04 985.204 1872.35 985.799 cv
1786.04 986.428 1639.68 953.445 1629.48 903.225 cv
1616.49 839.308 1736.09 834.236 1847.12 831.391 cv
1958.15 834.236 2056.68 841.353 2080.28 902.155 cv
.168627 .0313726 .054902 rgb
f
1754.08 973.808 mo
1743.29 973.808 1736.78 973.592 1736.68 973.174 cv
1736.21 971.235 1735.76 969.247 1735.35 967.226 cv
1744.37 969.622 1753.63 971.806 1762.98 973.767 cv
1759.77 973.795 1756.79 973.808 1754.08 973.808 cv
.760784 .603922 .627451 rgb
f
1762.98 973.767 mo
1753.63 971.806 1744.37 969.622 1735.35 967.226 cv
1732.42 952.965 1731.16 937.014 1738.32 924.631 cv
1744.35 914.204 1753.59 906.324 1763.21 900.22 cv
1789.34 883.64 1821.01 877.857 1850.82 877.857 cv
1888.22 877.857 1980.46 893.999 1967.04 956.151 cv
1964.5 967.905 1822.89 973.253 1762.98 973.767 cv
.380392 .160784 .196078 rgb
f
1771.79 942.966 mo
1774.02 906.463 1808.74 877.857 1850.82 877.857 cv
1892.9 877.857 1927.62 906.463 1929.84 942.966 cv
1771.79 942.966 li
cp
.168627 .0313726 .054902 rgb
f
2008.09 939.829 mo
1995.02 933.25 1965.33 925.265 1951.03 920.056 cv
1908.79 904.66 1891.75 905.11 1848.57 911.716 cv
1846.39 912.05 1805.57 900.215 1750.9 916.058 cv
1737.18 920.034 1693.13 931.271 1695.41 944.986 cv
1700.15 973.601 1856.29 985.799 1856.29 985.799 cv
1856.29 985.799 2017.94 956.081 2008.09 939.829 cv
cp
.929412 .109804 .141176 rgb
f
2059.5 926.244 mo
2025.68 932.475 1900.68 936.586 1848.68 936.238 cv
1802.24 936.549 1684.56 932.042 1639.68 920.15 cv
1670 958.498 1788.19 982.023 1845.39 981.389 cv
1904.14 982.04 2020.19 953.445 2059.5 926.244 cv
cp
.956863 .92549 .929412 rgb
f
2080.78 867.765 mo
2058.37 816.076 1960.65 832.745 1855.26 830.326 cv
1749.86 832.745 1652.14 816.076 1629.74 867.765 cv
1626.03 877.468 1625.94 889.698 1629.48 903.225 cv
1672.3 898.278 1716.35 891.753 1768.33 887.948 cv
1768.33 887.948 1769.88 893.345 1796.93 890.782 cv
1823.99 888.219 1845.69 891.039 1847.77 889.368 cv
1848.91 888.451 1849.79 886.443 1850.35 884.822 cv
1850.56 884.821 li
1851.3 886.284 1852.31 887.916 1853.43 888.657 cv
1855.7 890.159 1877.33 888.726 1904.57 889.194 cv
1917.5 889.417 1924.41 887.609 1928.1 885.649 cv
1986.14 887.697 2036.25 893.119 2082.3 897.664 cv
2084.48 886.348 2083.97 876.12 2080.78 867.765 cv
cp
f
2080.78 867.765 mo
2058.37 816.076 1960.65 832.745 1855.26 830.326 cv
1749.86 832.745 1652.14 816.076 1629.74 867.765 cv
1627.41 873.851 1626.51 880.932 1627.03 888.702 cv
1658.78 868.99 1705.18 862.058 1758.09 858.919 cv
1768.33 887.948 li
1765.79 858.492 li
1791.37 857.157 1818.34 856.59 1845.83 855.81 cv
1850.86 884.821 li
1853.25 855.593 li
1853.63 855.583 1854.01 855.571 1854.39 855.559 cv
1880.42 856.347 1906.02 856.855 1930.48 857.906 cv
1927.44 884.765 li
1936.85 858.194 li
1996.66 861.034 2049.12 867.614 2083.36 890.271 cv
2084.12 881.884 2083.26 874.258 2080.78 867.765 cv
cp
.811765 .717647 .705882 rgb
f
1855.68 851.99 mo
1961.03 854.407 2058.27 852.729 2080.74 904.326 cv
2084.58 890.362 2084.58 877.732 2080.78 867.765 cv
2058.37 816.076 1958.23 808.678 1852.83 806.259 cv
1747.44 808.678 1652.14 816.076 1629.74 867.765 cv
1625.93 877.732 1625.93 890.362 1629.77 904.326 cv
1652.24 852.73 1750.34 854.407 1855.68 851.99 cv
cp
1 .564706 .509804 rgb
f
1854.83 952.321 mo
1749.48 949.904 1651.59 950.194 1629.12 898.598 cv
1629.12 917.187 1635.87 930.198 1641.46 939.284 cv
1676.24 995.805 1745.29 1002.62 1850.69 1005.04 cv
1956.09 1002.62 2017.39 998.022 2062.03 949.018 cv
2069.21 941.131 2081.96 917.549 2081.36 899.984 cv
2058.89 951.58 1960.18 949.904 1854.83 952.321 cv
cp
f
1816.42 1051.71 mo
1816.94 1055.41 1816.57 1060.7 1816.18 1066.27 cv
1835.65 1064.4 1839.52 1062.93 1839.52 1067.49 cv
1839.52 1071.82 1834.75 1070.21 1829.63 1071.18 cv
1815.79 1072.44 li
1814.57 1093.81 1814.63 1088.05 1835.9 1088.05 cv
1840.09 1088.05 1840.07 1093.48 1836.53 1094.19 cv
1834.65 1094.57 1830.58 1094.76 1824.33 1094.76 cv
1810.69 1094.76 1808.6 1092.96 1809.86 1070.91 cv
1809.38 1069.9 1809.39 1068.62 1810.1 1067.62 cv
1811.42 1048.63 1810.1 1053.81 1810.1 1048.32 cv
1810.1 1044.28 1813.66 1044.09 1815.25 1045.63 cv
1829.88 1041.73 1845.96 1044.43 1840.9 1050.45 cv
1837.95 1053.92 1834.52 1046.71 1816.42 1051.71 cv
cp
0 0 0 rgb
f
1869.63 1077.23 mo
1874.99 1074.57 1882.92 1071.34 1886.55 1068.27 cv
1883.49 1065.42 1872.86 1061.88 1869.63 1077.23 cv
cp
1869.18 1089.78 mo
1862.39 1084.24 1863.96 1072.39 1868.37 1066.24 cv
1877.67 1053.2 1900.55 1064.81 1887.93 1073.97 cv
1885.79 1075.51 1880.13 1077.95 1870.14 1082.74 cv
1875.37 1090.51 1887.46 1087.66 1889.55 1084.38 cv
1892.52 1079.7 1899.11 1086.65 1889.07 1091.13 cv
1886.01 1092.49 1873.45 1093.23 1869.18 1089.78 cv
cp
f
2074.87 794.115 mo
2086.54 798.564 2090.36 812.086 2093.93 822.833 cv
2106.22 859.891 2113.9 899.029 2116.16 941.333 cv
2116.33 944.582 2121.41 944.603 2121.24 941.333 cv
2119.6 910.725 2115.07 880.333 2107.41 850.644 cv
2097.01 810.37 2090.73 794.757 2076.22 789.222 cv
2073.17 788.057 2071.85 792.961 2074.87 794.115 cv
cp
.254902 .0470588 .0784314 rgb
f
1625.17 805.562 mo
1613.51 810.012 1609.68 823.533 1606.12 834.281 cv
1593.82 871.338 1586.15 910.476 1583.88 952.78 cv
1583.71 956.029 1578.64 956.049 1578.81 952.78 cv
1580.45 922.172 1584.97 891.78 1592.64 862.092 cv
1603.04 821.818 1609.31 806.205 1623.83 800.669 cv
1626.88 799.505 1628.2 804.408 1625.17 805.562 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.0
%%For: (\702\750\762\740\753\750\751 \702\750\752\762\756\760\756\742\750\767) ()
%%Title: (Mouth sync flat icon set.eps)
%%CreationDate: 6/30/2020 9:57 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6foknsdkKqE2r_@QQ=f%KXeFEl)B.gfT`k]uZ\XpcbWKt98,2h0:E9';35W/oq8D6JhqrVeoA5V1,QX'i7+'i:!'SQEoDhK`
%<G#h(<gcql6^h9(qS[3;-NAm:*.abej7!0QIZ5`AGAI-Ud#WYo$q6nIe+/#QB.t0_/>7\kT?eO2Y@Pc3@Z&L!#"A6)Ra.!.P+n_?
%bYN&PWF80`"Ol/dP6q&s-9]1kA+36n'^4V7$(`ND.E6$`?Dj:ke`6%m(W<,!\X7P[.]Nf0^$P4%%bp8+%@RAN_p@]<Th];/IVRgM
%",71EL!:I'KsYeMi)fVZo4&FU&i;sa$pi11/^'G/E^%I@0s->5a2<P=n`bFQ0fVgqT\o,FJCajOV['pYq7_4[@*4(JrI0_N*/O*d
%]6uu)_s7i<?[:9]1%F-,r:d.eLgtk'ib=^QQko3>+G%T%GItE#r1iC`JlC8WJcU+87#Q"PX-%gX!o@$<Oe6#4Xk8+dlb>PM)l&-I
%"5&-o/0Ld`Rdd<n0JQSo-P#=k_fo"Nj0LXh_[b60!I4EmI[4@[\'lE%@uNf4&J*qX[\j,hbS+0&mTKSO]7B:bes?9=CtSfp>c3B$
%0oL@oS2eA,0@'V%MWh8,hm<0GmD.rq\0IYRB>Enk"Q>.<i4kpDi/`EgLYtN@$U>A[_.QEJ!$c)j!k*,2CFqN+goR+kVf76$pb`Kt
%C'Jp"64WghlS%T\d)9D=,KB`0\Ko!!`!eR%j'S/.ZZ)fs=b)82MHn@uZN9m^?fk=[m,FHQ]Z6*JR.@tghL,K5//n,Dcg-#M"l2s<
%5PQnqiVj4p\_dHSn2kk9nA=?,mX[U@5Oba]oY^+un9]\<$&(Y!X8\V+0t1s:*2"1'CUg;#?1ofDrrE$?jo$_o!:,-j^m!+3ji.DC
%'lpLu(@XRWr&bVMs$7b%%/pY12-a@rfl-Y=SAY>m+#V]PYIVWN3QbGB'5WD#)YUupLS=l("$23br8\,1.hpENP6&G6Qe9D_c'Ak3
%>U=h$UVQqc+:T8@OZAdbp*CJdKu-jj_'>bY0P1Fj3'QZWT-o^J`4a5)#6$ikKO<,WlO%36Xe4&p3?dT84"_%.(*W(u+o'[e*q]#]
%a1WBIf+e#$/es@RSTqZ<Z0qhR"-7'-jOdMH*!A[Xci4c"K>FVnL.GYUVe5T>7qcX'O#1^:S:$p\?JeofYghSKE(L5!.j5-%ghX3L
%fU2`nJfE'$"+q?XQ]Bq?9AYbsk<L[Z5dnMXkkWV=YfVP8;V6@boY)(AY<^qsAZeh%62g`6QSQ[hPfKfF.?#'7@.i0;,/r!:jD]\2
%@_[[XN1i`"0O>)+s&*1n,iNlqBITIa*#5+pg?A*3%?qYlRTuHbp5=MP</#&bN\S50VFkqZN$@aCM?bp0J=$A\>gljf%*k8P*\ggq
%9BFH_K[Uuk!=/1#)"OfULCNDM%BkO!kQ(3PBKeHs>7F5dRsWf!.0+RMJUW8foiVq3hsP709AgqsT<gorgA;`[F3C>G`r*l!1'8%-
%J>O%.>qe5l$L@aH78]EdVDeQ/*JMgA#d;6JRPF,`n.5+()K+K,g#I5p//hRt1ccS5JUYK`$QeSWU<ec4^h25`K)u/5iTpf/bQoSN
%,6e1<-/cMa+^#%<&0'8^gONilegj0S:^"Hb/5rB?C,-l>*RAp$Lctl@&85FlT^\T%1^\6tj02DUM1EIh'e\7\H"\sq=]!oXE/&]6
%G"Q^lD'd3%nbl.\diI)$8f+8m4GCO'!9P[C/:l[pEo-2NbnecSO26:_;1tYTG[EGTa;.,ClY&@p1^aNjSg_+*T_F-[>[H.sUMtN6
%6.++R5X]%U1hMg&R()Be]Y.$Q#f`r@q#d3&@]$Nd6jabtm>JSa?um8*j;b'Oi0#5@Z3K,$67m4Dp$`%GpS(=ndL>Mk]k#4KS>9:`
%%UlpGU/A/gn+HdlZM6Zu41TA:LWml*4%r`$IraXGY1t2A_uYPm>CLTa'(kp<jq%S?8*\8@aGlB:GOjij^>-hs48EnE?g\m1ErPOg
%b98$M1qjt!Emj`$pnTdaqW.,&@b]&ar<D*g)A:r^ha&rhBr7NAIj<U9Ca:f8#ejZbaT`Qq<c.7.S*jg\UoBC,C+`m%RO57A=rFri
%[[RjE:EN#QoFK]/m\@knrZ25'g@@5u<DF#.1sW&$L*L$jFV_H]>icW44i2$L*a>];qafCY&S]L^'9q,l&%=3`6V-gA(XrHNiN4/U
%L6)]=,SE:p"t]eQ09k&4-fr0nHohIc"%Y'l(mQ7W1kX%LYhFJ9Dtplj&^:2.-YN3L#d.Mp;MP?6?/V@B2#7l:."C[4G75U&ETeIJ
%#Al61ed)1S2F`<EAkWpk-tN@#_eAR5[E@557qqV^kWb\_"qK3>ph/>@a0Ws/BG(;2/W>sR3T4L6TRF'\$4]Z/&.oEOK/T+;.,oH`
%8*Pq`K+A+jh[t[D,LD/^751JccCjMQ+-fn)L&9tYMEN]\8J<K5paP2ERVpq-dX*N**As?*ifK<nC$hQH[-p!s^N:0f/>',OUHGG*
%+!kasS`TI(WS#:Rj<RIYpn%i(@#(Aq'L:Tm6]^4N/Yqj+a5h4aP]]o,T3.a;[3abFB!b@L""_3`Dt[I7Z4Lt7RQXf<q:Iupn($\L
%WVHf@n;/:U%aYYFM6V[LA)BRsrLsq+6cJ.4]`'6>oGcl/+r.s8qXR,.D`OE^rPeFbqcr&LS-Ad!$fd@/ld47p)oZ8Kdcu:7jQ'6^
%5EFPb<;1T6]U,Bj4:'"JMrHbf!t(956\MKD[6.mDFU9HiFnc7gha2I/&_QAnU_Nqd#JV4A6J0<!N3LtDT="(oHP6n3Y/\I3qnfOn
%Yh-6DI[dP-=kdHnH9T/k34ssEL<YcWj\.DU*5Wcb;0Y->c155d`^c*Rj*$+/O!ke.'(DP?ikaq/KUCK`kbp-uk&I"KNk;ht9h684
%HpamN4N<"<OEg-M=$8n2j*4Tf!]",rl47a>%1r--#/k&(Q3oP'hh320NWDRD;=Iu0p4W_Q?SWmaD+F$AZ;\'IK[F.SLa;M8\:('&
%TPam'XZF4-1"_AR"Fa]KcH$lT(r1I2`H7f:4<_R8!5,e;KYW=jPZ+/5W-t@*iN1po0L>Y$!O$''R@Y/W^9GI$^LKJ?-3tFq$q;D/
%'HH2J:mqqO*()-Gl!]bs]NuNXV`![E4UZ'q9Tdo>rE#!:)][)a#bNkL%`4@mIA]aQ'P*4MHu[:s3McF$&n`6]>6!0?#,3+'Fim/3
%EBAt]PhpW,76s6%=B*V/kFs)dQ:I*rK#CWDT8W7lP\9GHjeACjF36p3jeDYng?+WXEaZW,Q3<H@R>ZYB&J&2<IA^<a'P*6CU-@\5
%Cfo6nOc+h0@gBd6^Jc`l$8TZ-lG%A+jqr/SOQLS=e[<`64RU,YO>=ID1N@et;]O+Or6eI/Es1Ccr5)F4P@`'nl$RK(kSWt/9#U1?
%da-b\/GjUW0CO/.bXnu),1hDo\V<A$P?^2k[?FiW$FuIt^b7'Vm<b7:31SK^<'*[ZJ$r<<)/J-P=?B*^P>qEL9/Y[g:hL=9gP862
%";6**?hpWY!)LdOpLP%"/L(B2S<hQ:)2WSbi78#B')4G^Rn,Pe!n_p(A,hoXSf5NhpnTX\IWkE]o6=r]9]8oJZ./g;%WBa>@U?O`
%'**O<)Xq)BHj9V3JHqW^P]?S[%S#+u,Yt>4aC05lVkSE4R.,2Kb+>j6L<$%8F*KC]G*G1:/BV:\,%c7N5g5IrMAFIe*64EtdZP6Y
%maVEmji!KQ1QDA<f5QdZfC*`]@2J1&nY8\87mlI3R)XUq>8.<L;6IF%O*)6FEQ&p/*:&a93Cs<?TY=6c;kK:eq\01$-$Dd-"V?96
%A#3:jE&&Q_hI6Zp3%4/CM/_tQdH<p5!C[!LpF(MgE)90I'&hb1)@Q,oFWs9eb\2ki-n>4pFQ772jf!:^004LN>:@U'gkaU&DN?+^
%kZ$ejgAa>'ruU>%miDr[4>^CD<r9Yu_Lt"d??ZftOe28os*dpBHbMU_V`iqdT'pC>GE5g6SG%>[J['^Yo0)L:*l=5hC!Uu6MuOa_
%q'$gR75(S?0HaPtB;(7!pL_)^fP\W8Yb:Lp3<P.gL9bt\hUiWf5OljKr-^Ya'4Nq1!.^gL%i.UL;#8$0:ELt*:q9I,IGhF"cnuHN
%%).j%6H84'+^7Am%R3;"8]fVH_XUb;X?AZM]FeUD`dT/R$-pI;]H8@ICo4^HE!i0'20=SK]h\+(6]I_/Y*(recVF#:;uH":`m95B
%>Aj3=Hp`ja$"3KS[)3//@=Jp="f$1mTLd?[+nltRaV(\m?A/U&??9&NS>/sC/XrMGHd?nq)$,6F)i%D,8aq;&j#pf';ST;R?r*9:
%#]#=<I#!76jt$?##1*t+r@nO0d7stM?TA9rp)eP<_^o'NKoa*TnX!24jV2r""^XrTQW)i('R2VA?;?'<;rHbU#e]NMK_R`V4pM`d
%C@Me[;+H_^>=n4k4(_s"+Nl3EZqnecgkSUs*"['MCuR-f3:t*8:iJDd_^<_Dd10M6IbTK%Ic49JHa;1i#"C#\gJ>u^J-FXu3?Ep;
%Ep1[94.O6rUK;J6OGC#9N^bt!:13p)-SXpAYG]j9:8]c4MbX4+k7k<n=J,NiF@j`lbR!AgSZ;8TDAW5^Wr.:FOJ=IA8%9tQO)S#H
%$a_S<6GYrZ%u>3"j3X.5_67m"0VECiXp,7%,DrX6>OutQa+'fon<)E&T$G-Fc-1CF/GnM%I6.taj*)HNF6N'\+";,dLYJ00oCu.D
%)<#7C:b0>pWUG>(p\`!#r9a_-LF7VfJgg?]*mJ%K,Z#JCT19j@#bL#m8)W?riYVo7!/J<T*!6A";]Oh*4l'UPo;=Rf.?8C]1NSF`
%SDkAU'$'e1prX#"P]?BPpR)7#emkr+,tXcjRre%8V8oV3]qEmPibY4bAB[(HN_8PF1nLW7pB<bHU%eX$pjM+UEm2dE0s(Ptr!ho;
%%jCGVOID:`L1#="iE]<n"2_I&#nh,"ke/PsKUCcHS?dg"b]am#hs-jX,[!.#a=.HC/D0qU6+Do.+]22m\]8XqJm(4+)^L3l!Lt*N
%3]9NSH;;KbI6C3#@tVMkYsH,SnC(]?h8KMqQt$U5Sk_LI^h*Q-CIi?[Ob@In/+P_)8l9%7h^RLl$(4`/Qb_E?L`lCp"a6-1[Z;m%
%$\\lt4QQqSL$tT%`G@?RNbpkom<!j8:cq'fc7'CPj)turGdtE#?e3NEQeTm)-XZ:[?Ss3Lmc;W`]K%E!-ZAGApZ<"qcBC22(ascM
%DseRALUir]7k5RY4,8@>adkN(F!l2"jN^?D34X)XGOG@<F+Nf@c64?PEp!qWS\$2irfFunK^ZbSEXpDSnE/)ZptkuiJqJ$\a"_t6
%b8>]aJIDdBcEUUVGP(&jSBf/;SL\]5k=Y(Q\aLcU^?0s)r</lC^ng+1,EI!q=Do2.E'KJ+X@Fs/UI_(aRe\s0M,Nqaqr0]U9@o5:
%*?jE`/B]FP)=JtTdDsOh3<_DRFhsTLK0;gaRQY[Io=\\hESm+<O?5`]VubJe><ND>&eKW_Mq&A62<"!5c&aaTSoPP68,C6>Ykrj%
%<%L&g00FHW8OjqUdMEC<p,H30b*4+6P6:\21m%1\4W;"eIY7,K5NjAKE7PRa!T+I+h#c6BM%Un^MSoE=V@03ebn]<Rn6ncX*mWjB
%<T[5G@!-/uD*unR.gNouJL[i):Y+;%=``KVhYALa_+p=++,tDn@#Q]MhnbZ3Ht@6k+Xm<NBQJ[IaVhf+K'QK57a]=+qLqDdaX6lT
%J[G20I+1X5.7*dFA+r'Q%4<Ca'^YgQQJ>RK7Q;7sBOC+[@#U&0p@Uj6p^\;K'JV`,UD-2660Xa[&IuPRiIE!D4FF8e;$8\Di^hZ8
%*0k^FDTTI'Jn\VGU'l6ENX%,^:<N)\N0H\2N[Qk,\oQTR.lf'"_cJ66h0Ak/nJELlVoo8Te`cfdZK$2lj-Pec-op9+T&K:SDVtH=
%#L&e-H98P[M7+J^F2TukOWR7R`B\JM#A+s0%/4Gjr4d9E<kiIkQMlWF]U")gYd+aFBbeG<ZqAKs&PEG=S>W6medbnXI.'Ed^5LP9
%lRUug\V?.DN!orC9n)SeA2q<@.2flQb-Vt,l@2_qlonMN&K`duOm+lX]om<#@^h!gH13!YDC%Q.COaOVJ<)dK^k6[<pedL/]5cY(
%/L#j__IHe=7rM4R2h?B9^o9F^m4nT[BJ[k??'O#*MWgj;K<T@3,(,"]IM>*:=dnCfZX35O`Q37411s/<epM["/"G7.he_HNrk^5"
%fAmLo`IT>OD$lc["-f8h%ZojtcHAF@4V$694:40=j1>1md\kHIh!D6oDlLk>jPbKN?V`,:^F$qj(QDhC999R]P/lD#c2+KaOP&Fl
%n>FPX3GX.GfX#fBr9n?I8Bc`_If/MPc9;VWcPhuNpfhC7a8lB8ouShh8Q-"CUo@cYCku#Y3n4IFh"FR^4j@Au#r1KT3Y0pkab^E'
%?1^TAO'NN\P91?$69LcFJ==@M+9kF_[.(%^?GFM?G-h4bJ%]+$d+8dm_ECOh9FDmI:4qY1R?>81fPb_'RNDPl?pL_T"4"F[>f&,H
%(,;@Un.h$h;hojg=\eJD3t2,:"Flr8JD1HNEX"mn@+`MKE-o7u-"k0`$2XJLmS`P.AW#!n:\_%#5.uO)IKtPQe2364DGC-9Gh@[b
%!VFbE6XeH[+ht0umuh/LfDkNqIqeo\^\md)rUjNIrJuI.YCHMk?iTrRs829brHL#*-ONPM@%+OMG6=>m%"iV71qMo22Es+9q_U[F
%&UZhiLrA,AOHST.5Q93sa\g0-b9$]&5=VIb`bpN@^%(AV\(g?^"<h$gis.(9HjKP\55:&jm>gtp8)B'Z"5ECV,@NNanb>8=:loIr
%)>EtoRR5dKeth??i(&OON4V@XDXbB0J%^tNPCH$^h:>^D:f3K6714$t!P%kg\E8?AB-4R2::oQi2YB9@V7kqkV&jl?Z=Il."g28L
%@fWnF*S9ie\;K3GOmN4!&/[;\O-Rrm!5('$riTkIW#$b.DWn%Q@tp#s328RM@2'a:C5`1$pg@lV@l50.r:T8F2'Zbg9i_6Q+a[^H
%la]p[8=#qBK0ZY6bi#%DgJ`h-/Dup3c<R[-+<W-:s%90`4Af'P?:+sW'EjBW+fu0;RGL"Mln0!H^S-Ph#^[Bs&+T!<BSN#uJGB#<
%//k?>BRN2f$J$@]Vu@_&VR8S9mI)+BpKG`3i:d?3mj!qToRuFV+#33V"5htc`3G.+b".jYZ\)@ej1Klk4HW/;phZ).<rC>4F_6CQ
%\Cl0-(ch`7m?>":o:-c8TqLHQ"FSL&0HAc'f[dV6Fr3FS">M$DdNkfH:R>UBO\s(&9V!A^gS<Kh?oD@Q(jgiLP[#?']nuY@$jrZj
%%UpDVSAG';de\R36p<aNI@h%:+Rts%Rf-qHK@1DQn$gF7NM(.Y_^:V>_T+1c>aUUYCsp8bM[@)@fTj/[fj)r`Mg0t#k:$bY;IE6!
%L<Hgs`c;SZ+s'J""9,Ol2b7DtYd?/E(DE;OXefS^=b<5@Yb*e3)DC@KfDkZuJ,T&4s8MJ:rPr:FcX6_Jf73_qs3Q9<rpRW$#Pe'Y
%s80S2qg[)1g7[aLd/udA&m!rKHC!bP;U+<!@D?"kQ%JAtReW[Q2S#N$@r9"u:Oj5XfIKo.IXf`/o6EI^YC!'cW^Na5VFtAtT8rtY
%b-C"?L*cPVnks6"JkJ5h=MMTt/(`/_UW:g.krHjViNNWn'Od]3YjKaC-i][.s/AL`W&:cU8t+7]+Z2uQAoNY&':6.r.KM"N)-Shf
%OhEK[?o16.>g1`,$(@Al%'BWf!#lR(KT9a.fGpeG1bi90eqrU+nGtp0Sq<F(AJ/ci!Wa.*mP;g2GfBk'(XWKTXmcU@rSFbfCDniC
%h#\I;8Du(mZ5&a1`MA*9=Tcg>*oRsE_@">f'mMkG:XBpOX[&6#h[DF?%AR-CEd:&Ofq<:&VgcN@D>Xo6PNrkjeg2XGo2Dsc=l<:J
%)7Y-R\Yb8/L'qgRCDu8]`@5Te.JHFUn,S*e!(3t21E+)e=p[6GB+:b/.un3:7ao9V[k/F7aTu7P0:4b-g+BLQK3llEPr*FeSl>sV
%AHB#7#E%)aE;EZ'9-N8jXAkb&%%%:nGsfE06Gk@!F#?`t6.9UUnHZoSV=Cjq_?%7`!.jWN<g19Im\Sk-)f#kQ0[pVA^E;Dd#$VD^
%jl"%6'YGUYhZ8p[a7]2XfIF_T\]J>E4>e'Q[R7AN<XPulSZM'(Ra")W')&9.8Qrcq<?ToBmSt;nOTZXscAFs/b,5N9_']oTH<)9n
%"O$kPF2LP2k@_Mp;C$XdODPkN*j"spVR;f;_2>*Im#Ij<rYnVW.01q)6l7QZTT$Ba?r5EfWq^N-6q5_:21q10!%M\Lb]"$9:ulk<
%a_sQ\`27qjT+j!a80Q>C:6i,l84tJK<_9LuTO\[$$R+4X!!^&ARR*O<e*Ri]^Q)6hr*hEab.el\82*a,<!LU?!)7:L&/meKN(0TJ
%!sJ@qYkE6D^jb3:Qlu:,25%T++g^>1@$F@=2!\\/bZ<i6f_$V,9[;<rD-2B[/pPtW`?tJZBY]@E"og$hB0uOZ9?fmXH&^Z+KCB&%
%<=OuG^d*J5"I?J]ngG*\2^.<Ke\[^C+$e?d!=I7]A<Ce\`pk""-9,QDL#]`p7pm3R;N[lm<lNu5G&?)D1P-YK^(Q<)<]5^W#dS_=
%,iG)HRdg3)GkZK84#?u7MJ-lp+e\#9EfPemO"$iUUh4!JlnCDRr"qRtNC_-a1o2^IV&<91cl[L.i.%#(IJf-g6.+GA."/"IpW2#c
%on4Li`+`Od\hVCe?jLb<GmF(Be%B;%c$<@@U[22o9eNfFA\lt*>'3+=1qoFW`ki("Z;(9CrP@iDH@9[\0H:.'_(AV0CXX??q#!E9
%7g;9d@"c5qKF1+p>WX,XJbK0JYOD&Q1)3Ej;Vp.Bpoer\C'GS*J\sI:Odn:!hm@d3hZ;,O,h9s4172c\QR!f)^/Xo.+Ej)(E[eU?
%l=1:l'8rj*6@ZG">R.G:poRcU"b?`/:+k%d.B#8YSu>J2YUsI[5gSp$]dXTX)mFHk_mVrKLKb(d]iN(FJ3Xc8(sX^Qh/KqQ/^cd'
%$#EnIcaFM1UWGAs4&?;OD^-(M-6g,_i9^X\_^SE@"%"7NhkH?I*ao=`7]q^R%5D?-3hJ$c`6)k!]@NZdf,NCcc=&abE.athgOOo^
%A!;a;e4@F>0er+u7)rNi-t"],1et>j\E]_ME\^du*+_g0JV@C6=hZ-5ioG_!OO.RE>FH!lNPJ6E7VJu/LL!)qY)4h>8IgQ5<6<;C
%5^*NHMJ^?cUsLpF9%ms_2kcbj[@+-"!`UqB2[2bFeF8!].t6lkM3pDN6F,NKh[(8nTW0_dE'tI^!#G3_V#FU(T4Pk$Hsfq=$uC)L
%FH01JQH:[![iuYn[D-Hn/)Y>M0Vs-f8aiPa.s!thfnOJm"_*#H-4FcA?jW]HK$=nK_#p\\0HX'1:4*6d,,p!r!Cjsp<)j]G_70mp
%_9u/2"[(*Bb^'j]]`C-0=P,f$JC7]4n#\S!0(^I!!VIj]^'t8R?33ZaD/b^^:O6fkcs,pI'Wj9ECGa,K^c;Gh1-.6:`+p;G,mX\Y
%'u?db25VZE6%E:&"9DUa'"N-AQncncA;gBGJEG@3giV&BE:fm:>*D.\fqJMYl\L\YQiK[DJ9j\%dV7kQ+(Bg21Bf1?0>QMs(*8'X
%5l&X4Zo7Hip98\4:S&G;-U#=sI`L!;"efl>`[bY/Hu"&L[O2(`aiXNHk"]o,KH6X((e%#Kl^iV.k\pW'!K^BEJrl;Rgo^[g=Psrk
%T^^HXKcrBKC^;OVP4P96`*jg&[HV<Iq?o-t?Lm(k)[)OG1kN_T_$5g#:Q8L:+PrYk0oZ%O=BH!CN8)0.'r7^iVa<Jf9K*>n9duD8
%H6U1u_s?qC:^=WkVhA*CS082hJ3AUi!so;:=9]Ofe":Au\,_\&7U,8!cHqe[#hp$oQf!BIY!qicZ;K-LK#Y--Nt(Z_*DSo"R4Q%&
%;h;9@]QbfRUFVe$5l1Pi`EKSu1<I!5_0J!@\#[<iqiG)11\=Pgqcd:d\9&0/.sU7,G&E%"I)!kh""q=C"9Li^r=k,;Jr-f%jLGL\
%&Q<'ZD7<8@O90boH%[09cl,^u-O23^70S#O!7,2!JOTJ`-'0n3G5?0;Oi$K<Q0+l]RrSL\YmCbA,X<HLM;_-AM2M8ne.Q$M0aiU]
%Jb<o,KD5P@1iR2[pS;:dhPp7N"0'Jj;h;g^d#lgcZTc,-0,7RjF(P/J'uk8l'_`B48$MNL\1]IHZZBd7CFHkJM)NA'[^a6h*,`cm
%k&VN;KZ9"l^YY@]aK4XLBbQJ6T64B)_YdN)9GX_55uO/T&tj2GNGKYRYL!%^eQ66_80S>O8eb3Bf+2;VU0iUuQU>Fb(nfb%89P""
%[UXXN81=stKpD'?X2/h4&ZXfp-#=WtR9R<3'+L72XZZaN>(]\^#3]h30:4V)Fi.Z\>4_UsT4r!*2`Osm9ESqV_HA&[S?a,cdI8;\
%<Y"t/j[(sbf/259pe,\sM&Q@b/i7WW=DQ!G"rMdX#s/Qud32!'1rP?":Es6m]*<AiC1%88f.\IdW/#-o2OK>8-5cL6:RJNnk%I*R
%\F^RUQF;DHQY'B$p8f4nHKP),Hj#B.%67N$LnHV`fbdb.3u'`"aVCK1*_";^R5CWeCi45@f6kO4?!t&bb]jdC_SeiBmp.c/Zqrc"
%#B-Y4-'k25+D+:3JVb[dRj+`H&Z_%'RAV?=N?#u-)/RTpC_=1WB=Gcr\@g.s*(l3\OhD>q:4_6rqi!%mOqYZhJqQeIJdE;NL)73n
%$8tGj\4_>-lW(`O*<J@`F5;*JRMr.X\T6a/8>FM4^%r)@g+,U[KN+!V],4JcIc;jq-Yo*QKH+bqj?]u"Q%(0\nX>fo&S38f$E!*(
%;h<:$;oD%iAj*qICg*05DA6F4Sue^&<Elb4]Rf!!$GidE"KHdW\O^Z1Q\8Tk?lD4S8Ni#bSslV/ZeU]WnuQZc7=g4PNN=]E(lVO\
%'"X&jnj?@k.BQ#Tc3ZL@RZKR$'+_^<be'>:!jjb!B"'(kHt<D3j2n_Pob`A_OGe\#fcD`Bh&/[U"S)SYYlnT9(uViU0bk#73nI3o
%Lf=*`l,Ia>L(1V/#_Lm`RD:"H(L-gj-9j/mK`D66#ge7W%d(.V%1u&Xne;Y10A7@DfGp$Rq-0P*l;q8sE4r;CI<D#N[+_?S6=*!P
%A6\L6XHY7ZQj(DT,R>`0X%6==cDkCg9-7+>MjWtB'5Nj/5iiU\@MS@cD5j0IaC7bu<DlM##!a0m1Fn6%l-?/_V(8$MAP/e<+H+,M
%*VQK4U2G@cS_qF]1$m1lp)31VFHS+I8($9h>L%$OAlFH"SFftR\sNljUWMggU?94H<hE'n,dliini:V?C]N>"hX.2HDqUi?I?oi*
%33C;Dqj^F0'sA!ePDiMLe.Se*UkcpiC@^/@[k^?6dE=SAVVt!Oec%_q0U0g$U7m>DPC7dQq]?gOe<I&_WD\Wlfb-UL,+nP#h59'V
%VH_DAG2OusAQq5(70]HTX2h,;46*tNmSsN/I86Apo?YN,m@;n9G/GMB0(]CA)jXh+=250r_=MLl4\8E:U4`)oac&Os*YChINS0o$
%qOTga0\paYJO.bQQf/;Y4rN7aV1)"*G(ebu;D!ZQ`XUo;lRtL^OZ0VKQg4gXbaFU.'0Au-Hq%?:df*uSAk^hP%)/qmDT_fQXOkA0
%n.T6R%B:YUCQI5(KdbsI2+kNGqrrsr_W7A+:Q&2[AUK7==H]r[a9T9_`bqB3WEIP([Dco9=(qFE-UJsm4n,;H?HH[r7m3n"HeC0&
%""4s@iLsJJ],r=S/dtFZV\V3Qm!*ghC.pW-m]2(QVKAuUc.O<BG^*8toGH(*65f@5G(.niN-`,4B=?X7bQ(I3"Kcu0/W[a&i7/7!
%.ZkcVJe"A<Du*JCk?208]!-6c?>Fn\?oLCHi.Z$%"TdGh]=O/trF/F\chUB"\%)hNT<[Qc\^nFfh@ec)41?f(aP"8[Md`,okVdl2
%lb?`>Yd:kY0kdb^%P53m;!IOc#g_f[Gg,\)KYm]SDZO]9gL825'[_V!p^hi=V:sT]>B\r)]]UumFI!D[YHQ60fhNaA*qbn"j/c<T
%[CncF!iaQ<]cOi9J&pHZ?7],Vig<fcXY8^WCZ1,6.P<+9T$.[J\NWYacn8q8-1nHHDO+\RTUT3,A%P>0n&kGO7?+JKdG!sk4%nN4
%5m>(5>4&aT)0q?B;iJ;LoLi)%P7*i]h8F."KfPcrGgc##+:A)^g]Z5*,1n3*Yr8@M[EHd'PF@Zf'Tdc(qfe8?rmlfZmG1@0Unh0N
%,C&']S6IbD@.PPnFe;mE3(;NVGU"86NJ+(JMB(/5W`/Vq4Ep4<c,1i3EFqj^+cM`hgoQ67n'an/rfXGG1P9`#mAY4)q+Q9acUq*'
%GpoI9_>*E/nK:bi5GX3SI9\N5cj^fs?I'D,"s!8XFUj+bcTR*@P+1Ks_Y(\l4&_O4\rhe#k.d/-,Z^Y]6&)%h+=fJnNt&9]?Ri5K
%MW%Fm'WgPr"Ys6*(,%n:Qb<m$J5#QcVhV4Z^i]G%<9pr^FV/V7Snh_A.L&i=)ECLJZqFLb(V[H_h436T\Yg02juGMKl-10"d5s&P
%Mb(!0IQ&m+?l-rgj2A=pd8U:T12]]A-Zc="mKtHG;/#NURNnjh<Om%aJkpqc?NP>4m?"TEWP5i)+r+QEAd9d6Mb#-NoD+D84(8d&
%!dKHPV%r2dSh=.G!fTR:8+=))W7:s;ZaY:$5fg!1Yf-"UCl*D`a$*5*m)`Cb+KkPP3@tAJB.K7A,Cc9m=P0N&2FHehK5]A)L@h;.
%G/F'$>VFT'pk#aHP;ccKW)9WR4l)IjPg?9kbBY[P0,[P/;bb,)$,Ges\/Xm+00FE!k$n!f!d#Z9M$%==K4!)(6>"k/frr4meU%Il
%`nAsF4_3JhBs+Gb\K`1'33l7sk@'s7+QlQf6[8B!G1BY46=$`5ijs[]MVC\)L7_S]&S",bE#S)1fKhc=5XQu<0G%.mB/hG5TJl^"
%`jW>DL2B:M,rfSK?J2MTU;80\@Y1m=`SaZ1Oc)(S3FFg-Nf^SUltStB(/*(U2s3MDeh`[iSR:I"ON[jk7PYk:99<KG``Y]3;Mch8
%BCT/TAXckG?!%U=F<dC(KH0$O:('!op<s@%Y1N>JT$q6'"+`BRE-6ldRU;k\b@@;<Y;h:f]7Q=_M6F1=^i_ZK8sV$lAjs_L"Oe)g
%U>e'``5B]uhdrEPH<nh@H3"BJ7PqN02=n,hO;KF7,njJlZ*=od*38Y_jB5Zlm@obJ0F1[U@As`>!7Go<GX>.DZH00!k\eVcc3[:R
%o2Q=f.%A&Wa&6P7EDs*Y2&*]C%Y-NgoC7\lP+&59K4+p#S<^WQJ#(dWQ!$<8nVfam"[esca:^03"W#;@b&Es@0PtS\k&+jL\XU4j
%;R\[3"?)"M;NSIe69*'5cu7j$)PE@4!p@fA!=hgM*Adedd.4.!DM;O1eU5Lu4tEsGJf#dQlTTi:_IV=?auSejJ$sCfmMC&1mbk),
%XEC(K0r8U0<cshL:FGsK`%YQp*)4W14l^i:4gs6Hoh;s5=uO%D2&4LC\>dh9'B:RH5XMa4FYabY.Q=\Fb5*U>5UoTX/u:&,=3u]a
%a*);:([*nTnMXf5Qj0SgaglFDSEd82\mN:B*)"lb[MB3U5NA$qi/2E_LrLYnWH7MGc5?;$FcYhEP+nu[\e06]CIX$!EK9g"Wh.PN
%h0(Ql>L4*(9FX?sqH?%4/;_tTW7`QWkT"BEM77G.PNR'eOJ2L$^6djl[&sH8M<rSt\_qeDng.Un!EV3k7^i2QMb(d]r-X>m-$!#*
%JGYo5[C6QURW';d7<T#'Y<G+.1/p9jkBU#\&ga0fR,HVF]abt"$$8;\mXa"L&.CEO`[_pW;W!dim3En/_L6(t]_7lIm4J*KdWVh$
%Q7%M"_fK"!g%"B.G&V:K!3)O8H7f(8[hMth(93#n-cB?:NFSgX(!=9R>P7gID"6dJ7&Joh$_5tt>`[i?Y?F\.23Is/qroCK#[#k$
%;HK3eRs`f8?TqT`4DAnm`f"`P?*/53CJS+PSFA_$iS7s5:YMa!;<W+fr:TCZe**m/a#+eir#::]if1gRbY*9KNGI,V<WN;HZp1+k
%Th`.O"FjOo7A*R-e,*3jbo9KG_F6S2?J-rKYkM]>m8,Q=\^piuF/0O0?;Is9rAQDhEQXc`eje;;?md+8??gJ2GQ[X?P\CpYHGRmK
%j9g]Fd*2q&g1\sGcJ6lC`i`$25u>fFR-8"37H5uM^;fS,&(-4qs-3/,i=m:_=Y1)*^j+QY:C`Wa`j5_`0:/rJ28j(m'*TQ0=0gR"
%9Gt0B5Mk,*N!1GWbBO:13cA_+@ejiu_.u^!5?g(97#2$Qg8t^JEOsjAYp>$EP6dHj=_G)084G8i`[dV1%dNVk$m/1H/EiJ9P=3uE
%(J?APC;O7$r8eZVPibJ;aMrLFH5dA[c0nA&lNsN@7-;Re5@%Xk*WWa?FO"J-%Kn7tc$b\IJnOrSE&)b::;d@UmP#Nlb6sg!j>Z8]
%8%LAa%CPuArB==o)].^Z*n5$2mQAr#F8-<iiq%J][5!:0Wa?9do4BN?RVpr2k[m_0"3l%0QKu%nce1TG$Nn=-4'>d`!m/r%Y1K%C
%,ZYU$bo@YA5e9F,+kh'aPA40_E'6Z1S&7HL-RhPrO_Q^YcV`[J492^:CP?gSY^/;-'R'SlWEOl+noUGk`'u@nYMR4p'[62GRs`!7
%iTg_f^)!\eG<U+pMDo_X2_`M':2?K847Zu=@Z`eEFK6_V\rDutKnI*]UaK+8!&2[m+de):mut#%`3Y:?&')s)!"FXc8?3pK$PMk$
%]C243&!!_QnmKUQnDH:Vc=3C;,chNg^%QXo)6I7?fLZ_`Rgi\5G;nNp]19)MZF*Z<SUB=*&3ZR-i\`b7bo<nF7I[IA\]ii6XN\]B
%;W!/QM;DaNe8$tjr`_%^1&EVM/Pme^X1Yuj;2l9^ndKFZo+U?klrFG4.VG_HG,ToaLSAj&"rKpbFkmaE%`6d$3!jm!n_A.skWgIZ
%cZNM(F0SlnN@ipDT!e,0]s._pZp!MWhO#?'[bN-BJ]W&`<\rqd>-n#G;sh"j.q4p)d]2+Q+4T:qUWSGSjjtj`/h-)WRFF$s*Kqcd
%*R&0`mD(3qaGi,6:?C3/:o$+1pg;KKJ7dN;#QjZ##(7qY@qKY_bVnCW[;R\;an*FjDA/io1Ug5Y%6Qd31$,eB??]\65P\#E\FT?c
%W"lZ1M="n[\chFmNYF+]@$63>Ym^`1!9&H(%m5Z'aL[A0-`k#*>OEG(WcIRm$[Re60)O?$1h%9gG_!&eJ^CT]LMLVJM.H1"'G)hK
%e_UNYIVkG4>BUQ,:U47V@>IliWUkLP1=NK_<!h#=(4[?UdE@L7.9idA]/UbTHe!/tF.RqC+&+V8b?;M9"%CR["loDX+rrMa"5+;F
%0l2Z?8](V.oA#"NeX<P(F>2&f=\7fM7H6S(F>Fpkn[!+>CUJM>T6h#SMKlrEo"BYJGS(^ula*$3S-'[ELL-;$?V,l\$]h2Q/8m.8
%;j#JVV*:Mge67.8g^iJi/Nul)dLZ?MU?&F$n7c``YoA7n:eREPJcCVLF,/3gh[P5o(1<7"#sdU"Ru:!*:AN0!l^XC25!tatOj_EI
%gE5'>!%Z]AYM;jQReBnhD:pg0VK*b>es-q0W`t1[Q.hC4\UW]TW\/g%h#<Gl6%JRgc!mfl;o):T%KiRG0*K'a2?+(e+F1u\-gXk]
%CI8>j[B-\u3YsJg,%r@q<f9*HX<YI\GT+[1]4W#!,J>%F+"pa1(?-g&<Ese?0tV>jkAPC0:mKB(K=n`mL^7X^A_F+34a\qT[CYr1
%k>6JW\m]ob$bluVW+9oI^07+DID^5LlT<-RZ)`0qeQQ4)2\f#:b*Jn-%J3bK$ALMHk$MnYLpC#WO.O6S=/OQPlK.2VBkW/EUoTjJ
%P"!D,\@1r$3JY;6FQodL.+$Wt:(u8*(RK>R\d:YDJ>>'=!o1R+.[WL,9OuQI%a=Ikj[r+N_XrgCh;sWS3M,ptd_HS!%_9AtB0iEW
%0G(/-ga)jlejsCGr@94!2Oj;W5IJGs4JaCWPdQm!N3T0aG$TjWX"nj8<R/,9/R1p*LYQN<?!06SBD/2DTl;V;(jG5LE%Y9/95K.3
%dVD?+?b20nl\fro3R,%eRstu)<#e[AZiOG%*$l$]nKZBqGNS8-37eD'$5:a0-;Ko;)reh#">`AK6dZ]S$goFrUiYS&b^@2sn7*o^
%a[AT\[hVso>bDt%LB%ar&pBV;/U+dBV>U7_`Qqn5lUg,!Jlb05gOhMJ,YtRNZs,J`^(0%[!:Qsjb]fFe7m:Y(gYs6e+M1s)@C,SF
%)F.LS*MY=PcsA+_K\K;5DEE!1*<qIU7$=[*fM[1#'K7DFph@jTdfHcsi)XH%oQ^A,:Gn=,BT6>[ib2dTq!NtqZb6c*c<:NU06HX*
%iOO_0.CTXuZ61a'p02g@X0>RUiRG]B8V*.7*75Z8U%W9LQ-V'\m.TQV0LJNoCjq\M!KGgAUrT`]#B.%ARN)B;f35QYlXUQ%1@gE2
%l-]T**p2/:qU+Y++?Fdu[[sBR:VQ-oPH;J&'CV6ld'8=9:7KP03W!l$$f:POf-+Fc?9fGo&Wg[_GAB4n]u-=Ifd2N0qp,,)'pu%5
%Ud4n/"S%Vn3"Y85]KSkl'eb)'F9)MfjZUkKBbaP=?C;\P<Th3a7c+B8m'Supn<ecNIFY];bM%MOL][lEpB5Ek#:W\@j:0X9<7:OK
%(iig:pb84L#NW4N%5c02^3Rhm%`>5c]<H8"?W*-o96e\_0VuRLlRd33iHio'Nqhu&=MA:[M+Y$U2:Tp6&lgQ%kVY.9j\9\)4Y.ND
%We#H"O<WRr(JG^GB:k$-]kH_Y/IJ4`m&%3<J]QNY!k*)#D^lUp`TbN`!ZokYR58'Ukl\f*-d5_rf<tA+["MZP"on0nB8!VKJVMsj
%-q=1U9#b0WMc;bOl2]/;%ifSU"&"b*4MMpXf8@nEMBucYfBLY`eFmFFLX09D(MHO+Y%;B6F>Wi%+VNr<B9AIJb8Ui>q)['JWAR._
%K#'2s%(72N&)Ni-O`l^rII&L?]VWDOMt!sgZmS4S+&-_1fW;d\XS^3r@o[tCS$@9ib:qHIBAg@*JDjO]a7nI(5?>1>??kapVTtLF
%d$cM4\@K*pD<'F$g$8@#:adMM_,8^H+NrHN/jA98qqu0/,R5\[6VH'b9PQ-&rKNNRcEZ'f@"iGDDfWCU`,%Q0).u`amc^t#Yr!D8
%i,s2Moo1Qi2nZSd0Z8?jV^*VtXiLahFZUcoG`@B1>+I[nN4&f8p^go5%%!fphdoR!>!7X2ilW<\m<,J\A?$tZC:2dN,17m;450R"
%_O#DqMih*_1JmU`CJ`J]IBcGIQF_3SNW*BC)6G9S#a);Rr>Dcq01IL*s7tiM>-6mDX4:BJ3j$t<f"njiTUMq]\c)hUU\,t5X-*^8
%32>D5i"\He-fBX9$N/;*$gApCi'q5s6%D5kk5!g75+#%1fA(/F</+aim+8Tt*4p`.lPsm@TbiDiHgK?`prYN#+3Zdupj"@EGT20/
%Q8ndLQ#"4s9\I5u.tl>._)f1"JPYu4pj*F;LM[k*app9/,eJ[5*ul?q.56:OGPLhLIWa^X'CTQ.!<[fqJ[BXNV:_sk2A%XO?spPM
%!;=rar(ituk9F@b\97UgTQcs@l@mcTFu^J?p,d-4kL*BaTXX_Wf0,$UZ6";"ZLGQ3<+G1WA+]qk!F&1"*I4t;?d5''H]5OCD`l9/
%s"r$IW8r]'R3lan3<?>$s034HVso#J:SDq/_#5[+H:@r#k]N!<[LW0ZHl`,k#,mt?0AuRZYlrWHi=sg(i(9oY*cQpHRe0VG,4'Zf
%FF";YqhJd`ftT5<F"Y.u*Kf#8I"/D4'B=>_8D[JWl)3HTH5u>,POJ66>/4#$B'YQ9@*8TaoSm>tLDql:kP8"=(p*@;@Vmi7bLNU6
%(gd^)En1)!d!)q^rV<@,>cn(%JtYM(Bj?\hktf2\4<-+5I7cJmf,+S/<BeZrjfZbAjpt0.4kGkee7'`8=9kkS^&XTe561<NAkP30
%=-#&1f#1$bOqV2K&hnDrafLV;\579KA^GXd"BH76hs$YT:e5j[#>D5d/rd=f?T)2j-);3tcfguP1]OH)><ECthUS*1FoC<h<h$eq
%"6QF8>4"bHJKr_8'5"L5la2u$]6CA7)R6TlcHRsAiE*5Y)1D\ASIE.1%,O#l2IK&d_sicj1:bu7eJY!S>.m(GWBKk,\lqH,XC>\P
%%R]G`;q,+"RP-"K>"c"eC9<bg;elKDU"4\aEhdb>jkdAiY/?uV%>hUG4`+G<4`gt]qXi""f!i.!C'2KIZ8QCJ^M$!+%]'U^CHcS\
%mk8FNf@h$XXN+XnXGn0;6eXr&>h<<;`/!(-b[],!UXlM)o;M+kF%5FgRr>qe[7/"28R&4@p"BbW!45bMd*Z0+fIYa20j)k1F]3t%
%<N>l&fC$7dmEOWbVnF>B3UK0]%NS:2e(o.;qf4Q>d_<-lG&?uNg!]T_k%EC65>fsk8;trVNUENa)SLXPP'(D'qqer5f.qMf;5Z!S
%$_;a<Y3CmZ]hrD`h-K>_R1$LL5oX-QmMZkiq)l&6kXHA5MjAME99WKpMp@o9#nqKb92bNQ]$.,+dcFgcIU23K1so<qMKN4<?h<TP
%PH1,>R^m.umbOP0Vpn,4la4#>?$?Xe*lLZW*H;N,R-Nk\\p5M/,:>OlF</ls>1Atske@u!/O]>6mq;l_HB7MYX:H.r2LTh-dJEId
%fKc'F^-1\dQfYfmfQ-0Je_>(Khfua'le?>tL]1Uu1$P;TF.F@f@$D]S[\im[DrhFMURsD",<]m;%F9.hMnth'Sf+-Q?4*G`GHC@Y
%(=6A`cQZ/UpTm8!Y!'s=4f5Q[0BG0ofkpn)9fj@[]6-RNB2>\"`YfQB5Fr=!Q-n:[Q!U!*R=`n\N@eNbP/2Be=Z+hI-=GqB@P^B5
%8_FO8Qc=\%m2iVCL!eGl:ohMdL/uB`1u.Da42]6Pr,1`5&OF<=kI"`c%sh0L[ZC6DVK)XYkVQ&t7XmrF1I`=T7q7]Q_)RO]&A4tZ
%CNng,Z#-kgN=T*EXq>^gIcCtM4;qkc>GlK"YhY\+oW?$l^g2.2s37n!'YB5cRF2huD^s:AI8f/TEFHF)b]D7V@T5,mK(h1PZs)a^
%QuVZu8jcN$Xu/9GOZRV<&r`:>DdgYUbK'%p2'=-gm9.VGIX8kWk'hS^2,DZgTUAAQF;@dnmo`m5>Jh)R<YLdW(YWRP]OtqO_`@-h
%m`Lr%b:BQo=GT?aG%5fiKEG7Bp>'>')B\Y'i,eVJH;X<qX[V+bDS7fgR.[&h?``&ip1,0Wc];+]lo`uQQJo0p)^[YT=Ad\XARF6q
%gSI%pZ/+"!-l]%Y%CW`LfP+i;bn0*YDXQ`;G&P*:Bg6g'O7jQa-g^LIXgd1P2gk>UX"S+XG/q'%h5ib_3"-+_,8>9r*3%-U>=W6[
%+<<Cl-_KGll*f^k4.@J8@eel)g<u$>B@,;%30U*tm)E2=1#G$1Won"iXE%Tg:<Ko"93:hX],](-f+m`>"0TkBpu8;D)5$6R]):Oh
%lkj]T2dX(5ZT30rp0I")mY_(2GF+_PhL.3(hR^=#^4:P73qaC_Af,=QGV1R#:V:6VGtOI9k.)g+?;K1:+[*/@j2PkZ-W48hggp"'
%aP=^<ah6DUn#Xfd[u\!bhY4&,jKiB$1LJLIH1b_MYLgKX-scO08'[:3\*>[6fA5$:5.BFgA8M8?H-#2&hqN8P46mdEa7%>f5OCP-
%"1GJ"#t/Yu\j.F&0a+XbF\ACj(qKh<G&&L>[AGU/@F&^DQqt=t_0308$$I]Y8anl`D[]d@r4u4JdV%#M$SRdWcqVA=%eV:!)P[+*
%g!o;riU^Mu*j0&%rpW9!Fr;VVag[)?T(GLbGbl!D)fOl$X5)o$nqs&jPoi3!8$0`.<A^/rBn?&j-q*Oo&TE6RnLRAh33,`oQp4Nj
%a0Jh]*G];[X0MY@fb@pMp[,NGX:LgK1N13WA(3$"A)SfYq>9+/2=@uacbpLJ^*S5bNI(-?bul>V0*ck2H_EbPin<a@ij*#F,ruPo
%a9%2Y0fNDu*1?=cif\W%W6_N($S65B?;P\oP'#4^Y%0$C1F67;K/VDTNoqkYbO[^T_]FY6Y(&Z0h%"?.WAbJK8t4,HDs>?n@[aID
%h,O4s?-oM4<6kdI=m)X3QUuJ'M+ih9b*bQ)E0EGs>P,7qqB_[af:C4RoBdrkS\N`Z3L;HdjO.J;-$T<`:#uZHoKI3)IA?Bgf-lfs
%`5gL*DOmI/g8H<(#WT[SKp(O1G#NWDoP0)(RtW?',F(qWgRuR*]2:1XS6@;XP.b-mPYr:?>Nu!hQRTU:$<5]an6VCo\DC8([7AR)
%d1)\GR-TfT-3!CS;eb5n":.eTWLC`SI5TmO_HbK'bET;57lQKI22atO;bI\d9W`_;G\_6^R.erD)NHFK_;+)4D*WSr3B_l7et'3r
%XIai[Hg?a(Kt[JW)k.c&&Z0K2/tNi<%eIPBBqGWgX)OZ[?.C03"6el^?jg/,Alln+]^WUgRQ"[,7<<d#?#I2lj)qE\C3Ef7Fj%G"
%eNMU>iV(69]+HpPgI#T"]sdWPo[i?J9(_tRQ+X]*g9L0Bi$Ig%WJqOuRt3<gG&'[Yr1KP6e8TATq[b[LDQ,oGG8Deo^YRFWk1JL/
%>jL5#?I(t4g#q\hrUZdCr1M#b_*`<D]m+5FUZB<LB;n(@#.4'.iZ#Top0YCf-VM+MIEEC_LSq'<4RoM$G/AXFkLa@Qqg<hBW]lX6
%8a+-S"naNkmDIk9#[+>mcKje$Ve#LS3k`.fmFC2L/RC4hchR1pOm-:eV=#"?OhA6D*g2Ku[O=#9]!5kBdCnf%1qJpZg['VI)49pC
%CXJ`o*a'q#rLeT6f"^L\WW)PPd=V8=mJu+"5G[g@-Is13MXS5ErUt+`(_;eDU!N$T%I5TUB/lb[mDsK/MiAXXl-3lsVC9=]A;Ln"
%f?m)tG$0NRl!(C>/%r?^Ct#lhYS80LN0F89-CY@%l*iZ23R:ub-hduZ51SI`'@Z#fCH?n6k0#QE3F\H=9V/.bcfL1Np5kI]b=1;?
%3U.s:k?`@<5B!niYB/-h/V@rt_lnp4qeZYg;-KS*Vio?g)ldBW'kiM6&.s[Q2GV.%`&$2+nVe(UH]_DNi>.U`)oR2Ef@K+sIEA>Y
%0MK:<Ae,FG=[)cR0=Ke9pli?\D+b"<6ahoBY064<eJu#U&`\M9]`.N'W,M@eCA!F3&G'27R<3T`.?'2]AfSu(h"QZU;m.e0%$%\1
%?SS^+\4gj?"o'V.F'u@>7'uY"!M6t7J4[G1[^>b^>up91f=Z!&r8,Zk+4+UN=+8jrf>-UUA,f!r2;q2`I:;&e:*8-b+Z:9_rR>->
%i,I#+!n+KGZHk2Ia\%4]KT#$&c91p\^WB>K&+8dOrk=qaVrBk#2&2SMh>#9=6Oj`g_iLPicm'rQ*FVH?C[3ub&?dec/Z6"#q>m^P
%(f.LS-;?bd/4/Fqp86U+D`(U%F/\]_]G`,i)[JLfB-_rpk=D'hktCFXs(7N#j2cfnm`$D!#TP5bKK]0_^E-_6&d>CW9in6N%`8j4
%GB*Z:"ht`u^_+9+$JUQfGLWrF>D#9X%1nU?]PMralb$(FGg4-(ZS(J7q)XmKpBjUsEQ<V\hj@=,op'iPB<Dtqc#eS4bi+iQ's[f[
%^@`nJ>P(DoWNgiSk;ji)3[<g.]i'bikF&l-epLqRjl]+[YrhEg3*5<$W':[1"qgZ;rV'+UHola&f.6'>f&c'l6_1/5jj8,doOLt,
%=&ZZpY:3?DRX47EbHP%U\$[\/ZL6:V#V[UpVOuY2g?;[kn$QRZ8`nR\%M^=,Y@*K8F6d/cjVahcWTTa'bPRUM?DF(,FarV<mIeHG
%^/XGVj;PC!Cp24:'mC(`(9CLsC89m;D#c_D2lbTnHDO>mH]MF8cuO?XJJ!!1$?G@IWP*N=,OS4X??Q'Pkc?f;f&_4#kF\C<Cp0pn
%QD,>J)of3f7]BJ5?*M*#aS/kWVbFT\F>)m$.FT\7Dnk5X]m#hiMs'*J++N9rbrq'XU0\qeh:7V)"+.FnoNK1)G0.ThfY0'sQ_I]4
%I)$GB%I-=@If;d8f;uSrI?$jEL#$\gQenLZ2sR[tgM8<OngX99_-9+46EcF[GH55)JR`tI.n0C,n\J\#mIeIU)_1R8)I;m-Ghjn)
%%Gu0AI8cQ+bP,35)6WSQo=01Oo<M,rf:,N$a)JJ;/@ouum6r<OheOg+lb$Ic5Kics>T]:X]lMru*P^D8qK[d$T>L#/HK(%Tp$ur`
%X[g5lfj6`d#F*SmkYd/$9rlY,rO"^W9Zs`TL+aQ.D=ZAB"2.1]fj:@U>>(n`-e.+%mJ8As`FF1l@TKp=Y:3m4MK,c0?`h]im+&hD
%Grfm40SJI8GM8_M3$jiJ1hhp?]eUB^$*II)r%20Wl$H2t//7IcI@\a%?Cbo95M/mcee5"D=JD9n,e_&+8s&B3_GbH1H4>i"F8t>P
%gT0coR]2*i4_#3-et'X;h,8?o'M^:6\?(rfj1nkUc1`-iE_7a],OsADVseT+'9nq*J`=*-KoE/8,Z!m44OY7GV^#l=/``KU'`ela
%=eik"?lk98N.HKTL5.$MK4.Pg3HBEcQ9Lk!FEbpi.0gE!PbLs2:W$LSo2YVN#^\;.T1XqUe>Kt!LS!Mk<SQlWX8K>/+2m63E^U<#
%lagE3W:5,CBIo`^e(iE'krg5)r7XWYhY<ui>u^[->A!3Q'`i3X[\`pOoCUV\F_R,55%UMZp!ZX0]c(3DB8Wn-0o^HUn`fhgS%b&4
%\g6!OS56dG]abUfM?O]dQG*:9S`8,TXP9bT&C%.2QCb18:NNL=(KYufp0QrF.RZpD]k<Y0_WucI3u>@YZ&Y8_P,Gb^'n*n_brF$.
%Q=mK$>-Omb!8,8+4hFgbb&U92*g1[);rG:pSB$T+RUIcedpm"W^BpI?HmbTH]Qoo$kT4BDNcO2%\ArN)pr<\jbA6LuAd87F"_'-*
%`gZ2*_oN-'^-eui?4'P%k;C3t%UM/?$poZ1d/2a102FT@#WQaS<TU67B-uPNhCVh9%K%BrkMUa<U#&5V]+uOPF?/Oq3CKTGfW4Dp
%41nJT25o,6cR4bt>@?8AeA)TP]`OJkk#(KqSKD+FjEb+7)lQ)MEp1AHqnc\<XYW8HiQH=9cthNPe?=4qocq*uZitgi+t)6nVN8o,
%$PQC@Q@$SW!JTQ?\R(W"3pTtNd.Ktd$sec-KjO5?Q#Y@9Btr:9&>RF[(5fdlf4$#_labRqf.6$dYoQn?MF;(D'ZFCPOjY#i.iqje
%c[K''!&28F&,iIg-jTLPR*N.W"nh=;\\#FDfI27S7QgG8U*C,OIS/8r!Nbr$IPjp?Tcp'<ndC>?1Oq0]jAJ=JhfKJ,W."Ul0fSj]
%Hq8bsDZRErk*GVL+PHr;848>JDsSSZOhtTD82)S"]Cr@s6GX3G3<T<%?6f7e=Q=_\_g49B\bMZs&Ok8Q!LS%in>p'kV^ZUJp^gSV
%"eUM)'SHb,Q7nPV^2AJ)7d07lX@iV7*e>TBGK"jU7KFAQe9@5]"p=`-Eoubt0o[D(\M:qf*,\lLKaD^;c0dGp\4c/WN[2-V'&NMu
%86=AqQ_unB_iNVLne!9!Ot]q07DP#`ZZQa^3d,RZgGJ1s(g7Y/KJrA.iZ,6645)O.3@#o0\s6TL;ln*Gfp]sMI`lYF%>EtTNjUJ.
%C&TSE]rR><$6)t0",lF&K.BJ:"TZ6Kl%_h*KCfdL+j4$r/StMBU6hBpIXN</Ok`ll'%.>u[rU+i*,K-hOTP>bE[qJI%*+sGF+8H*
%XTHG1b^8di02J8QQX?>#n4sh1Hg1*+c,_NYq(?R=20E*/F&T"SiQ.JqK?;hDnA6,>,L6E14J1ZF\KO1s'(ct."G9f.7Z"?p[2?^[
%n$3:!AY4=R1K/94+"@hVm=qNu>ELhH&S[.V3G?CYD"L8ibT9>Sl^/,bCZ5M2h)#5<]\Mf4JrmSs5YQC2:n:=oa+!E\_`s2TD"t]$
%%JBd2d[[?dcK]FBi?'bMlfe'iK4$Bc6n/h'XjsUU_\.n;@)E[h#F6c[BfS!n6N_k7)eZ<Z)qLG"[+I:7V-d%uHL/4?&4H)j4V#qu
%7Y7?`\^m@H8Hq)u,GV9<Um%l:_Z`SpU;XR,BI[PfWa?<1D5it5])`naf#9,V@P5e1A#_K`i@'XV']n8-V/5J"V@RAN,A0o8@)L\p
%pBX0.3)_d.\2f6!)TjlP)Um#OKMY7XeloD`i\-F;iFU^j>.[j[Ecr_^(5$NqU33Cf,FVH?I=u9T;//ISg@0!JKN'"LeClO@F)`"7
%Z)K"tdWZofWoG>=4IHT5f.G>@h>8(A43`*T9q,O#=GB'WSk9`_5]Xbn.3n)(SahmH9$f(_XXp0tL5*@g=PPMM[Z#n,"q1^l$WJ1(
%MEKh[#)+U;X)kb4n0UYF])[pPO#@/)3\8.8pS3CK"Q#T;s2aSfY/B;EFd(Zp]'C'K_83#^AGhsD0La[tQb9Og5%#S/KKfTK"Kmo!
%!fV@j9<:.ZK@d1e-N2N*!4""tAdhm11."`7(BpX@7"H%>EEiJdC"f-Inl-E.&+]Qd_RrL,r`]\H/)DIX#dN&@NEO8bH_q27OcN5g
%IH_Gt<A<ul)8.q/\pT_EM-_rq?'-?kL)/00]\%XFOg.QlfZV^^0'gN6@Sob6'YqAmcNYE4lThU\a$Vs5A=m@8(*!"j_%]`t<s^n9
%B9;-g5oD"Ae@'\JC4VHS:O+,7e38`_g_pQ/#7['Zh>9L&KFD/C:p_;M&l$PgO83*K(cf"4Pr@BkK+ajXgjTF-'+u^L5TkVS&;;CJ
%Ap/42kGJV<D86Q.n]1$/G%GN&/$9fonjT_jlGHcj`Ds!<8N$>sY!])RCp?D^o'<.s<K/(ecD$+7S/X9k<S;>hG@5Uq6dI8\?2,S-
%Zsk&S*$%un"W,dF_![p^S9E0+VBZQ?J&oh;e6-KLFbW@AF5_S78XL(knH-I.Ue]l=(LRFUa,(EY?TEi2Lu5V9>F?R3J"3JJ>5P<J
%/So0C$19@<iSm/UifNZ1,UIn"H&?>JQ1<O.et2"RA`SIQaXflk<d<Y*V4g]OF0&SsEIj['Tjhfs>t/Ch")4A0ehPh%@S8PqB%&64
%T]Pks@[o!eB$'JDIcPoQfUCF&j%c9l2;`@')m`BaW5>FBWcY#VQ4<(JO)4qWl;Qh6#1+^m^27brRsB50T94$>i&tc@bG<nc>.T.!
%J:[f=<9^84"i02IJTTpS5TEDnBLD(5D(Pq"2tR9c\84M^4%f4RH*n7FP$LB58X&r&gn(l\>=l%$.;uifH">*'8)Otr7+L77iiV!s
%B6:sAFX258/N20ZQa^Q_@)^aJ`?_b-Kq+HU]$Yu\k$JVb?Dk)eMs+:"h0dT0QHTf.4A!iJ8&PLG7:c(LJrmT%Umb:,Bgj`WL2CVQ
%oDZgMU?2^Rc!j\"?.t`Nge0Oi9hdhR$uJo@#_$inYFq^jLnYtG>uNZE?oP"Qme1FtJ$(6*E`D0X'`E97l@<pg>*2[RhKQI.2e4"t
%\Rd^lDFe%n,-!N/+[kX'<NWM8IG4OQXiMs3F^/<5rV6#f[N7Al,9Q,IeW69G?"`re/r>>LgaMI.W#7>5CRs0&O$As8f:c0@77^,V
%q`qZWmc5.o`03YtkBB!*_>N(:Y4F`NFhUk308YFjfXEr8?oFQrb?Zh3:;PWb,e\2kYm!IEQlQqd>KAHQZ'o.Ni%e'JL8N*QPm>!d
%)s9rQYnq@0Be#@s3:XeKG7[lSE//SU-FS;1C+jC?qt:QCh@FE0FQ5H@<N9EAb8Fpu/InniYooXb%Z2@D25TY2hlCAcMV%uE9O?rn
%qi47Vg^7@<\3uuJPBB"=;Lg@TUPE$nm&IrDq;Os@?=4@P%^hgF25RUdI&rM1MK1oR>!C<Xf9GlDoI?m&j$i.obPBY'q&hS&;U3=b
%3MfonV;q+1E^'/"^)qaeihsuqA:%V4o)4Y#?2R5RT6`*HO6%f8T.T5)YN>YdY/:'@3M1UL+"PgSU7>"/Xi(Ou$N$F,Qh,(Z2IZ;8
%(JI[U7V\=]g\bl]=/T;[`-.oI6mEV9b*^\AZT->=N(0VSXZW_S;5G7og=VM28o<UjUf&t,+1#bU^WM$#+K6UeWQgrZN_X@b;^l^m
%MYL4!O"K3GX&l*:4,'man.!/.)Qo7Ho%NSO&=F^(fEjq(rlo'.SN+um7/6.ZE_/2j5!jLC9NqU)C;WrNhcmOo]m,Uu[-`71P@ek(
%*%0eeFut>F@\TH$U)7\&#S856Rrc4)Qi)rE?G1RH5@&F[QZ2c*ZFaE59,-21=EaFqaO[@fcDBY8lp)NOr"=RI,%bKl7jY'8.#-sW
%bU$s0YFa!5T<@p:)nR=eBIpp1F"BPP?(Yr)jsgYI;r&t$X%@(LeH9Y.$Riso!52>i`Xr8hb<Y)[8LMO:\KmmN?GHK6Eh"6,JUgAT
%fX?)_8MQ[./LDm[5cuP@Csu4me.d)VlYlEi(mf9&S5([-*oYTWd?mCLV(j9MQ!R!]<Eh6IG=bHk(W90H)*8FU%]OU#;q^HkTs\_i
%8<,ca(p12_,s#cCPAIG>f!bAtk\.,/Z<omSoto6bM72fYL2B>BPjbF:mN(:LWhNtu%]Yr/Weu>S@`2h2X7t01p3s(Qbh1@`=LViQ
%YML'+r:;DIaG%1i`@pffLIH2B=S?j.Ps;5"`\p,fd=>3K%#aC@\Ho*[LQ]?1MO!S8e8_707#FkB(>GNP,Et_KkN")gT#qc#<j!s^
%V^(@:!0jppGYusUV1]u6*gk^s'+NMYmGa!Qf,@4OYKG3r8taZAogAlFa6H'(\`u5E;:P+tfkD`JRkItBD^ENZQaP;h8;.lgOr3/I
%q9Z?tc1NrAYkB#;R?36BOr9H"@8+O+A[PFGSYA(.`I@e>,1ZBj>d\!sUGpKCkfpK9(qif+1kk-fq1I'6M6QMLcFtWOj#`/[NCZnV
%K]l/+99PK()s/fP?S"%2.Qd"\ol/Z\2d@9V[X,GZ7rR%^n&W-@.qk\U*V<j:,$upY"r7W)f,eCqb">5u8n0O.N*C*h=14C6WYs5L
%KEl,a0!9'f:NFCd+rC6@,etOK2*gCK'sk'[5AEe/+;Znb)EH@](.s,g0IeV`;iX;K;1dV?/+NN/Z"NY8S'J?-Nipf0C"3jud8CZ%
%D*CnB.WV:6Wfbc4FahbD^kQ5aG0SD'kNuIi+0<]@n8AjnaZiUiVn<uAV3Q=B2kR45h-QM)>3#.pb.MkVLT!3$_mM!%Q$ID\KA.@!
%3B)02<9MEg^:5p/6$.QEA_u,\r-4b<6=o!aj>0^u<LG3n2fH5!X"3djL_$7fQ7mZ4?\gA6qgu\7W:*Q,QNUOM8mtKIg1O>;"cD5m
%6qY/J<d<bj,IkspQ^VWMg!%#%=K+F;OSuL4F[hN:+fW60Z(\?M."garMVe#$kGtn3)Q`O/%\W3X@LWc%X(3sUG1r8(5[9@/MLP70
%n_mVT$`ZD#gFF(nKWTZ&.eN\0?&YC4eKMb+*6N,qHKIk\3p''OZWl_2:mM],7<oc-ZFdS)KTbuBm<"qYqK^+C-(@QQ4'i-&G%jYj
%d'hRc6XHu":?6SV2N)e%e:J9"A/_Jj[%._&<\9KRF<0&WediJ:@_/^Y?st8b9&6ncrLtLhVt[ACP(g#c8WbR*>PjR-=kM*aMe$6H
%)b%&)#@27$,J2e$_F5mbXQ\H._B`HK%[m!7V]H&s+gq&#7<u1RmH]]$Piq1%Mt2=ucb)bfn3:*@Va.Vm0$6QS4[3)6pZ#W%_tm&(
%hI_qi#E/0&/OmQ7&Zi]EhON9do_XRmk@.q2AbQg%=hdP6j233KDVar9XWa5kVNc9QMQ4SF4r)K[&l!IsZH@(7p72MuQ4E#03;mmT
%;aF]2Bsg)HFBu^C*pg,&'[Q878Tto(MalJbH?P"d'Rh+U)akA4;.4KtFgClC,+"@\-"$616mJ%?0r@XYI1a&'mt&eKjJZUh(i5Np
%BkK)_8\6JAg4e+*WLOB\NQ<[nU(S8rW>*.=CEJfpZO:,/)j2>>\Ekj!X4N#ECI,.TOk"ER-'cX@maR-mBO/@@&hXkifj-\A>jM]6
%,0,poI8qro.l\`)?DSIN7;_[s=)$>.]UaCliM3Uem0@i2TinMacJqmjeTN"'.M_gap%nF@i^p]5n,?1d!,ef;lpnM=EkVHShG[Oq
%7t%4C5?t=pn`il[fA,It60PFBM0q5Q`B$W)?>VA1=LW\XlmJC\UN.n.%iRfMdf39HLL[sTb:aeS.'H=F5oD1q\UsF2M,_<kSHbDp
%VY24jF'tJS,j.+FUj='f?UoWEaFeS@]cb+bHDfB,qQQ(%,X/bfHUcW4fB^Nr`k;$Cb3S`]1aKg`^#aWe<)P/W@d]UrP=;uu7:^_E
%hhCg@S+Yj2@Mr-]fmK#%[U->X=uMj@apr41m0[T<'&!E??'@0H`ZtjMIqILNn1Bt]Xn-9r`>;l[fI&VrNNJ#_(\YsNoncE90.H7O
%MiTH,JM/S@PH3s^CjLM0@@t]Vk>rGm.>lES/aW@>\/Vu_:X1n]A*?](p5'1_^8asQ"hp_8:Tg]n<nMf&YYWQV?DT'!?"'@1<Sr*=
%pWEp@G`,Eue[J0<rOTj0\Z.hZbiYr5qrD@V$[7)7@@tF1l;neqac1!P)Z%=f5.NZfVHSCF@@pe)h\H=Z,DCPd:&Xk=Nid.OlpKS[
%ra]H0Zmj)k?Uckp@rYSE+VaY;5d\iOp;p>-nQU6F=kG*'eb;H1!l<1sp;o07;mGoH_EJ!/<gt[u'e:@Zm$"cVJ,DrcU=uLQqrFdR
%,j@Eu;:m6T9C!UZ0.ZB&,.t#B6hEMV.=t\%UU$$^dDA(-P^Z/!nDC4L:HTs=+7Y+YOf[2*PhEZs/"rOp[EX[\D7de$XWe/dm?rF\
%[d8]HYjE2j"d@uIDt-30.q7frI]15,N6NWi\c!qUZAcB&+`dpNb4Tr;dYM2L[.4K!0(;612r2-IG9apGR8dCm!pMFV.`5.Zce*).
%m(-%)R```JZ-.7J.FXG&]C.:+QeDM1\P4J\ZX#3`;j#Gg00B2]>2CCULU/%%0E4D#Ed[0C^\,08]DiDP<(cEG^E)p>5C3._&'6O1
%o(W1O(8mA,r(er4JsP5ue)c'0mAYF3T60sEqrN=KBA:Z]T+9uY0!7>AM8&e)RUZMp\7qK9[Da>^=$DiI^LV#.?ek5:RQe^_`a,m^
%fp]X9eM[;ePa*.N?'SWV9+0G"Sk-5>ac5%UYUE(;.H(mP#cS(7Xe^g61qcIaeHCqb<R9r!g+Y!5VAoNZ#7K(j,bXUhC'@d.b'c`P
%[0!J(,a#.j['N["CC2e?]n1=MC!q`"?0KJ?_WsH%d>?M;Ee`._G=[2%4e+a&G=[0s[;S^,LV[_$nFK^%Dts@=pRYT/,i+pYs'CV1
%!*O+M&K)1K.1<uuH1/EX/ZFFDP28"XcZed6I\%RBQ";ADJ3Gcqf$$3G%@bS_0KZ^%(i"l^f6'MUQLH*i*J^ll2;$P?3q2*q]@g4C
%LPQZs6eC,kT]V<J^r$sA(eDJ(L;]JYZHg@&5E).%+f!j5SWGQtF%?&\h(]np#B_q@K_qaD-";n(68:@/dh2jGC4frR13FRJ%(+(3
%-jdX'&qBC9^%ZN0:4<(u#;=5U/;f9_-l+QFo\RX/a)`@"qYp.*LaPhp)o(iKrlkB9nQ>Ye-'-+GXoB`YO8J\MRm^4?6JoOAh/fgn
%hk@4#5i9>U,;]t%5i^]s<,Yt?NA,TPd._HN>9N<?&cI7-q@bg]l2,[437!uF^/%4R:5qus?N*'EnC*G41>6_ZqnDtgd.ZCZ%I(n#
%00d<7Lj[6Ia,i,2UNDM>U5K*oTO]q2_#jp'P((rCc@Mpb6YG:l(Vu5rOHX>7T:9++\<#fbq_P+)`=@oN+.l;m82]1=f:/3%H=&CJ
%lpRknUadnN^KoP]%P%t<Dtt:+ZuKlkA$g6Yk6P:)n"tLPU\rqm]'%O^F/_VT;SCc<Qh0KT-Hj#L3dDq"'XPOJ(E/'nIUp1DKG%cj
%"EA@SgsJLbnnt`LhXT^`524]Le!8D%cb"T`Gu_!FXm-bj31=86%0V_@mrkh>]WVF9S$$^LhX*RAa1c4A0W2a+*_u#<RUIOa&Ph=t
%ajggSLFa)_pMT<V_t>[+mE5"m-gN.(Y!6%']^Xk<`U@^]UAT-+Y3$TcIC]0iS\9,S>o=7!_*+9RJ*BN2]RBU)ql;lJH,!*<IWi2;
%g$3EKGAcfeZbFYrWE*odr[EDFJ)6d'qgR(3Recof&ECl2jo)_k4Xt>fhUp$MdiVA%r[@L?lID*E+8(%^)*r.7GO9hAj*n,pk!nFQ
%h$s6ok5@>FT%RmLG8G[!QZKL"?gR3E,<%Qe%H"es/49r%D)V40KtI5024cqtDm-q30/N(ALp(,J'moCDJ,d91-_Kl!eS;-4e[,:V
%p\V[n@Q>>`^@?IJYAS/=g?^uV;u#Zfo2A6frA/qC\aR)9BnMH^CM&MKc.i&8X(+8I9fr+JpI:Khb/0eHr]#_Rh_TqRY)Uf3g4dek
%%+(5e%<K5NV"J`&1T/6+lZR8iIars'AOuetdKnDO%,BQd:2<3!kGDF:B#`*!qDEQrqEC(eJ/rmI^oa<0>%%$`#$`4R<=]QFE17b1
%4`64oXg-@8%L<7Z#HRDlD6MVY&]=o#!0.p!egMRaVDSnh2Yim<)<:cm&dC7/:;`(7LUfA$8&TqSkmV@3d7:c+?=')h-!_H[[S:BL
%<sHDtL>VNOr3h#fF]Z'nf,+3ul$s>7@63t.`9%o\d]YU@9#0EQBbM5p)duOs3"Gu_lO@$nHV*Co;Fl:r;-d7o`<YbS@C;Pt#e`F!
%l9%fi9#%9I.WtGHQ9s2ma/MYFgRR&R]W[@r\UPjbYDEYlml#sr#UZ[?e8'O'56iZ*I&Zi9%E+%IZ]fMp*Ef9,i(=bJH&2dJF$i`J
%BE683Ws<7oO./jDca6Rda!o!3J"GJpEj+MZl93VM5=o7AUr4=<WpK#;;ob,,g?Y2,2pn>j&eAj[VF+(cg?ab:D0-`\""-"W9p3J/
%K:SYG]?ERUkE/4q.%=nE9fp,m3oQqVhuTB^R5b)frASR9Mg8ZhGG7QZD16P^Pf.S5&UU_E`$pOqP8KmPfINstS<>kKM`mpXHE<@L
%EUsb]V/YEK->G@s4Oe-4Pf.S5&bE]hQdlN-$^3Ie*6LFb:IuNb+)r8pH:1Bb\G:pc\aW(d,d-?Q#1qD_X>!(0p7shK$dB"h7d'r;
%a2Vmq3-A'6N8nVQR#'"pJ%8]j?SLi]eZ<^3:&;Ah'i&;J4++BOWW$XOs%]o;?FKR22(KY!5`NBUEJ.TAl&8KiC9iSL'3;M%Cr=.K
%[2SCT3%QiH:^mq*LIa<;qPXi67kS]Q(h0/@+&c1?Yo4Z)>h/+A)BOq,FuV?F^?6*V0_tm:&)H_oQo*^fG1cL#*3%n*C\rj.4.J?*
%6J:ESOo&:S->n&f]%c2nOo'L&L5/:+FcP5GE-)/SIc_Ic*f`u/(c*$&i.d"skBe8PiF1'?(s(>INmNPpGh>_7*6.eDb%[%r4</d<
%6hQqd1d'PHP"N>,NoM?$X5W#Np,@0Iog'#t-g4KRjGa"b],aWUa]gi+_o'ls%#O1/>f4HfUN@s\BW'Gb%1gK%S]B.IE--7s1>X+d
%iSiuKKf63PBSUJM33\l8h$urI:!;(.:rC2uh%'=h[0]45+,qf&:E>Z@G<G\uR<ouZb/NjfLQbYfI2X/e((CJtW5CMU*&>[rJLE3t
%_o'lsN(bOcUuC:rDMOuLKp/?<m#:4QW&3lY)BOq,G*qrl,<%`T1d19Zo"Wr8%`bG\#;nV+U8U7n_o&bU'HXsHiTP07j/]Zp1d%;4
%:Z5_$*qkWB?`n@?`0eXc*Y(!?9i_C1XG2M*eS]iu3#WiumWNi:ME?9erlAu4;lrO87r!9.=h1M!2a$G"NpLhD9cYu*GG*pR@<6E9
%Cj7pK'RSimOX%GX_o$ohi$hJM#J_=iiSdm=ifDscE3pLaQe3:OiSh!t[]VADN3+,#iSeJ;4p<DX^#@p`m=*u>*k(%dYY?&qi,XF(
%LZ@Zk7r3E0?ARU')]fJ[N'5u,]:V)m_o(VULNYaq"i)+[iSiuGh6%RgL^akbH[OP:G,0kJ]bB_@B-(Bbl"bN'g+tI+5Y7`U)]k%-
%FuZ>+L5t-[0[FHXP&Bip:L;^cGmLTu^+Z\:(oTNW`i71.l0>0tlB$\dmgID1r_nG4,_tGXp0j5(9@r6Il/Ia>!D]@oqUTI)>C5-#
%hVB-WHtOfb-[iTs@D2JPDpSCY1a?i!qTQg7gS`9ddk@O]Jul,C;n"Abl^6@D1X"N+Ie[C@drg?;?J9g-hg71E]C^76m$42Ebgshh
%X!`Dr\IrO]^ACaJ:N'<0<TjBuS@Ne*kPaoAbHi!rkkOQ1f&kH,NR$BS\9ZW>]lO.rUWX`#gknlk4l!RgIQj@Zq>8[*eN(DDc\[GO
%@>Fi&DYM#smlQkK^\rOYr]Im'nh&^iH#ifQfi,lVeTgrZ(Y>h7rV:R+L&_-mk8_g7WMZ"'4acaDVR,c<A]B/rq0:jbEH]<;?Fb'p
%D#V+rh->qPmdKPVX_7BW<DRRPI[tj,hu=&P?efMh&g&`2>[Da).;m]aEWY)^bBq!1IRaXWqW)T#E_jF8q<']oe>q?uIXkrmpsD5D
%[+kNMet/I??+G6/fR@g1AAQ%,m-POcAk&rre*O]Q4*OIaIfAibWGd.,31D_LJ,FA.pVY2[Upj[Vl)HOh(4Z,6#`-+cN>[m8X.'VA
%Si3Ki4p^NCpKhS58)H1e`SFhcRU`ZE>.J:H!N;*i@@M6cDU%!s`V&,Xro)H6)eS-dPP&&5fR-NAYJc2(p!_eaIP#IS^FK8:^D8Wg
%05X#?4F:Xd^%bUA\Rj+bIYcbWph0SX2B/3p$XZM:=[%2GErP4F*`olJp&!!@X#HV4H*aaFpurQCP,7'lm3&BQ;69hb_R$plJMPE`
%B+aCtk-n7Pjj6#WJ$QDf50F.qhrNC0Sr(QUKs(B9?S=&&=(-&$p>ji5:4@&$H#pmZWasI.Z`q/g)VWp-m+/R[G4Fps2gMD^k4lFX
%L\gbWjpqje5MTMrDZ6lirkn&BVtn5Nhe.D>I;Jmp>;'9qne4"n\*)MM8$h[U_m^H:J,&4l1k4_n$)HB<[:5:sGfjnUD&2o99bd0`
%,DR;%?$c7W?MjY<fpZKg*FrY4VEMS=D(/hH5P'_$h7_M#,7MMW?ges.lIUAE`FAH]!-tU)(7-*M!oqaImSmhZ-YSg<?/mrdB@cGF
%o[RSu3rDZkV(/M:40RiH?MbEqmp+PJ:0&sS"A>Ie.+4??f$Ep!c#fT6?QOF4@H1pg:!\o^9R"SQki0.\eOO8t^Kp_9hY=APE:qs!
%0Se@fGqo>Fo?H'K)fBQjl0!F<%uW&hM[]RE$C=M@IXcFD\HVF)K0*EDG$cm&CaO6"e%69SQhZb\r.B:nl,rU,$gd&EHhHR=2?$RF
%Wk\P!!Bp]MZGbM<c[:!`Ep\^a<Xu;obJ20WX0_ZO]2NJ]dp[WLkF1YJQS1J4SH&*+kDSmn1okn/>^j&:OMA7>V9\j`Bmog5KeqmU
%IQRF?o>67^B-<K7lI1)Og!tStoXG[lbmSBIr;C(B;ZtCJEn)0fgKe/_E,4UN58Jp/34?'-)0MhjT7>\N?2sfoYD4VE/jK$02kCpr
%%cLELbA_Bc=B_6jI/;(,p6VCo=,ffb^foLT.i[4)g$aAjUNlM$1FFf&pf<urFQM->M+\q#F^ep2mdZ.WgUf+7>e[k)5iiY0`U]3+
%QfIJ6-WX;m0&Y,riptOKq%G8sDr!Enl/=;V_:PTRNBEt*,,JW_TBZ!;e!s4VP7[W`aLe';WY(>QqUmJ5D(+:E`4Z)&$O\9T[cWYp
%q%`$&r[Rq1qqb3HH$3c](%E4uoHH*8M1*R>TDn78_+C78L%dke.ScPl\3<SEQWnG+L0hLS+8k)[I&7SbIAr`PnF0GP8!bh\E5oJX
%)o<[LIfBHe[\IC+;YbQQmHp7j%rJtmFOQWHrl4%Ce.pE_a#cn&o*UWBs)L!?BgO/u()78,S,@S,T0`h`5?E#(I+nd4[7XQ5K5Y&0
%%q9m(ILKYIR$K#A/,;4l,0ilq-'7J!r`Gb=Fn\qM\eQGNHsaC(jmDH!\,#@#1Z-g1Xe4BO]XI@kb0KsN^E;/cnlPQnZT]8"7W$_S
%mXJ>cFoCCPq*,riQgOR]a!1#u?gZn'\_P"VlNVHe%(Y4"Dq1gc/*Ag>^-#JuXhS"e\G#d\`n&tlG3.oPnu@(LrS#lL^Ga\fm?Mc$
%r;(%Dp\o*PYd[PRKpF\VmT33`g0".Jr6srKa%qdnG(-@Gqm-(Vcci<XkLTU$)t2XSm;+obE8hNW62=4I7qL`0hd<LZ^\VtP,8p7)
%MJ<"b'=Zi_>^3RMk4^C<ErPp%qqX+O\6tFo0E!mee#-A`i=qDo(8b"*O&UpEo1c8i]CMGTkAK.C4l?'_jid#W]u`Hdq>@'FK;P@1
%f11>er/FY@0A!C6^%c13iHk$8N*XJ=H8aUd8[d4\FlnJ"[,5LXId>/0?KF//cCMQ`(I1#[@?6D7Rm.jGl9+)%<n9HQT%R=nI.f#S
%Wipg-g3^:(Ao[.tlCEtPDTY0<;sSqjqfSNto%2*dZg6bkl#5m.4jVq'j1'k]GZHp:\`^Q_o,iIQVHiN>\*mQC[WL4,-<U3iQ4A!U
%N.Lh,cqQ\[D"Yd4hTU;4HOHs)rMsitj3lEb(RBMW!2f^?GP.hpeH\$7Q@E8UZ+:Z^p4SU35Ie#X[T;[QC3sr1n+F6CU/$0LFER?J
%e!KXH$a[/:lc1BUYX_2&^(X*BNpYQhLP!X]HGDPZP<[XLY'`8,mH&Yl4Srn<@XE?/1\lXa1W)c>@6Qhh_=F#.2%."o37Tp!]U@Y:
%oV_;\jYI,n>R9*4\#!h`fX2[mqh(8Z=Gent`$\dPA=S'g[Q`4o#^D::VJkdWC&`c5F!.?>]A4,P=?\O\ReK+WnQ/GKlCgt!f_mil
%VB&BgUHP`+cU;H%G1Gi$$M5`sEG"Y4o6P"W]<d*=Y08H.c.i*\h#%mGZh/:u_9C?ufpa\`hN0rQ6+EIg]_1p5bi7CbT3@afWg6u;
%b^J?]1pciAhFkM!nGHkJ%,2-.GM&GA=fqIab+@Gc#+Nl#:<^qQWf6b]NWB)0GODWHg0>0ImHVU\s3.WQHP*I)M9MP&20lOW(^>J5
%cXHXul#1nm1VBgd=2!LhVqBS&n*?$Y<Z^/.GYQKBiQT<rGj!OX1<.;r-hmT)<%^5@n!`)+S,&?@00d-Qn(`E)\+]R8DstaGC*Qb9
%G(CloP[au!1isb0^lQ[nj>5hPP[g<W^)IO_C9fue-FPhH4>?k@S]WOGN`h8)UNl:c*'pM?Q_QLng*H=a?VoBfk$RTVBU$!Z6fNKS
%)E$LApO@YqQW'>r/6p3n51@5`5>U]iGJ3=WRJlWV*?<NIYerC9fC(fj&`G=fB8+n&qTYGI2]o3_=#72Xo>_M`%Jf>''Bd2,m``ng
%rO\M$I/J;Cr8u7Z@V4kNrTrG#2]r:NUlRcipXO!TBWi>1O%#rep$!ID2$W1"GkZCAbK@;dbAZM>pRb0qC;2G$O7Sh^DKj/tn%3!'
%b`F[iZ$C_3r>5u&^pJ_1%Ouu&!;jSU0^[`nhe.D.KQ-lrp0mjCOX2Meg8$9Dnk5hc4oRT+,gMO!*q>,KJTJW68ab7T^FGj9$=Pq5
%VG0H\`joUnd'Rdo4m\>C9KN<4)<[1E0Xuc().Fg3ru<j>Zst?3Y&oWWG]Mp!mFB/tAn?,^hX/S\b6rkXD=RM6Zg5prJ%o1CMJmF:
%r;H-*q2N'hn*cd]C`caE-U7O^=MHu5;/AG/>Wt6FZ1("#_=<n3ZH.$E(6*gu7kd9`)TP@PqK4!)p=M4daX-:&/Z3q0=`YQ/-f:ER
%2qmtQTD#YPcu)>ur^_B>YIJup`$`<f`-cj?:\WVmN_@jrpFWkloXj)U1j`>Og?bdT*>m)ii7GSH70`V51$UOfm*>(-:Z\XJ^7,V3
%F.^YTF!8NoKhi)krKBI%F#fRr""$H\q+SGKJ,\Qp_aja>*m8rQT/PTNaA:tW`\lW`,rTCKf07NnQl?j`]7HACk46urGbYb`i(Yj!
%Y\\0n"fk!GXa/mBkP4,B(;#\:k4Lis6QWpKe^fc>O@Ls+5'&iA4F4ic5^`2k*dtnh=9jn+N>9p&iK2*DduJgsUDJmIUe)%V)8pu2
%?5OQUf;&Nl$G7\<U`eruF3O=DU&EAfo1M7()u^rUNGndSN?YpB'p#JNM[q^0A@6@Q9`&$nO"T44dZk-pg;E[!]<?mYr#,Oiaof:n
%Og1uZn,7N]pLfDjT6]k-\(3gsbf+4%)e[`sT$Bd[n7QSYm7d;hfkZ$Z\@D7,42q@C,GdKD[P/Imj7G7eS98m[YE[+AR'g"&Il(!Y
%jq@%:chR_@Eaf'c_\u5V@WUSOP7Ia()%1'rVl!JAr5t6!G9XCICs!h\83=K]IB\J=P:m\admZG"off\de;MM)7em[hhgKSc;a#[r
%4R;D"1tt0_V_d4s2`+3Xn&hsQ?&h,Grm^n5U-/:Q8/UP!k'5r]q_Nl.cKK0B?SB]8e7JrdqIFe2D%qBd^?83m.9`3[qSLH\[0ppq
%r,R!'0V^;'HGf(OV#.CqlTp^tnZoh7IpUoE2PI=Jemc&qN8B>!jkf??g4sm=n+>D8F2.:"f!!B+O!S^2ih"'^iNg/r/)>e-F#TP9
%fQu(.n^!sbO?q's,pkcRP]sj;I;j[PHQT]bgtE8Vc75C6RCeOSHJ2j<%$3/[@#Pk!*]V0D!OQ331Vctj&_d"iY]38'bntj\])8EC
%j5#Qm$V+>j)_LX]_li1D0j%%pP(e"s_.F+L6(Oc%Uc;A(=\^fZ#HrHm_9laLkW(Y@W]56=[Z-l6\`^;9g`.:V1P4"a[*eJAP>I_!
%TP&V1EDL,RNLTeRJCX;9UOS4THL?8,Qd:*UQ3WdAh*1mYZe;]QU"8S?\4ICeB8eHhNnDTR4KsT_R]Z5fn!dp7hg-B8l_:'*I!DKU
%n$?*oc]*cq,PG`PNt>(!\T8uLD-UnJlXJS^=@,\#2321!E2&'Y@G7Cjd`&T@"D@q8c0^:#@o$Pr-9ZEnrT1^LLAUYTGDu?SW*nUD
%:]&1Gd.<?_kbE`H-9^d/bdVS54L>r5ddptAk=?dTIfq)mV/5=e*=/NHMuBX!9@rLmYg,Ce6#LIMn]oo61LQ;GUm[1pB%(KkR8%c2
%Re,$$,2@RpjD*QMT(ABlr32)$5@1(.-RBma3MB$$RODf\45c]`T`3/OqWXUmA6pGj$6O*G61NQJZOeq%QI;rqrNa02pS2fER6bGN
%__on;?Xc>@4b]>ee=51A?,NLs$`uY#;VNh+/Tq*?PMC7s\bh0AeG50+Xj>e-c/2hTj1s3'o3GJqdoY-:>CU=7)@92[)<QXk]Nih5
%VcUY4q*ThLHJ`2VbH5laD@4njNsi1FhFh!TgS`28kmSAH1$edqh-RYuXmY%$/JNC*nhhE@4e(<<pS^p-iu\'+?9$'F;)H`bS^L,s
%4O2no/()qm?!]PK3!o%\g$O0W?bO)MpW`@Mf4H(G4aK^F:qVATC'b'T7?4O\\ZO*aP7KK(b.X8\Ro*S%$bu/%g:@(FH1c1M_4OYu
%2kGN/CTn#tbn"s#rk)RZWNiXbN6;`[CROLTb9kX3M;k45^UJrep1/Fuf2%T;AFT>sk4"SZH%AbYX8!]"(!TN\a4NBO29N,Kdu\LV
%R5=bg3PYIH1d=:9D9_:HHei5E4tkW>=T<Ck?&C<8KI2C0[Y#?=+.V1iXQNonS2ZL)/[Y()hTgS@b+12-8_nko]t%)cmS\;[l$g$"
%1Ns*$qF^a4p&n"c/)1!_g<\UOkQ1:77aNrdH^epq5?h?!W9,us2f:d]&j?*i240s/k9BLlMc1EE]L>HRF"InW1/1\9NY.\J$ceF-
%8R(AV9[2The)]2@b1'ZUQ8Hi8ef#HhWHjG:RfD9AWP?ReluX,'Z;VIg:+tN)Zb*PfBCGH4cekT9VuA_Ap"/d"2/=:^qs]#TDeJ7l
%cN!aSrdF[if:?ipVpA'jY<H(#G-),;458XWlqAeeakJFW/>Y?S'4SQf8WR^cM8oDLp!k^"-gtDi\,Nj^G,[^mDm%a(Lp0+^e\J5.
%6/?%/T0@`kJ6ur$iQo%>E/LdD/=B_&QoM1m9?Tm'4FV^-@Hm1Ap[Uma5.%NRS"2G-r_"'bY:fgaI=:3HrTd@hFl>o)oD<V/G[p4(
%F0kjno@_%+MlRZ'M$q#)<(:Fs2[)p%9'K-79\l=4/\g.'EV]Ff=&*#Wh7JAjes"iEB5P+FX,^,UkS#@`:]:fkU/.FQ-IcOl.Ja1)
%oU03U.Ja1)`;>U$VW\[Ae;A\p1.A?o^"-DAZ.jtCEp7&oOMg,fpsMDbrae)WcfW@?^FX$]B:dk-=jBj1h<`aC=jGCE]^j)cB8g+l
%+;_rJ\"5jqYjh/V6>8@7h-RLm:Yr%e]mnTSqhO([?5=?YR1!BHbpUKSq=@\RNG'udF7[42s8=l1Xh=3'rgd<_Vl;84]T?b>3DJU)
%k46pVrLS\5VdG\J1-J]qkiWV'cSS&^(Jg5=7d-eEQ_fDt=0K%SOec%Ila[0LCV-BWB#a;+o#>10buTTGb0YsA_jVhDlK\rFBPoC4
%[+/m5VJ_f.U&Iab_i7gA@!9qFHeVNeR85$Pg?B[c"YZuS*e=pnr_LsA8iMV/2`g?S5X3iDqXk6Rc(N''<$4ak([(AsD_DZMPh=)E
%5cnoWTc)XW^&$b/:?&]gcQm)hUq/ZT>J#M(QQOHX]tM$55>FA@2YOV<O(LUh='4o?]V_.sb.`m)Kq2=M4jeKh*tNTCh64AgSh0=d
%Mk;s)``Q>)Fa9bD7%LHP'n&j,'.5D<^7(UkhrjmLYeNqLDP$99Eg`I3@C^<8Vbcca2Ih-+mA[05Jj,3!nR1D=q5*)pq%m)-dIfqu
%Oqs!%%&1:?Ak0\@I_>dDHhf0*X>dokK0KlZ(JI#DZd"Yrf//a1]BHhT4#kAhp%^94OY2##mC[8gch?s;5$Rr.'YbY?=@]]70!mOq
%`Er'uDZY@0Gn\c#ImBZ/hM9BScT\!IblLSpq,=Ci\@hP,HeWfpf<aebcCqla3OAI&16$2]>TUe>43X,K<,J.BD'[o_)uqD6MbkY=
%Ql@s'(^%--l>uQP*2=BZ@Gbj_A((t$)6*Q/+X`s-7k0pSKS=M;hf#1'JI>UEl6OSunGslTY[\(aT,BN+inV'<I%O'GW-FRdm;QPT
%"0l!6gh2Rc:Lp_a=7Vc-a66Ysrtq:]:8Aj"5q:5'os&a@e64\W"&(H>Ej@Fd(q\IF62JJf(L8(,T'Y=??RN#5=R16MH+s12WGfcO
%]BQlNYHIW1L%-j6e@Lsd-9s.VlQ9X$Lf\3!KdH;X6f%_&afn2/:&c'mW!hi;5RjSbYRibh,l064\N'B<D>B+!eeW@d]h>'_)8H\-
%5e:[iDMD@Xj<Ro&g)Up9>\@ENk[Do7:;i,:o'@=)VG,_:e"C[e&=%<6=]^'WrbPg+^3'DHk/5C*So<tP.LLOV<kQ,Rp?pu6Ii(l4
%292\f7mhJ^d.YS_WZ,5$EoZi'$d"cWBBNLI6D&^0Ec8BM/ERk4Wc,ZKonfM544I;!'g/0b"-`QgS34uL5h*.9CKJh?=p'pKD-0rh
%?XNccdGhaE:`u!(]ah5I\ohlE;sdMS>CTa:h%[?3d4T=KprGA4D3ONQeWeDYGk(7bDl33Ud]%#SRYnUiFgY:hSnKVJhJQE_'kOI$
%FPUgPs$-`UXYs.ZZO,[#;<-Y:]NIKN[p=-f>L5@_.dh1pDrAjs\\^-jFEW@JXor,"LgG)qcE\(PYUGt!cVjmjAGK-'k'HbjZ$blR
%(JojA$S>GY(5mTaZYRX1Rm5@SIbLpCg(X1gcn<Am1mAh*a'-Y;^THlbjKS0Or]32gaIZf3\a.eZ]"5J`Ed$X)qR$hMB6(iEVm`j%
%]!aVBpW^g_C$=53h^Y8Q15`i]U\/Yk8*^&Jj^bKCs4#]q2m:KJ:G6Oi7D43<0%JRDSCdX^7K2P(k5[?<npJ4-kE&@'q&mF9>u%SQ
%H"$8>YIdi$p[7D0S!S0kg^cj>&$KW'2d.O&mB*"Y];tbu2'/K0EVH+)U;am>G+,UP'4:O&hli$QC00>&HtW%H+1d/U\'l)lrJr%f
%:AFd4F+3Q*q==((M-HHfDk4&=E9WcL^IiSGl9^#\'/$n-M:5)/\%_f*leqf^f"k^4Mo+N_^ZV)GD]d[s:B@('d"@nHIt$mLnE.m=
%a3WX\^AIAi]rAd5[/SCms6sr0:Kpmp]+F%i!9h]%;h*'_l"N4<I1ofMS)r26hs6oDIt.IsmG6WK:S/lul)gG9Y,tKlS(=LpaOB=M
%B4Xj#NBAhCR\RLf%;,HKl7Xs,MLV5s(FHE`"$b\Z5:4VYs*OSP&=[''ru8^YQ_46hfRHV"1OX'8`@EbC@7pND?cK(XR9m0B'V-)A
%H<Tac;M[K/RgJ/(lkG/1!:[As5jq?qn%7og!S3a7@uCE&lCE.2e$JL,T0%7HBD_G8D]a1IcCK=Qq8;YsBl@UeIJ_@&h9R2*VO&D&
%hY[6<j1s,ZhtOkPlok:8+7ca4Djc#Cen=HdqsaF-YO9jEJ)gP&5MnZG+7q)G:ig]5HHR;4U/h+=4]>$-?i0PDi/qg456(W[DYN"[
%G9?P8IJZ1T(:f9n*e.[G2mbR*H[0dd86<NT+#:Ian(V4Klgq<N6]OAK3os@D>Ifc<1$nM_f$<H>T7.jh)tG@+=#dmMqb0]Igs4c_
%r3WU#]5%3#dnGSiml*K2BBR+/GPL+PGC/emrlT<LH+@k5Xd?KQIJ^7\ZZl<&f:@<omNm71q#='dE8Gi5D4S6hlCsF`b,VVXQQNl@
%aq>7-9TB(@._8MKElWKAb=KK`:#0eXXJTijSS3EXH7,W<nRW_oMAMg[JXd\:0nh3VA(dhK2'#%3e?51)#@gVse([fN\[#/b7@7C2
%0WR7W%n3D!URb^@?)Oi7+k0>CM)aUndWTBKpQfV53\K@:c#^$943#<%%9CSYY4S:-bPYP9>`otI>if7_el%'%'XmGT>b7(s<-?So
%+l7<`fl>lZBnlp$K9+1967MfkN(bj+f:&m!6+5)C^+6G9=5CnHq05o+h4Y$3FcF=H:Wu<Z&'I8h[?2c(:5C&qS;X_-r(Mnq/"E:`
%9rN#SZI71?`673BhdU6LG026)OT1bQ:N-W]DQ9F^&Kk"%)p!NW;d;ZTZ.Q$j@GLG21).-f7>P7mZ7')r\'N5V94(I"3P2<,Mr&Ym
%H!ZL[\B+D2VmP#N=*;QNr19rM[IM4X?$Ba(ghb+&GY2e@**mN.;gsTm`)Hp+9]6YR<#logkH*T0?"%L!$dg@VI@4qh"T@H#W_R,"
%k^r;A`%_Ni2F(E/>Ru,-ak"V*E),pocE"l(f`qKE`#pk$Q27eJG6:#^#U:m,%W8k-fCar2\>jZAR`s/>cU07sFhE6uNfef@j=h_s
%Fc>*HcRXinG!fdTOWZ]iG/!]mJU4JAR#jiAX7S)=_&HI0l!4@CClohT[PsWn]-`GXV<mJ5]/Br6LsZP:=17e1Cn:noZ2Fthh'bMK
%R;<C:LWVtRV7%VtZ)((Dl((^%>8c7p.LK"t$o=);"\gL5U*q,#'s0d]Q>.;aJ36q"-KB44[?I'gKTTCN+dQX\K>Cm8g73OY+;$D,
%;Icc#Wt\r9Cj*<?"c'9dg+FWA+Jd"7#PQkR-g[.-Mpcg#]*T=5o<"@]CgU$Xb7@Q,Jk4#%?"l<[16h%i"=UliM;e#T&^LXY*@mCH
%3mqM(o"s$ODjhf&^+6D._+&=!nMLlr$,ZLg#A(D1S<;,4dGj.dZ@amH)g,?8#e-q?_#W#ZSsCBRTHbFMenM%m2faF0@6#MV$PR8Y
%<CNTSosj1*M?.P3R],Z]TEmHhB*;4DMu\`sCjApuaAQOk,6T(b*TY.m%#(&sGU5=Ia;NRG4q-RUM3'?F>6Eihh>qHH::FHK<U"a^
%9*a<#&=JC8N>7[8Kj^A^l6V)l\188h2L;KlYjM!6[acjSrQ5Rj8fk7!\o:MB`<;l(ZB>KfN#`C*p]-U\b3#jHi;o9\\e`"^Ea&\Y
%S=I?qZuW$7f=DZf$ljILh*]#+Mi.k62geK2-C>,O/$)Vl73uRSM".0!Thl-&aQ7@A\4t2.EqATb:).oGa2SFke\\37&fqG$.!Z>W
%;hhYK%tp9F#ot=,p[=0+e43Gee^LjGdncUo!0#^55Umm0eR5#H&;h'F!-57c5CiIM`q-sQ&E!F4SH7;)^ta^d!,JCG"2_ndO^bie
%;$d._m#;a&0iZOr'.!,[8?E-/YlIX%OA1qRR7](C^Dl:c$#,V9NT./r>,+2[csI>L:l-B].3U6f0\%?hK1YWj(J8+F8/P6D35Hq'
%rA^!hLR/a!1Vnat@3Jr;&(/XSMI7bg=:B(R&IX;K6s&K^-5QiD"dTHq081[?i4g$T+(Xn^#8H1G8d,LMZM5Z)#_8YX$%a**Lb6E]
%6R,;4*KrSG84S(W0UZjdTMi'/+AtJ-WfV-aN0);Ap_ZRN0Et`pjKSD]!KJ]I65Egl6\N$E'5UZ:$>C]d5tI1]6tR0%!(p:";.*E[
%)-geLU!)_Tm$NT%J3\4efg&-aY,[/V&sW;s_6D)?fL2C@@#i:>LAu+7^cEU0S-q5OmsqKs$a1"9$s+R?6M1m3$Up!U>g`GeGfbj5
%%:B<pWD&+G5DU%6\:AskK@a0J]O36qJ5?XP,#A9(\`hnm&o&g3Ngi]+;XYVo:&/B()Zf=>(*VI/L5PP=fl,[mkF?@0M$mYS2anr'
%U07)u=:4;Ub9trF6[:?^4FdT<PQY>!^o+aZI.f$1JO8?l,"0C&K`dmK/)tuQ,*<Ju+`NW36igtEEX>@3o^Z?:2fuV2?'[Q)gL32T
%=u6[K?762YE'1-cAf%@t&<2L$7%+U>r%Yu270uB'\ec^;V7ECkOfN^m;NJ/*TLsfj,51lt+L2e_3eLSYn]JEn>S:cW(5FB7@L<;2
%8I&uS1'N>Q;h7#g>ckA/[$T2e2,]*F3B%<l:ui'K&'-4d%SJu69VRu)2YC,p`6C\h=[?aF5L[;moJgdf@G+<uPo^:/<@XIaG"P+s
%#ZTcm/.mt961ZM2/:g^77F?O\"]<FrUcTn>MG0.#PODM5Z3>I6RMbA5Iatr#gG,Wn%oK]h.c^\Xqg`EG7/\c17>bg<?NCss@[oOf
%)NEF%2dkN3;\p_rCNC'^"SZI*,(3;GK3hGsO(:7B0Bq<9[3O/U''cPl<7&U=MGet@Pt8u(."WE/15Gq;=M\.6=glHuYSLYP5b\O9
%UCbNt>Rj;3c%F:L@5*e;\t]S6&4C[;brT&OS;Ph%6R#?2V*$YEKW/ZO_=7g2-;#,MU^4ac_'g^^-A0eL5Y:8@G!lsS.KGTalqee^
%('H&6<MMtg&ZVMsaP%d*7X7#8eHSmS@&oGT"^]Dn])T^6D\KZLkJU-:4@/2G-H/R?Juhl47M>q_Z"A9pd/FW#F_F&Q&BH/kA[/W-
%6P+f:j;D?_$rnVH>Y(-M>Y1>SU_m,/qVP&#MPMii_o]<A($[&JL?JY2Jp3rrPr^^CH%m32(HO6:*kE+!1CA[I4^M`'je6*2TQDJI
%3?80i&la3.R^<YZS#d%sn)o8nDVCOa9\"0`+L%uhAPg%r9aZknX>3?6>'i@c65j$&Z]^#<isH^*lj^V-&l"%BA:V?KD6du*d=$%Z
%f^$/k*W^-*<<d!i$Y'i=Op2e[$UTF6K/2.Kll26t.amjc"h?4l`tGJfU4lEWTh$',US`]V%7/55oRiZ*QJclYE_fZB-3Q@0,^*De
%E@!U'J>EMkdgdQHmPpKpg<$-uiKH?/,nVarHYbi(JHY.8@;k9tOJpV\/\pIl6eSe@IRDV9]"9&K,qUYgH-:qYXj[3bXb0kgA?mnp
%<E>)70KP);2(atX']Eb"K/N?7$\=HU!U2?^OoL(u-f[f*I23_loAG08lV(#gOb'6'q`HUd+d#pD\an7*mhp[#0.8[0oN56"Kimif
%mRcAl<Pdt$fdJJb/HjEpGO=N&)IldS-7`mu[`.p%rXrrk<W7aF6e1oh[Ri]C=<d)('*%l;Zep&4HmYsk2LYj*N4,bIMW!85PrBMP
%[6t(%[,%k2+%"@kf?bJgB3k9gp")<CoOWP\,0EDY$R+L?`^.*Gg_:s$c*K_;r:I*?TrWDa6=9iN3M5MJKL!Gu=$b]?e/;]*%=HZL
%'[[)l9$E6=7Ag<sFl@:/jW]d7%poN_#bf1;@1bU@B(8u$]WPcb6"GB_CnW\n.Oml[!O/kE45_r4krH1WhO6?Tg/D\Cg[\)F'^\0r
%.PcEta&cLklr#-/nhs/i<QN2((-&;eg]B@CJoc_d;!SnHZ1'f^)Z34B*aumcFHohg3MR3&i[%7i;&'L-T">=B@?[^GZ%S&I=[eD\
%Zn9*[UrG8_"jdlu%&s[m+AP(gCu=G?B]2+iVZR3XV%$^0(pBhbgEq0IT+96$\XP?];Fand6rS-A+7=n<)a$BtL@10P82\_#SeJZC
%eh*bNVNu9SK3,%,9M(FUJ8#iZ(U"X;lPN%-6o([l'1.D)l];iY%euJ\"`*m1q+3F)W,i`B/_26fP<Adq0b)<sFZ%KAeo)/fYlrL7
%HbME9>AEW!J!BAg:<?_-R[hh+.+4PZ8N9<CiD.1IHDm"1a*PV(dY9&M3_F),7+58KZsTQf$!p`Qas`-&"<QbOn,Q:Fn2pd2KU+I)
%Ja)K,p_g8KlVY/*\R*p$5eq_S:d$=q?LNKN2'jP/fVH'31=8o0'elBaF2K29nm4tQ058pdX[VYGV<\gJ;^kBCBu1(_DS'P:QXG@\
%.>6>GQ).*i(XSRo$3IOYk.lMBQW&oC2N7RcAL86[9<9$D/""NgX&hoH1sg<[$=/gb3_=)p</O(E-b@ZV!kiC'h()tJnjH]]LISHf
%4Gd'/[Vj^V5Eq;[.OdJ,d%"@Y]'#=r;-;aVo/'&GR><#P/J'93IS0NU*X&F97D'D@#ki2LCE,nX%^'u79f&$HL;M6bjcLuQX+XH^
%@-"TA@8TG+\>"Vq`\J`BP46p9`(ErY"XE,(U]nV*D:3PWXO!A%igi!0:i\gXRVOIF\ioPk/dpeiA*a%NoY<jH6<PT*NG)K%,@Cc(
%\#GINqUDA.BQa^!AZ>;P<6<6)o>NdFb=$@ufS374UC5i%>*P"pNu$Cpi2]PR"X\g6YoG0%<*0mZ#drYU8/A@g/2kj#">aLu]o"<3
%gF>&iMKopVOi6]"eKof'9^WEndS8i$LY\?*hE*%]=-,92d4="5gA!S:K'H(]hkaAYbb&S_/#Zu9.9&[8^eqUc%J^SB+U$[L?JFb%
%2'jnho:WCcZ;%3"TGEf-5r4XT@oq'dTi%0`,b\NW7E.okIm]nRY+Mt9!]@JfIImgiT&L[6`7IiqAT0Ya`-,T.!/>Hri]msP*p+S[
%=;3*,Q^%Hcifj-ZD3%?^@&rcA;`(W^"Q?.1\fiXRN&=Z/n&ugU)kqeio![gM-mcdt_KFq[KWcZSX2];HKbX#".N.J;+Y_;cM,3^1
%f8('T5)@kXU/(hm0Lb[;W<U=)nKmuT#b"KBUa?+f.Tl73BPqe6Vg">;2X>EW_Xc4!Kqk:jk;-ZM"?o[t&g@'[)X%f,kSU@%-</n.
%/W^7)710"W69STBR$E%e%8XKcPV=)O'j:UF#fD*r\"9m&FTOltL/PpsY=O\,/sR!U0jiVF:m+nt^/AJ'V0X=Gh'um[jlF)^iZd74
%XSZD@TN`f@C/p!"Wh^=2#&?[%IN7bgN(;5f6p73Cn6tUcfMXL^9U-YK%kFNi$D`HNd_Z$>+)4FbZ;VPp<<0p$+Z?:G\5q9LaRh<M
%</A:dJlHt;NU/4!UPA:E/u]S@U39671*F(-.Zr*%_C#;%!PTTp+r2Y!]0K[G_R/7d>4EXSKX.SB9eLRI?buR$@F>2$-udInmc?iq
%"#Vaq.?qThZQ^4>KGX1eD?1q"<7iid]M((&g]BrN#RKu%Ca1g=GWoCUKHUL_.%%.ZQ$X2&9S'l5nhptodIo9=%l.>-=9qb]@l,H$
%?n::u&@YnA--K3%A$Aa2qDpe3>`jGL`90IFL!)k0o]_a&AME?lBF"TO::r,(Cpr`?KItP#6A<!OJ#L@=+Y!UQ6^7eJer$P<KMV0X
%!oZ'4.ng4+Hr:Ma,GICjQmh4Bl<i??YSHU:CeW_5rFt8m&[_i+O$ObQUT5YpdM<7-F0<:hU94P(%97]kdLb!V`'_>$V[P;qA.HMq
%f4:uh2)NT$\#V!OpGt<@+!=+"=rK][SOf('J7!TCXDjqu=pQ"a\!B,Y?RVo'Ea,72(6IYc#e.*:U'qT4^n@UVI$t0m,+qE8p,&!Q
%6u'hWGSSg8;&0n])X2>(7TteMP3G9p!;a\$Se(<r((;;fl,R'DoG+s9d5I)48r=t$TgI5i@gJd-Bks#S,K0u5P-/j$Q18BWU[YYu
%KK^.UmRsa\*@4sb^M@*&YasVl&WJs^+XWQn>N)S`Y,lMZs7q!@qsS`RFs%XphhZ'$L(cg`71FcdfCbri,k[j_L!W^/5mS1#5D>L>
%hIp;]L`(#/K8RdbccCKHUBV]9iX,]PHHEYVi%-ME"HmhfPqZCh,P28&C.qCNdo:DoE\_H#%n?aF%e!&8Dl>J.R6dU9O1!]JBOri*
%E#"a?9-@Ss?^tct60(-36Hk6HM_BH5,Jb;XiKj$<d)Td6S:#(%b"_Bp"fZV,61mZ&(YYUGD7[<9R#F92E`T`K65&A*n/k&Sm%Rda
%_gClTej^erHjESem't,Ylk,IA1+F-.0<^S.4Z(lCW$2(EZT=c/b/;"3S*ZKpEMB=&S/[Hj9*c\;i>@=n6;uP*0F"6C8f4rTkn,X:
%9s/(VM(hD!!>.Y_EWqFdD*hKRf/"naAFf[`Y)#dH\K&'+_cVS-nPu,aN5sm$2-(qEm(r8pW,ig0M<\Llm505;I7M3^gk]Xl+lHUM
%$0<>(,t8nsQ6uh>(&#=X<EX&>.*,ujadrgj;oH^=S8\s=$SVo)hM'Zb)TK=iC8[!:P6%eY>OO&+Z7+S<"Uu904FdUlK3C?J1SS5a
%5^4po-d;ZDr0?Lrb$J%H7Ot[KY*-V#8;4OkRYXLjTY`Ak[ud,i1U1COWD*k.E2;2r@"b^]mT4L)qhK]%Lf[n>WtHRFJ2hjm4=1(&
%(8<+'_9^9%(oPO&$NIN0>;TA!?#F3TW?/Ed9E7i.a9.%'^Ij&"-+qnX60ZP2Z0@:,fILLPWg_'q1_NYh+fV?]f=2coX!T>EKMJ*C
%[%*!`q#Nl&ak\9k84Ns^"GrrEh+)9QZGFWq77FK()@T?m:eq0J'W_X=18#SOK>7pmSNM)4/NiFL^'_th<,)]&5Tg3i3,oM+*[7t1
%h+LpqTdXB*BtBFfMbo88(m>A'8oFck#TtGqX=;_c[.a&-.$DD_5U/@W!43YLlETo6^+dp/L.2J"NuIK3b@s5_<4icNZ;bcP,q:A(
%9RS%;ZB=2iCqES[m2Q$rRrT6h5.FiCqf%(B]OUU=LrrfG5Um!Qp!?56';pXYpSpoNME31^_Tl_%FKQg\Oq1\T0)8ol<?:#ZXrpV2
%`-0+A*#0YHi/XO;)ek0re9O1Z>fFW&\:SEk`j\,0TiIedpG30-LhkuF_Bctb(p\pXO&N8F8fZCnrIF'87cp\3rud84a]4E8<D\<`
%M96"iNNWt+UcqGp$!,0L,%&5)8HVOURg!sH(-G',iTTNs"+BcAot)NIX]1/s_BBK]`t05P:7Nq"p5$Xg;:Zui!`i-P#!bZLS>2a.
%@ot-ae#J7TPp'[[Li-*7o:\]a#48p2=Kji3KWeMSp70,f#dtJp6.OI<qL?F4"":WCW!SZjK;/(]G[+`8d!WQ2eB.`CC_$tiX't):
%E#-d(5<`3>%LICkFe-84E6rAl_H4^q)[aD@,Y4I@:U:%L<1ih;%Ic?^n*j1d9CVPjkH;u[@j:i4nR.+"9u)>2[8(!n2"qAK%bkPk
%9'JTGC8g^8Fm\s3Ab(JM!<KC1@95`Y>M`d1$gB08bG*HUUm[<Q[8WGtJ92uHj+0&JaUOX"H=I]U&hLSU.TfjgPk6*nOm$@S?q?#q
%%FYL%Rr%]J+9o]O0-f=:j@T2'\I9=*RUEOTFRKJB-KdETIkMa[804LepU^k+1710f0!2i)g+TK)'iB+L%LNTcd8<j\rFp;oYLb\p
%;9P3:U-XbG$99GglB];e]OSH`+eN2>W>n`3?2cg3;h0_Gj;M.R]In:QYH[T>)'i*I5/8YFfG6U[L"0HF:ZZGU^ifA?`2X9Gi?ucT
%DVc)?/R@s[_2o4lJp%ku^Slj4dqio-jqK3EdjNXq#ub2I+09:=XS]S_O/s4a?6KHoLH<87Vic72^;r"_9pc8YHKp)>p8mV+1aQ2q
%4K#A!Xn/M?oE1t.gG[9R1o1DRY7"4VfZg!XMole5Y[Dc@Z^o1>nY,BA.%!<fHXWSuh%Rs$9EKC?Ds&6npp)"(Sb5A,Y%%-&>2a<*
%Aa_W<E7YjLkfYt?6c$FZ[K?FefMs166gD:nV6<r+'l73#.1428#6,Qo+<VaEqUM6"neB24'hhXV0YK9ERpnZ_l`p]SlYoPJc1Ro6
%_IOZoAVAUG/$P\4FC+R+6?J_tlY`R*aTR1)3bDeLR%=i/=ReMQW&u#jpgulZU3':"0R]'B8f^ha6$DLO`XTI&qgJgo-:N\X^kO6?
%HIEFd>r4Atd)k[JYr67E&6pInR$bY6drZaibR1?aUbQls9):!P<>Xg\*E#G;AMT`q%ui]0ak*St*4Om!obAj/`,EQL'-"[)_\AK!
%%BFH96R"XP2I$EL-],]Y.c529L=X/Sgn98DaiQ0s7jTj[H8$.W=)$/t"BS22W_1aA]P_^Gjm>T'@FAJ6d/dDf[8n[N+l3,a1E7&^
%VWUQUoRTuk<)C[4MUeB`,c<=36"$P6PDgf?,RRXU';Y0],=eN7=nmnSFp-snAi:?H!/i0K&5DLO;FV>8'V#8B]ZjP!@1FZd6E4OY
%0q2al6Kdp:'oXXkkZQ&+VFD'3Q\d=:$'stboT=e8eu7eo]S$Djh$b.R1(U#g<SrO/Q)SPpiu!BUbLiOIB#':kjXJlA4S>(0%gA.M
%'kQ^f#7>6sFdWk`Xn;9A"lLghjDZ<0O$'@'L4IjB#s8)[3BjIaQqgM75t<7D=pPgETR"u1YHVP/"'B&\#kn,+OOlNlqquTMU#G-0
%(Ra9/&YY3/D_jaaI9OmCYSI`QTUChbo7eL91c*Pc6)<\U,4D>$Hm,`PMi_BCNdBGoW3E"p#*l$O]d>LZf4bA!ho*3QVohp>;]bR"
%:=C>EQ3(Elqa"XFja(%d-FV#hmsU(6,`LLb0Q6Nb0f_p7pZWS/XJHG(DBVqYd>@Y,VL9l6j`iU(1i6=1Q9bU:gHu]F<(62KfK:Nr
%G']_4fBGXkblAO3%q7^kdI;b)R-0lF-8o`M`_@tN_u_Us@4P$8Q[P9S!W\.H6m,6\C6F/h:C%XoM[Z=:VUR@Y:+32WhQCAN7Kp]!
%&Ug;Y=G1Cq-(Guu(8T'?pj/S@1I5lG64fC0&8!bX%Ok.eiQUW<QYlH;&^3U0-:O1+T$reLPg?NUA5)*obC#OLV0sWWnE^H[rY@bL
%1VU@g#(UUs_9WGuAVu6-$76\0)/pe&!G2317b<arg_FsX>GIQ"Q:Dph]ea\_q?'>janE&-KM.14r2;p1NtC#6dRBY<:SGhucXk^.
%7&lj-AX88["0CWb6%g:!XgDkC0]_HPE_u%#WAG;0meW)Y\fsS+,;>bn6GqALXt+G13pB>0$rKd05f+QP#)4kp;"%m@!An=*9di98
%_8[<c!dWB%.HBmH/dlH_=XIXPnl-+^26&n2j37ONM?$[*ht:.RTF^+iW_JSH0b1Xs6VsBkP#14<=1(I"qreqiZk6?Co9l-rYm+p=
%IF8XCK_\oC@X4?=Rjg.U#aXST,p:XVWmqWk_Q*J*@B4-RBLYH7X/qG[.(pi9X-*"Qn*s]M?RALga^^u@=7f<t&h1ZmZfIp02)I4l
%8gBLQ8sWV(AXs0ZW*ZNd.Rbp4FX""gI609Tjpt:37]8\GQ;=f;X&:8STqI4'/^)AtWlVt.(0&@bJU[)gkhk'2TV6G$\Cc108R=-n
%/kf*,a?2l)#4$$AZRf:#HgQb]KuG7b's\p@_SI+%6_R9dC1+2r."[+OJjhu>aH#O8B'H=-L^0[6C_gR2dTpDH%md$@F$uFP)Yq44
%VcgHG8mOI]C$_XIP%0=m:_qsRb4-jtH6c%`\08J^"pquGaK.>Br+R"7"A!")!*KJ^:2)N*26Sb=<1t3_@$?&:+=3'tmt.3;O9MV9
%:9@)OKd-\!Qhe78&9ugZirD^*\Ym1pO3"8EOB\cE`$ZgI8J>F::A?H$?p6qp8i!as^WURMa;:]]$HfnB9]0L="a)nAC/9GCfTo+j
%-`H\%eZp>P5-kNW%VY*$TMe'I[S7mYb6flt,O-&HgSX1lmW9/[n9O3_PgMs6'jFLddOjkf<E9(2M#8r@X-E;_QXWo/'GtT4QtZOm
%\chTfD-i_J1]SqRUOd++'a5oS'X3cZ"+rX%ZS;Y,BQe@*a*bDJ-05SE+Ptig'VOmV;4@`b%\X9hRmQVGbA.8W$Y>L_'uDO,s"3h)
%ZI6]ob)D=5&u9fsD,;WIm!fg/C$GoF(unTp,(Z,ZB/T-)JW_8aW-))J8rsGZO<iTR^+/auT,Hr87(Anlm<Q0S1pSqOL^(+T!Gi2Z
%(*7_gbGso3#YOjDAi@/5&`S%4[J#ikM94l,h._Ck*<9f0B@"19Z>*k7g^p6O[,lDf&`M6af%VHb+945t>q#E>:.WhAWg^-F,f7It
%T-Qq!>Z("'PpR#395mId6XHld`LQu<<RHC"`#+Fs:bkJ9]>o,$UK-HW>=(?p]53T'\qJ"Z3q%U@Q>GWA'm8>a&l^a?SjC?bq\BXW
%/X$DVhY?6U)!KcEft5TB>fOlEDRgg?$`ItL]uQ*^)3\>!J\$Mg+MM'V)D#/@JI%+DGu0.N;9#D?Ukos5O3V997Caa1N=D-mQYA9F
%pY?fJcOJ*M6c!588Cbr4?u9k_8H,qu\0SuT]-Y\$=c+B.=#gGn/*e>*]TKcCZH[S*-^,PQ.UOo&+j5M,fMn=]o5J^b!*XU6fY@T@
%)RgS1db:YDgBI+QfCI26mYObr_I^&AAGH.CY@rp2qlUfq7H@'OZh>dIcqgZX9Sp;F*/aV.NEUkfI5hm74sG,J$p#DieKKgh=4Djc
%EtPKCACaU.98WjMX0Z\F%p/Aq!2Y6UGN]=Ea#ZS''2%5a/97YV\4IN'>QrTH):\s$6%u:A/W%),7l]WK1*.q+Gd?&$)+*nhSluk4
%78)r+#V-<9KqpG/E-LL_a#_6cKj=ZtaR]Ir@82dI2F6`WTg\A^$Ot_u1GM5@&/Q`c>#>Q6c6tm7E_&-J43H>If4$U1<r4<rgs-2$
%1KqDt8ccU;ePBUi<J(FskS;=m7g'ef3'?6/8r^)fos>ksen_8cC;qjFj@sf?MPEN8B_e6j(08?&d`@*-MO,@VE54anIXqQ^Lbc5?
%6_t!p.]J'J+\)VbV#uA\h$E1)gki,s`mE`G%YX%%R-->d3s68"W`/GD<%^r,cCh^j('2%3$&b%8<5B<q&o8uo>%SjAKp#pL_'HV&
%*^Iip:q%\TiV/o0gA`nd(+:UT@M8lUKTj9SVeDF>&]s_]C/K&.CIC9K&[,d`l2O+5T<b4:U,?&.:mbt5\?cgQ$jJ^;/lfLiTiO$T
%4pT*,Gn*A^Y@Titg,%7c0Otko@<p+T1&&3MFXgpT<)kLi,3PoT$lj$2()ku#nplLcm'39*"XhG\!Uc*pQ]?cZQ0S[EKmpY7Jt]Jr
%6KK=)3\\FUP%2\F7B7L>#SL\k)ji)d.DXbj5gWf&K$McgfMP/948Ae0F0pJI8nMEQEtf?;^F&9YQ6QZ=Gq&:8LaZ]$Su.EVGPE<$
%bL7dflpD^O6`H3KKC*0V:mY(&,)XYi-kH]N][tOR=>+D]]>c!^,[d*Hdt4S+YW/q9(K5rlWq.]5%Z#m4WB."&'U.HAY'Cj_E\OhG
%:e":L9$e\1Oo:I?U.U]>\tCnrP[jhcN!SdL["'JJOdOPtI:L?=oo>luTt3f9WY7I,A5&pY8]tg33MP\2cFfk]>9h1_VM&O>,gF&%
%/c/2>Kc&$E(RE`?[M2A(CUTJ2;RR8PACgBXS7\l'b)/KY8@E>bQrd!YYj&+m>m0U_7h<tWJjnTRZhg\$d))Q8,N9aq':9YpNsLSG
%<>D;Q(n)@9.(N^g-oRrG73@[f?H&.g$;dMZYj.PNJA"_Z><I4t=X]rfO[p[d;.InU0+8lX:0Z!4>mBj(9e^`NHO,HO4C'"m:ZoZ:
%B5@><$<JOXH7K#;U^&kW7k<f]0cqp.4cV!RE&'/"UL^*p->4U[dF3-h5d^e!$Af&t1$OWa6VJM;R3h3?9rK'k(U@$)F*P#,;T5Ib
%MoPSDKqX$lbAQ8SfHkkM@E^&Kj_Qb%#gp8kCmFMXUl%p/fN:"0TI-X[L^;L^=FdC,U^`6Nl+ko_?pqrM+E4Y'%#:u;;l$<p8?hl@
%-q_f9lh+g#[H]$i[2uF-@!CBLj:fCHe-.!=4spj75h0&n![2EkkSXks0Ic&_P(Ap\=eW;;7!AVHXgsl`+CCGjcR*<r!V[^h7DWp;
%A;[<ZZ45^p>]rW2/-I1?9=jh)TTK'<)8K4G$8p"r<%4%`6YL>YksjLLJsK0n=;jKV!o`:mTeR*)-j8fbAT6"pL%T6$3\$rP<Eu8C
%G#"e#6BN3[-[6#`X&nqDW6FtLl_BaXk=3i$dChYp[qtqk2PV:u-s8$X?c$'B<GPtIUFiO'"Dl4KTr`1TK8!u3K<)_V'$#BC]<b0N
%d"&OEE$J5A:!;Lg5-J%c)%9(SX+OGGQZlS`N1nDi\<(O-iB<.s;qd27l8khq5b4QH'=BtTj*X\tPUKk27"35td"+&m&)E'Eo<XK$
%/\CX(:7t(j*J1T,s2^@6M30hWhGj+K:a`SXB"nVccZ7ZlL<-#qRA!bNQs1S&cB)O-T@n]^=b0&YYd*=^#-)B'.0JTSRiTl8Y*J6K
%aT48Aehlof2+!!)=R@_lGUl6JG,I@1TXER7-0MT6$b=G5q%kV-P[IG7aihM6ODBRa=DGh7#+3l+Mph>_gCSK1plbCbR*)Wg%_8sW
%Q82DpHL_O2\,g61_TXt]\PpR5X&I[e9sbK2;03a'+Gj5OEH1"f1heBt4Z295Q@R<pD"J<AKDJfs#cOC]59,RZC3kblAb0CG?Z:TC
%9UF&6@?c4MdQ+qtR+b9m6V]/=?trP+i_^jNq;?[lXJ+4Nl%n8^0_r#1)TEf*MUITM>"_;=O*[,snrPB!$M:%q&s:klU'5I5Od5sa
%C]hRJ[t\\ce)o7c(CmuYoroGg#'P(o32Ijt4G=24PZ=EV)>QYN,WBO`:>8,PG&sm/6b7#&:>A4n/n=!^e1@1;]-p3NBOMs7>0BbQ
%X.WJ3,rE)eb<ZuSQ4#Kf60/5LW%1=l<)CRrg-M`<K@_5RM$:kkqm.CR5ZnR.D9o(/R-5]hn]?T$Y;@g7nUQMJN%iZf7N]3[Ci>b`
%XE.:g.&8/i/PdjcgrW;\XgDIRZ?_l_6I%L^s'T*[fF`L)D\rr,=NWE(3=4SU)?F=;74oG4bZk.]0Er:3[WOus,hs;Gmtp`UZKu;J
%W2NFpn&_4bMG#@M\rY;gcsjEM8-OR@S1[L`4_+q^@8O$#%"A)HBSA_1Jrub:'OI10oNH!tTV'a2oVegP$DhG;#:1GL,cj1_IT'83
%We,7#SBClqhEhdSC/n5pZ&LeY?WEnD>2^)>\6pkk^f$Jl5uDT5COsj0X,;Kt:]o>AF^5$>eG:=U54kIZ$?aTJ&=Ua<crA([c763;
%2\hhj:k45*Jk?=q?L\f*!='S7^#Vnq)TZbF1jbnAen9`?)'FZ#keNu4:43836u@#EMP6k(BU]I#ZI4SaRUf=C>cCh%V'8K%[oE(?
%JpK?NdLd&7hAYco*F_p:MMTNMC.+(nqth:7QHHJsbtp3ZE1+qV$mYAr1'#!8S>PYH6W$BC2B=:B0is!0>;OJ.,>e=DYXk@2QrR(U
%.V>q#.3oh;!4tX-b>B^=jF0em9a6-g2^]BWOs3OI>n.`@e>@C$A5a8IN'C<8K(Ofie"HLo#$R_(fE<X:a!oe^de"^G[sd<i!&4@M
%CZK]<&;"#L)MJ;^7fj@B)$Ys50k$p$pg"r`b"NskTV*8Bj*(&t/qd3F<Aqr=3^+&2B_b$*[in_Lbo`LYe6W04QAu#:CO;JG)c^#?
%Vf;doGbX'H=QJdSB[s$s+bV\fo#r^N)(36+fK<p).Ke)5ej`O@6T2JO#PKt7nCEW-<>7cZ]Jdb3P+i`Of2OE(eD^]IC>7H3R8iI;
%[XkC>'GF4.8Xm`]#9A\XZ3!`A9k:IXpKMFIX&_>NeE_]lcBM`Hmt,+c+`LZ+TI2#T-dat!/if`+C>9e1e8;'K>Y0VLRtk/<S,F.&
%WFMG$d=Pep[7tTLb@<.";Tk\!"=pV)=oemCe^B<N0Qi>+_9Q$^(+9NkC/1%?5mlBpdj43VX6E_Vi7qG"1F\jb3=kqJgC&7;HJl@%
%Z=[Ld+@WT&0W@^e:8:J]B1hc[;[$2sY>dlU<o=NcmZ:T&WQYOB7F!fJeR_^B%7Xo$.qP^AmJoml=oi>h#=ZNc<G4o$4h^Lpa;?#D
%gZeeW(].R!g*0A.OmIojo>,N-k[T;;=>P0KKVuu_7dpY<Z=f@'9R8l1_a[3$.W/5mQ;\KdKK?ch9)VDid3tT4`]o*RV@o4l,'%*]
%<1MB9*DD6g)d7>uU2rL47,!mZ?3iVrC@iZ9MQG-rTV\6J+fT#Q.QX>*+hjd$Kg=.Pa,[*gA7kM663C_!PW:PM`5QVC!'tGG65QUq
%DB!&!l7%J9<%0agW)X)06Od$YiYfC8Fjq+Pj>EU=#>8]RPm;4,0[d:NA8_-+7*naB"WC:*TNPCog`S`f.9;!-f+PB^B5CCqI<Ptb
%!qmb!Srn8Z]sWD#ko$LG3'Bm2?F'D[WeVMCZ!^(&[EGJ0$@rrGF_!>N.$J(9Sp-XK6$Q8&@W2CXad0%\CQgB1=qn>#gP2/b>"qiX
%T%5g!m@"o>;ao`BituWA&2Q:W$k^]kD)B6\oPUpdA#2M:b4ILD%7(^NgaU8(EEX7s9O"5h!9Ve[#_LR0ZrV9f96sZ3f]#;u=36[<
%pod!m[Y6V?oXIC>H**jI5QSI%@0a4(/2RqSMeHH)(>(Qgs.quN9>rf''4$KP]Xj>0W9Mo6lI1XY:FLrr0V5GuH?QYGZF1M7MA=pO
%qcP&hL+"GP`+?5f<eos@?Fu!>d0R9`<h6PJ\5?"L!EQfaj2R`!&DCb3WBFD/p+,b<7+OX?#gTR:OJ#U#\rX8&T@_'TgqQgb7U:m8
%Me'=G[#AR(R?eHp1Kgj%SI<46lQTaS5"9N')\d%mOK(iQ[FrSDqjlNb7.=a+XL77QD.+hR`AbDJ2)B$m-(:7HI^\Dj.OD'MqM"X$
%K6:+^efpcIXs<F"A`sIGK.'GD@B;0X'jCnR/HoQ_n0;So;/+6IFt]nP9J@Z54J^H[odjasd^QQKHRQWWOpW)^.-^u_.FlNkM\J`m
%iE4Y4KL2`-MM4R6p1J0Y6;#_H7\]d9VWT^[O0p=^7"Z*d\s3JZ1Y3+L_Au'!88HVAk"NsO[AB[r,ho9^AV@&-(p+t2\D6[:DS&MX
%pbZb]/lCF2>!&BP.F4rNVhS-jXt!%C5lIeL<`"sd>SESVB\``GR"d%1>o5&$'e*"X%JEA1ngqOO:bG@(ACpi?36E`'&XP!$4R:d-
%bFn&Wr1s[pdGT/6;Rn;+OA$:=LeE$'K#b2MRadh4AE\9+Rf2eCUD<'O'`&AGd_@:(%`rE.pbQu]/&Zk@nc^"I.'OiOFXS"s<u9VU
%En4:'h5ILbr"s7VW_<b=@7c3hG0J<uJk<?uqA-b-HnP\PA[;-1A'^0t96D-&g+%Hh<`c:X)qo2kXB?3;bI><da?$YDF69l`NMELL
%PX/aOC]JZMZP1HBos(m'+fee>E\N)mP!9"r8tu`i/0F2`IL@6V6\QG\4`3m39?VEZU;^c%Q<&7CN;UdK7g1:]NkL_\I:B%qmng7<
%<`R'((,__=:*\jDB\A.Z/1dR>4PQ<A\30UA%;a\jctsa?XG(nl@-cg6i?G@9:B.jYP(\jS6Gi0/L=<"$3g%?e*@E3,+@+%hm12O]
%W_6HLU?1_HWs0ZODZSFGBsLnINJ)gr_E?/.$'OSF$G".`95J<[PP0f456DR(]E2T2A=ZV0?6''57ErB!IF;Y.%VmMD<2m*M!QC"H
%],G5^Eu&`B-uM$">ZX/N49SpLMO&h0/_hD]ZQi6Y)]n+;_jodq/b,,7p'=BWNQJRuf\%>A^BiCXp:45he_2XmEU[XVUd5.aD5:RO
%LUY;L=WhI%>soiN;MEY5M?P$OJU+q>&'^jQ,d]mBR'UgM`JTL@adN=bR`P+J4B_utXWl^BC57aO^p95]5Y.TY8<?BM&V*;LKb71O
%qI(7R9W=XNU^diJC->aPXP78c$0i'=[Sp=hjs`tL9io=^$`.EC"4R\S$:fnF%S3W4TYcS<@7Y]<0E\1U+<Eu+/?tg6C?A['gKuuL
%YLX*2a\D/d88CL&&KtMd3`[&Ok\"!8X:eZlE3R>`+DY/;$&K>&WskJFf!CE@q0:Q7i1i--X&,]IP"2eBUXi@q+dmoEJiNj0GGS7B
%;4t/A#,kh(RSc6&VU`UToUTQe8rg\<QH6Kc0fro]0_^A/G8Ap"IL2CZEm-p"Jm%[dp1Di3;&?)23]oc7\VU/ISRL#Ib[J-Y(lol%
%6(MF\Q6=#;6@Gt0NR^P7DZV,-@[_[\WYKi7V)HsmdFBInMOAP@;n<En,LFil2hPjI/Pau(:cZ-#9f'H,efS5F@CL.,"^OJuote7F
%e4??O%p6&bZE)a;k)I0cb::mOh?^p&_\/4h&_=S?IUM?=A8>i(3C,T".u0]8<-V[?@$3-W)>dd?N]dMk'2VYl=!$U)A&_@+,^)45
%8-OjCFm`&(/l[aM2^pqWNtU,4Q,=q+MEpLF"XHI'3i9ApPXW:Ze5Qh>ad@(`@[VV_;0b&HO4p^>?'8UJ(BDYHN?4HJ[k`bXLYO#1
%`K`\sJ?eD>eGVY:[E,SN94+PVZCi28?F/E-0,A?a6sOMJFZp(VJ!ucKXQ%H8'-S63>\+iUWu8b>'[_`[.)ggi!k!,Z8296f8%+Nb
%'gr]@Y7<&3AjSeY1=CkXV$gDmGCS4`$"E2YU+=:'!DGR'W'lQZULBMNkf1dF,HkLKSgTfm=[!Y=Vq+&?aN.gV.12knQ'%W'mkps>
%.:e9h&[D#ckC-B2>E]CLGkAtW[$*!+27;05pUc&A\&DfpEoc6\N-8/hj6Q<X`!HurSRN'YYCbEc%]TS$]*@m+'@L+PY,QV2%=Q$3
%mnC0A"Mr%c::3X#EibpE@-M2j*l&=o#+0.T"@:S$DabLR.i!etdtVj5D=S!+Z"jp%,5bD6I,[cOG7q*71A+buW?Qik-A4B%Dj;@j
%FpkZF#t/o"_.lV,=[HUuk6)9aEdWR'`?JUM`$a#n8<p&SbRTXe4K<97XedH#0]GDm,[-=RW5CR)TcmOsB[hG2?%]OI+QX>-0/+<6
%+9[keNlc<2Tp7Af1LDIH2&4i`m8#&Qm5u<P6&M=H7#jSG[eIDG;,'6rD$*Emn0qM2(ceF,#Uha;+mn)5a1Jq;aur\1:0._1\PF^#
%(qO%I=o2HHV.GC$mI:dP@X(Ks[gG/oC$@7?!mQ+Fa#3(@5)'IO>[p2^,TQAi,%^i[/T'@qJC3(?[([a%+KL5nAFBeP]O%oY"8oSY
%Ua9E9I0I^pfS`bi+.B+F#_gc)f%&^53Mi9lUgE@kTeK*8*H)&A`Y@*b`g4JoOerm%/W:"NRcceM-?sbfpXd>_NE0QmQuOrbB)4]c
%/0GV56#bAQD5%Ik[.Y6S91f6/Inh.j#a^XQZK]8C[)dM;a-AD@oPUf1'bZWoS"O:$BOH'(c;@VoD`nFs?Ij7N76!R7`+KOKiE'bG
%X;)k73M/fQ^X(h:neOOh/,,0+5.WG^Xc^^gO0[r?cS4?3:+S8N70H.%Psk^IndVX(WH->04tq=Z7ulNW60aO@"d`D#a\YTTJ?c<e
%-H0G/MK9LO)Tn6jja%J+;bTI8.W(U.^pXn,9D7?4UK-_"fSg*0=G<<;D`bD9n!tfrod[)jeh!^.9.NfA2rI$g'`o/Y(:]"M>UV76
%a^kLr1]qaGlZGl:B<.jeBKOS<a:9X9&Cu/8:33hOPF3SHX]>rU9Og%%.T>HNVcL+5kdf/Wqs/4c6M_sd7>uN>l+u_;H$*]Zf/'q`
%?r_U1WG`l0*43Kd[B&MMXBH:d\Ku750ipLYZ-i&D^l3H06@CG?RPZ]B%>rd&-#=V+,-_,2@?e_294=HC7B<#',eIh@-35&;+9mEe
%p80N%bs51,<_MbqG`Pc&N1NP?N],VpLtQd@$HYc\2;4FR:SJc=9B<6H>P<nW'Wfh&HXRs-%JoTQ3+sU$^_3+_0m85hADe[i2X/sN
%'mq3e6D.rUVp/nB_Z1Y?H7m""O;;T[`^7JYAqSL(W_fFC)'%:5,_LIR_%P_O)F+EY@89#oE!d<tb'[`Mnd1u&46G9*179;m_-T33
%Y[*j?]K6=%K$\"b=pl'h5$+]#JjLY"#f)"U&7G*.e#u,OS/Nk2WZPr+<7F.**6?`QNhMU;QsKlY23eN8WG*kjg6o)O_s7jm9FSUq
%\eO*rQm[00nt7"$nT>'5no[>AW&K]nMd.gKa=MK)Buh>4bBB`6)fT=O#sQj`=DBFCN\qRjDh[efRD261JFW_&AB=sTNDa+Y(Cp^I
%VAH4.gE6[TOsE=+L/<d`S&pLg<9fa'WMi_4WFIYGffQuC<&+iL%F,4B!2)SWAWos,)XPfOi"elf^l@(-$*@)cGb,!=js&eQlGU/>
%$53IXO^4pZ0/*_+JY]^e;@4Rk%8p\(W2+`-&JYLu*BHo_h6%%gI3-s$UO1R?e><G$KX"Jj9E`I3<[O?UVs2<(nl8j&<e6C:W"iC/
%;qi1I2e5YhiP!gN]uX55XFY+`]u!0;PY_f3]4o[X's8ar;KP)tM4&9FYSOA+"Z(L'Wt+?q5jk`Cib;BFE4KF@C2uc)1$Do;0gG_;
%kDYB!NL?EcKEsYX&Yj-ZYb>at==IEt+3i>/3$a_R,hj,<&GDPR^`<GY9Oq=;O.]*SA=!]NlB"*$-PLDlmWn9R,$7YX#AU!i(F2\*
%S)We88dR1"M:]NC@#9`OWea2u^lEgTd4MaY%)u*84sARVU*6$FR4#foCYB465Z*[YQUgJ'qhH@;lJU4KN^9j?V59.!DBW0nj\)tp
%'k&07R`H]C5."bQH:^!(WVrbgofNPUHNgY'U;[kH1@_eZrM#\mMM"S)'WX8>$6.7^^jIN?)LJ,CZNgKZU6`qKEU/D-QaQijLV1)j
%f6S%9d=m?AG"('k6A6.?P^POTP1u'ac.K?(AQ2V%JS3pY;@\5b6QD*E/50:+]!;X4AW:G(m4[)p=R?l$D>ncAjJkH`%M%0e+:I7P
%C))eC+q>N&LN?+_OLJ4BMJaQEK*C8^AB$QaAr"QTfYY+Qn&J8&4PU)Y5KYZc2BhjqIQ]8Pa.t<ipI^,@cVA>_0!2$<`rW6D%2bRu
%*`rI/.^anZ5b`<q"W!<g<RGQ];$A8fW3ZZ\(TFN.-23K[)!6KDS'Y-YP4UbK"Ost5ff2/#-dd+MXj3*bl3JG3E%[TKe;T)`.[kC4
%/U`!@NZ=G`CQGH7B>mV7$lVTsQ.HiZfu_`("KCQA8,ts.%29p-Tu*jNGo1I)CBu/E7lD4kYV*r[6rX1s`_5Dk%?bC&(mfcIRSK&%
%:`,"&c%?1/:J&c<rM#jU5kK3G/Gu6+1)UE'Vm,#'_X+q7B]d\l/>uF]RIF4rBJlj0]1=Z4N-U$RJuPNh2o@-'/uB@Ae5#%/,6AaH
%7j%_+mH)_X=#,UP(8>EJ+e.9IM%ro%J\7G$#E$g>du^%ni]f?pVONbGZGlo[lZl8,$a(O&'iuU%WTG5nO<Wshdt'KjgO@tVr7tXH
%`+<k)aZ)l48<4D[Pa9W(/2ReQU;0oZ+SCoM*B'\Km%?F\)CS4U1G0HOOs8Sr@-+6X\4$3]80&:N_[Hr&A'/8?W9D#2g(Mu0'_k[+
%pg>]%][@G#URA5idLRf$[==<\3JZC5'4`+!7Z7o-eYoii57Go-g/)NqH'JcbBKU#MM,[qI6G-lf$rh/<P7KF1<q.iZTOVE:"JsKt
%(m-6V5oDPo/#3LRO=Vekq4M[5`<LWjCX"F`[15nkNFnNVTeqE7R"ko$#I[_[(ZHpd(.=Frd-/p)R0[V<[@P.OffluWeu+-"W47Di
%p[eb,.J>iX<%_b'oc(Q@=NKEC*cgM13`K,J25R5$YiZ4<36<R@C`"f9?N^k6@&PM/&$6dKd'?/c.RrK`3E^o[8f\2i65:FO!5dH*
%X[,=NE_YQqqOir1Xjq0*11H+rL>bpt8="t,QG=/l&59!1j'GBI^qD5g8>XY;ZORs?Smf[D#&F*CH9EM=UeiatmZ'c@2=D+C*&LVo
%9d44Y[.sZi\qoX?=Xb3qDigE3HU+T+pV'iX><>#8Kp\`\l<N*G:Rq[DVo&h$_"Gb&;/"W@*XF8<5sEos8U-=?F:f]To80_W[A6:Q
%]!5L!@&7@(7&:(2pf/)6M^To</JtsX=gN4_``.g'%l+:qPXt-"Q7Ng?iFFE:2(qc7+#SNWlr<<KF1!m#<6D#uOQcs[jU^,KjVpI*
%l95s%ITgQ<:)\7]TqrZZP:NH]YomM4n6(DtJJDnZ-X``G@C2Di()OdR2n2_T"+0(DQd!akOd(Db'0eKo+VM>PUbC,11Dc-,g"9Kc
%Pt`[*(i%=^P*kM!XB#P*7A/86mt+@eQ'TU\\h=3;bpCVoPmSGF(\gcN.:S#EA9^,gTTl)!o58+.-,7:Ea!f*-eO;/*#,DBdqDB1U
%O5:Qh7#.nBH'ujPkRF!l-$VUEN1aV,l;eX*9.fW^k[^4Ki#W;WS]T'BjNW9nRHm%7Jm^@*/tSi':HQoAep4F?Qj:uIm=;KKhRR+^
%ke<h&q>X57kV6([7KFjeQio_,G,logDqJss<''2/X/"+P+&eM>/0cPr2(;_%K\$r\-6P8^Em@QN9XN1SR/>6OPDltuQ6snHl:TGT
%o8(IU(qX2oem_L]NenN\rtl4MO@e;EcqsuKFK$eX5:4q7MMOr\mtaf0oM%XSn"3TPTcj,3!7L"[;59SD6U.HL0RTF>h'2u,kVg5`
%>r82lKo4^g6<F5AW(8,MD(LWH!2M9_ejq_`=s4iT^AO@:K5kZ(/6OraN6Kci>?@MZWE.*_nm!NIX>G`1(`*?"bNYZD=U@mIIPc47
%-[q'S1rR*hF`1%6OW#/TlVu[Gl@B^]70ut\oI)<Ba891X!CP4Op"+gN"k8&F3G7u&UX0Fs/EhX,:dH;:R^6B.%]M_D%%r83G@MU^
%SKc/%d>;bZk!?[`Yo'uR",bS^NN5Tm:;@E$WMI;.5[FZ.='/U"jG#HpeqgK^g5`Gk\flF%7thNWm;jR92;hYFFZ+7h8:si/QY4bT
%bbeinY$0)Kg&S)Q2.Ac8N^<Pni=ttcXb^5f-9k3-AZA?(Am3`r(p_ME:mI4Bhb\L;,LtJc%!&A*p<ECuC2Ll`;>%u(Fn+<)WbA=&
%$'`nL"pl006(UPR@O'E[dVDAVX1`6P<*;$ioTA.;9i0s]U3:6J,dd_:?5-i,O]B+)M>Q8IMb;N[6:2S$Q<:Cp-rjC=n:CCQ2`Fn-
%:1Va*q0T6DM#>#>QBQ,,.<OecX*MOl#HlHu:u"Nui!73]dfBNo@]C(%#A`%Ts/7/->GX/Q#a[mAC0_n(3$I:<hIU._mY2Nd`i?C*
%TMbH&6k:H-Mu']PG[qD+b)D-H8<&pE=7/Fq<4$tGn&&q3(pDms[+3V0g&<Tj`@@/G[HM@"5,6@5!+MN.>X03cQa_Z48X$/V@r:j*
%d6#S+2NTU)LGcT8h*VMQV@)i;_V@U40pgZ&APs0b;i$Hd_ZARcM?Iq<;QPEI>F7p\'$>l&=QN+r+l(Jnc^O1T2g@#LXapk\Pbnpg
%aF\=7&um9M;(dM+7luL#3uc"h.Z:T=Mb6<=T\BID0N&-@+B#Y^C:2j`RRY<E9gblkc<mY<e$,Khdr7<XWGC=13Cbu?([+u?WoW*d
%YRuG:igU)h'9!UgS5M'/J0fW*!GnZ2j]3B@_P,<gQ$`Rci`Q5\A-/Ph<GTWr!Mgp)"U`RTWY"*L5.t*pRb":5;""`Z8uTa]DTC+7
%=`N%3X$Ta.r"b6u.?fEQae_7AYt]fXb6AA-FF2[*LRPAS:epj.i^FEd$sRG.b1U`0fS0muA<#%kfh;XZC_eoT:G<^S"'[44qM!-B
%@+MKJpWLtLKW:<DWdP/oC2>.if!X(6&6VcIcDnt9!^R2rC:Q[`6VW5W.?G(DU;JAeV8>o*6DFXL@g`?U19G:Y<kCM:%u0N&TgIVo
%Bk>3l1)GR!M:dDR"f=7K-%r'kRN:M&f(]BHAd1qgDLX+BV.,")(;MMcd0r$=/.Gk%\cJ3:TGh6AngZub&huaZ%@2UH>tS@pF'adR
%d`mW)YHgumJQ$19&4CJ*$`eE^:4?dZ8e`VSNK#]Gd!a6+L(u4@UsL_n@V,GgMQQ-;V<B!eo)rS][3!R8WYeY5AZjd>n9\oG!j+;.
%*jQ%jeH%u[SP^B>'R2K:#JkH2o2Z0LZ=Pq0QSU>"W`"-goOb3``n]"R8u*!Bk6jEq`fk.>[a,o.BWT%f?0dIfE7no$_f8d\Q(Utu
%*C;08>"Q1ZC8+gnAaAaP"f:(Q/KeN&Tj:jQ35Cs!-O^^kV;*qi['l7J3'*QKW/F8-!7HnP26&#JEl$g#?C7tAY%lTDQrOHt*?ktQ
%K8Ru4'L1DWPPW8L<8Fs`9Ji_fV*KU7Y[SK6!`piie]YN76oMf^X=HY2Xe.j/9N_oPF%9%eSE>j^MAm,a(#_Q#WHeul=5,:ZA4MF?
%b;e2oPqK.6*4&CgWj&7;8ODQrHGN"T-DEm$:`Dn,ipjrt1$q0g6AkZ=;76O`-:$;7WFiD_f0k4(!"66"qD3AnG!%&H6orQ"AL_SD
%&N+G5j([!RTG2Jl.m3+=.O#Bh`U1*XGsmhUEV\_[^h*oqq$;TW$LaHh8+!YkRm8AYl&C\I&2?M>)6^&)%&$\F."Yo1B*A`ujr%\5
%3AWNn/Q5/)kZN"?(<@U&.cHPC$Sa$>H&dV/VkXF_)hXXd9mL:4'rRO]Zr_)ianR7)_$\=bn7\-M]<$&(XHq-lT*mtb#cWO&%&N]$
%64)o+,.Nq4eL@K@,-<k-D&S;1o9)^ao,oh8=]D+5DTFGS74TE,F6r+)Eja:on#q&f[::Y[TH``Z]O1$7MT@Xj(;_Yf&+V0I>nW@.
%aD8Q/BHT:!5Xi)/X(+^KKUY;C+W5E6b/</L5%QZ48u\Yu;cBIQOE0Obnr3K6]JL"%Cb'-RjD#-G=+f)b<kHrKi29b:=,TTDMA4jO
%CcLFUEmR)P'!T<+7aXLeVDX@C=-d%g#^fM]O1Sd6O1+_noLq!:cS1rpesI>WR"e!Z7%gC9H<&H%9\V!ed'G]<mFW0f&.bNrbAX_=
%G/su_X9Ho+bP\A9W5esS7%^b[8X-0rB#+`2)ThGK)LSr`b\/PG#q47f^_8RUX+2eJ.>:MK%hV0j_J3J'@Pe.$L9iZZ5dY[TN0,B"
%;`88AVIaD/ZP?/$aGY,$$CFfu_m1G*8ZlN2^Q.<&Cq5FC0GQO.]u2eB'1=se!.%6Zkf+[LI^u-S`oVB`[,:bFBbtIj<bMZ;06U"S
%7AG5jQ\'Fh=:IN,.Y>R^5KagtJAV.%Wgqqedc^G<RMnMS[U$lM[!F?>WPbJ?eBkK1ll1Vpc9s,$^c:s#6L[S[aQO3Z%`-`5`C?\b
%?58TRD-@lZB(2`g'ma+*)mnl>NU"/bD1YC-R3e\%#TV?@3$1O2B(J3hQ)QWY-fQ2RrW)AhLqo-eL5M+p-L$_>JlEV6]2+!`.&Foj
%XtJnq,$J)q2mHb)7%c#=n!)HKN)dudk/E]M'r\J\WS[8a3;/#lrM+)^k&U;B]T@O:i)A6HW*O5o%NCpG0M='D[E9Zu3TL71BNRTM
%4Cn%)+5PQ(9E#;n5TJhu6b(5L[KC=-+Fb<H`W#o2cD<sq/Bc?1LADF)dR.s>f\;-YF:/3XdQe(Y,`5FH'%H:aeKRH^HeJ.qIGE'l
%4L;=CDjDZq/9>0>$aX@+Yodbbp$oP];OgjSUtG5uXU!pcFCHG8MI$h.%HN%B^4HH:.h%^^,jqSOVV=eZj9/U8M?,$f`jqKH9>pDC
%BPjJ&'?e1'aami$5%79-1V>q!Ar2m.5<$e37@)-ZFS`;^L+81l(rI-5.C6S,EkpX#ZPeEb$M^Dhj(np^[?5iLDq2I52.4$uh-8H(
%o8@<\]f2g^8gI?c+8@)FJqDA7OE@*,TOQ!6f#OqImGg>UmVu&n:5U$3C[CrdBjPIS5*`i%:Rnq9:@=C[L$Bkb-#/@=dOSf:?,KsG
%9ttfGaBL<EFnlY,:N`@*ga7eE!:tV>g;:"1hj@p&3lkG$=hZOr!@P0bck8+R([E1_+;=k!BI]Vt(ecJ>0]6ZGdt5?V-F;l+hVla`
%e=;kCN5sZ8HNEeETQLgoUdU$tR6MPp=LE"B^rQGXB$X\]<>GYYHK;s7J&W"r'M^J"1mEW>0g*5dBFD@B,-'u_4:&Vj[]W41aqIEO
%>)7t`,$s>cCf)pC<f.1jnU7;1CBuA0,XqPV/$73*-`DmnRI/[[L;.L=`E$G<lFNQ7(6d"f>\N6:XX+B3ggis>H<mlb<3OoU)"#=;
%A823t*XoSbP+:5o5+C>6P6YX`(Wj(s6.:a=^=oGVW@grHTP:/p0-_n"rJ6s]POs[TNukRQC#FN@h2f#3+.8mQ.1\=pr`2aJ/r^#G
%KZ?FgB?;nTjbb&JMn/W^X*`3AlJ2$r"JF4Nbk#39"PA+E.;,kU$,16H?(h3f"=^l2SXf+.COSnsm<"urXTYQbdnk@Z=9$?`A;cq<
%\XZbNIJ<;p?692"c*b#gYD6jS?]1*\m'bh#>,24&#NBS,T-GIL-c,'7Z#<.2e/`frWjdBDEro#jMs\.KVh_*Flg1A5b$CJ"TNNN@
%)u=JW22icd-*N-L#m=gU=n2&;m<TfnZ>R'lamC6N?isG_.?E,]T`hMj%qYep:sE+5*r<aEWZq\;8I?kn<T,"2D%438DJ-6+YUbJ<
%Ju/Uq(G8D?Q:=jnG[F.i^Sj=J)*`UD&E$D[k$%hZ2k/uLVgp`cECjDKemr8Dfpr4l25'j=SY"N@m$NB*P#\5cH99>8`RaKBiEWA!
%cLT?6E+bYu%1@'HJUTA@em*LRqh;dmC!Du,6sD8S38s^;O!>3[7njI<iCus>k:Lt8E/lYR&uF'W4t>E;+26(=gagmH2YaKK4JoBB
%ROF*P1WPcL^iA$,#D?g\Wc!,5<3?g#8<bAFBSA;':tj#L]@XW\5OGl>V[kYeS@,7:1':"Q%r.g`'4f;P6g<?*W4tX;@-1]:8l<@N
%4=qspW";Vf]@)LuD+J?C.Jt,`'qjulp[$ZrKU3(U/Io[8Sk:$t@ZjS9a3`@_K\^4:;BaHC]Q@Q!hOAl[VY:(Z6E'ajn0h8U%JgVl
%4u;`;M8$Ud4e)(hBHJ&V@R>%WP74e!>hqa4rd*'In&@AVa?7M7kG=c_mSD/5VL$j5Rm/OTKibmLd^GC=&(Aueh5tjA6',QeN4j12
%,(S4_[l$ZN)bM?U+["k:ab8OqpLjJ5kZn8n5c^DB,i'_R^73smcNFf"\T"g[j8@U2aolYU/AhmNHEIH1,#huS1Y!WGH(H;X+.1.K
%]pOfJcb6ar11Bb..$.X&q&3XC:+EcX)?C7;#5cmo!t$#W+h3`tr&i4k>0:ooV3^M-)c(YF4E6:WQ&g6a9!bn,[$gA0Ip;p3j[)"G
%>k6[qm[1&S[S#B0LNQBu"CT:OfYn*V"QrASDS?sVB5`(Ti8qbN+3:S[C+@V=P$Rb"8:;=I(aLZ$1]QU2oS6Omp9!,Phh>hh9!!4e
%X:.\6Z.sGZ0.,UR>P[_(/*L&R'--=ik*Ru0BH$<9[cVh7hfe=U@%$0JdqdueXk7MW9c0S\/QVGX"M(<Mf.dhPl[ONmPmX6*'QXBP
%)RXB[?j`^7Kh5oN<#th]ff&b@dp2)>6_0!T8`^jhPLGF(&+c;frqsK**#f$YSm#G2GD&tNXi5B[\5Hs&S9$T:rbOSng6]SS>o5To
%7sOU88q:*OSPKD0Q8<(1!1O/kSTBcM)IbNNo2(3#/`LKB#Bi<?99RcE\4kSPe?cZP5hK$DqnksClmh41b2GP%?e_N#IX^5<U?:BL
%JY/I'Q.KSCggp!HZ0[NPplib(B0WhKr+XiVOnLJ?j6k*^6L0q/hH)L)d;<#M/GlRmF1q&K&+4#^?VHetJ$J]Y:Ir,nQW4Pc<7U-s
%W]rPco!.J*1J8jO<W@?;Slbk?5PLDg3L(8iCdk8TNVN<Z<XN(VFFN8Bl1qZbX&XkGYB?H%K8rScce$DXKM%6Q=4?RAYbrG5IMsFn
%N%@9lfT5odgF`]GBN+\U+%BG"li7*T$>AKWNFC8.7bP5H?F(k0<nN-uX1EC4[-/P@:R.6fT2N"&kH&#n3326\*>obnlo1ZW3Gl/7
%g$2(%22lU#;h*_FICde\Q>7<tE'e@R>=)_0MQ2B'!%]&6Vg0miY>sNi-TIP7FD6>U9E'Of7#GZtf?U-BB9G[-l]V9W(MGrL?miAF
%Xi\hsUoQi?TX$HU2kmtK443/IMUBs@;/*.EOGB*?KJFJDjK#&I;p$_K^c&dc4i-*^?8(T6*K7MLRZ!$JkuJ7H(Maa\1c\WO?ptH/
%Mo<J+\$\7uf(FLa;[.'fEjsJ+^+Y2$$g,?Qg6SgpVk#9(9Qr@4#ZZF%aY=`56c<FklBoTSNG/RX+dUN8M.6Wd6BM(nZUtG9?;9n%
%4YG4ZIc4O`]\LfZo4iSf9NQ"H9WL0m^JjMnCM*samS%D/@sI?6^=rS=RFi<>&(L2AJjah_GQ$8]r&%(#KYO%JkMdbd2'sTrFG@!r
%(PSp?(sk3+nsMB>/;LsrnaGiu*95'k+m?J(lnAeanS/NR"@2haEg]o@.MdWNG.1%>I7G9(5k)npi<GEAgE]DDh+iP$S6IT'q+*"l
%^!/k7;]ocYW\^*ILluTDQ&<atS]Nd/2+aA+:EN%;?0hX.hSYGO)[!&cmD2GVc(p_R:C9QN'?bf+q'CW&U6K9D$UC;>C-0RlOKaHn
%)#=B'_Ibb3^^'a,Q1/m^+[c=>ScUhQ,.0I]FXd;q^\<<[4`)3foau__`@%W@*l(hL7PZL25X3G0HgXCn-%o;Oe[Uc4qE1OEVq_^7
%hXLUh^I1.&,P\/U4HcQRB@CffQK4bl5Kq(UF-C=;"Y@\IP?k(\C#7/fCUS!(3jj$CSIF`+jP;'c>CuTkR@omoUP&H6HjL#'rOkne
%7;!7&_Qt%H-B=UP=t-Fc<D\b2Kl4e%,nY8n\t#E8[ReKE(;gKTQ/Y%*gpq1.R!(B/[Z9(@Np2"_cLtH*f[F42!lIi"D(.8&o<J)F
%:rZlURG`#XP-ULPK7t(LSP"BB#'reFHsXGEqq^mNr=oWHmh\lQc<N-t9dD1D6$l`3-&I2d>q_[_gj'-m]53s5dYNC;]@<I]I.6r.
%"D[W`Ube;%F>Z;/Ve9A&nCE=BGj6X07a8?B[AQq&34IjY(`\)fQiSf3&1arihalC"l[UC3'E94O*8qBIG,F_!B;"ei>l7$7;hadn
%Qs;7K.o.>=)",JaAFNXFo93/iNl<Q_\!(ug?96O1,L-H4HkMp_<N7?p=(pttn"rq$CemD&i-CtZ`3/0E,u.Rllu$NM[jd4%GY-PR
%'Y+'6N\@Ri'd]':)M]p2BG]--=^J4/eG-iH$OFh/Y_%H(J>nO?akok@OLnaVj?NRK\u^R\BB["h/"C$bK!(qlORd7aksaH104uF@
%hLL@]%`h]O"[/^^"n&h?)D#/)`-+,n_.qTL*JK#i2KcDu;m\2H<Og<jdsF&#,d=pd3-(T#I9Qf#Fu:]M<O@:#.kj[`1/hab2;,1$
%&b>2+.CeuY$N:4K01p2CBuAs:S(?:,%P$_$\RW;c.\f]B]8()+P.9AEXK6o[FC&+W;KaT@3I^8'VqpEPf@$;)>e!l2;`"aB-/Tu=
%.'+#ii3uD3kW=rA4'dJN,ckh6j)40d>d."RQ3+LS%$q?_:dt0qG4o38]^AU,+AZ$6?qBaLEhiHNEl![AoXnsj:J9RD\ns#5bgj\F
%Dd/O.gog,#(5\'%C7hr:*B$/!l@%D"U9HcI>A.1Qe3<>*HZ(^S>^0#.l_[\^J).@NVJK<V'3n9+h$W@u^r*)+C2a'Sp"dblb2VdB
%eVb%9&1,PkNfBTHR"NSkRauH2SD`Js^.\&l^g*dm6YiT>V>\"CPStkg21LmXY/B%.p;e-!Ui%F:%C)a&GMX"A7c!$@H4NR%W:P%<
%l`S&Z'hR01e?U+/LF96/Ml<5^]*e4S-Q]3"6IZ1,fo7iO%\N&k=Q0B3=Obq_!^n-:Jr[]o[jaE0NK_43R.k&39<&(o>D?K%8Xr6'
%)qRC^G*Dl=;hl!O'taUX:N4s@duT2P!OMpobDPq+";>&nUq>H8IkNc'0.-:a:Y4';%+Y0Uoe"afFSHpA#$b^2fc7X]8`YiuYj8i=
%V_gNjV8FiTlRG7J`@+[([/=c<'e.+D-<di_]GLJ5k_@dq__HJd+MWFu7F;^e`5ZXm&CZ&0WgO;pl$Vkj?aQlUk+&$WGZ]m"Ka,1(
%$fcNW?X>:CkNtcahNETgfRE%.=-08eT.*#JZPnnlB2peD?0/BjO@-9c`sFhiB3gi6V8)IK(:Ntt_tHGU6UmKeKleDo!Qbi$NiVEM
%#sDM%jAh3cOm`)X:K"@A@iJ<iAF8-u$:0<JAg5<5La2]68::cKgJ[%,nLtL0-Fdu),]UOIcq4,dACpLKJj"d,8+0-<Rs%Q-]TK<7
%9_KnJ>&L@FCc+O(U!+j[?X#.[pJ1^m9huSnKr`;^[TNl/P%rUpYSmJb/Pe`>5`<`(O7_ZV6<^>T_f5pNMF325G:[ZL:>_D/m.1gI
%.6jGAkamk;47CRR(h=39L8pImGf`a++ah0],>I8VT!qpiW?^ZVp>qpC.SmWf*./')kONG'@S&&M;aqCY4(!<#`E%1SrT\Og"S1$j
%2dU<mKKJ=OnJNY<hU!mBgg#bO=;lo$>(Ca,UOn>2)RE9qFL*ud9O=JBOBXn;apQtcj,Sh=]NiOD3So0BqI=\)DRBQWCS2!71c]o,
%]pKG[7nOo5"imkhV*Es8@CkXV!-<%)3Fbr=K)_stAl#jmM-(YeZC'npMkK`_fhsm<'kCKb?`]d,CHp!\cB^H30eZ^%B)+.39]TZk
%<WHZDga>]Gj4F\W7g-!URB(8S=\mupIC/ooP-Z3`TOfR#AhMRhR</p-V;jY([m3mUcnWHOJ^EU!]cdA?#Okr$=R@E%.MdK:[ar6u
%A>nAH@6E=i7frn_p$#K6?Ojlp[Rhu]<WeWP+\DShaS0sX/dEkQ1AT*JFo#Oh$Y22ii<gOs>RblFEDb/3jpgS7k.I>)l8P-eE*F#5
%<j1p2S2MC3<i%d1buEd[V1!@r'M#J[Rk3LT,W*0i<1$734ou099.6UXXWM\?\KIOu?MFE[+M@-_-0V`,1TKW)mO0l9!Y23'E<LQX
%$[@gX(.=I!/?2b28fV&T([cJJ4_sV-DN#;te!_810kpe#(0B`E]SD'd7Rrq3!kt(X1iN7>`YQ*W"Q?9`f%PU8#W5#?;D&6H\HS`e
%<[5iOf6r-+#!]0PG8i)Pbj2a#oWr<0B*ubg+U\W!QNN"!>Qoe%j+LWN2$:T/$0P01>?`,/LZ(Dl./06LZ]oN[%<>m@fIf:P04KdE
%jaFB.^Gn")n=NRY+2dD;7=gU?\CH-o:09_/G('D&^U`*b-%-6`Sd!<rFB^T*kH4c6:HQI>H>hV-BB?'O:Yk&Kk^Vg``Fs[$fY;L_
%5@%V@RJLb.KFpJ<,gG07@p&!6)Kf7j7tmB..t/ClQ\4s?4<OV#IItU^Bca,$@%nEm2hK;1[S&6HhJ*q0,)u+&]5?j`2VdG&H*i1<
%p2OLiJ;,2Hj,%JGqD:Ip(K>W>h9V@mlAQ]PRmtt?PB(_+7_6OfTFUDna>t[?Q$X0B,HI#QZ"XD!'t02Z5@Z,JIa+mMDEeRtVNITC
%gQhj;/^m835;kPP?[[`+[dQE4W0(`n"1W3ASW,q\>#P-:VfT6%boT[W#-obP0@[4_nJnc1'^5KcZ*!?jc;14X`@pC+`):-THo'Dr
%E59:]qtd)1J^>JU'Y7.o1T)C6;o:(4rPsJ<s(544B?8b`L*_i;?OPpPL7'I0-%4_HWdE.BOZ\qH?Fmi6Z>0#edo=C)/6;QP2\=+V
%@hm.$G4n(.SC'h=n(S2-_O3,_8h[IpPsBH=a)H>$]03!nRiT<9-jet>LSH<X)+us$AXWrGiiS<sWc0,j8HfQ>=;*XaGj19!o6u8S
%S<m;\I(f"+!klNoGN5Eu\nFno7G^WdldTooakjlfA/5d=mLbC%hL+P.AmI5&C8p_5*N76s_d82I>/p^%L?'a>"?ML4G@kt8NqZ5O
%qEo%pp'jrrRpSmS7:IPU>KbEZ2TSN_oPS5CKH6%q`j7K8%KY3FO%T?97Ee/I;M:JHml+9?#^*QkYhP75EJZ;uIZp!oQKbVJ)?k$#
%\"tCj>]^@$q"uKWO?WZW[hj"ZH)V?qf@e7#T?36fK@RgJ]>tU/&]Kjf8L^DY2*>B#9(@LH$h"PZIS6tR3"t1>EH6neo[^Y94g;*=
%>TT5+_;0+3_7IJ#1?R`un7!)lbH7R5i5#h."ThjiVVPVf'r(7mM`_o!g^E#\MBC(lMnm,hKC^6&8ub`:s!Dm2*0LYQr>GdDdAd;M
%iZkqL/Vjh?JdM0i`OO"cD%>D6(mhN43m#aoDT/-6f%P#h27LGM]k[MXd&`?63s*=R6e47C+8-Hef!)\;OMh3^GP(%/Sm,PI'FAq*
%Y_:.E#=1t35WdD:YphgG;:Vr5,S*7q.O7.\4U+2mP9c^d`IF-l":Q^sE#DulduaEPrGHV1j.j"+0si1@cL!cr6fui$77$c<bo0^?
%3Ss.3Gn45a=t&j+:&S,:eeY9FH'G_!j)Ek%(J1R]+o53G6[9.\'Hs!6nn"j(^+A`@'%Mtj^MGQ'&=RL(I98g!7i$*F"9`NTVL@#<
%)oZBB:gGs!i4cYhU!a@U*qp(Y.#/@28Z(9-8"0YP;4jcSLT-7[JZ%.3?NBF=b*m`e=3P(_>SSqe;ljO:ajtT9+@2L>TY#e)gV#:S
%ICY,?E1<JC"]DG$_E9FqY*GF]I)kegH0bl67X##R,n9Zu=5Xs`)4*Kp<?4ll'_V\#>.fpkaQs4Yjl_3j0Q=CDip3k("qh8pW*89u
%C"K/B\\](</ie8;N].e.,PBJ:k#o0`ba6N(C1?Ss)&Gq=YNT0k_ITna$PgV5+HuCX7edkE^)j01o/6GuH_!(QddXQU^&<EFSWP_4
%'eui+pB,<@o5(dXV?YZgEG%F@`LN9$(>U#M`KQ-([23pD2#pBLGeEZ(fc:6+OA)^D%QZQGemVlbH<W.F@'sUqBnTRS_4SK^gV\GB
%7C8F@3kZt=:g`hm>)Ik]KTuCa)P/qC"u>^NA=&GlIOsR4<5#`6J=Ybi%k0CA;OX'./c^*n5+#=7>r$i2F.D<kBlm"uS/%Zfns?6>
%rr*l!m)UPOghc&d:J[.IMD!C<)k!\G9$c>h!VS1ePdZ&3'aff!"cYP"GpF]hj:*umLT7*LC@u;dCI[p&k;L/1>GAq'OC7d0JE"B`
%V1p<r7)8$APK$@[2@`"XnLO;NhOIaYX$F'4OEYbkR5A^<1f0$)%Wqn.7WFF*MI`lq:$5&p6)ms:$]V?m3:qP\!6ONjp?fI]gs-3r
%(pF?W[K8;a4GrU2LA#b=$euiWq*n!^j<*HlG#8[GD2??jJJJ[\e+3@D0B^`?%)Y)bO3eT4J+/!ET2T/ZU-N[j7n!*[^^q,1OKqb1
%KraJ1p'dn;$+>4qP2),]71^o=n#e&Er,P8JkLpori2?BTGdXVMr#G!n7i1TbFm;a)N.1Dui;j_S(/JTg)GB4?e")pHmKL29H6G@O
%^c9mnoP`CoG-D:[K47f)k?MmjC,0Jb><WSXql@"#ft?"Al#$<3P,M`WLM/qc%'Q/#<L\^<7\P6l(942A*SP4=9aOUP`gW>-Fq="A
%<*c=p\3._,[j=&72F4@<plH1[k6c,!HV7I_U\2/$XO1//.:Cpa7'.j[d=+$G1+H8T^H-0ul7;V,6fqI!U&,3+n9..rEIUi88[g"k
%8HWT,*F<N.EQtldLiDV=J^HG86dBTt?,G(fG[-UW]QL4.Sc79"!IfC"DGKfWjHSJ\"#%k/$@m[$R25\EQ^'-[?0R:7l$UN+>VO9i
%p=.$qncb\:',o7>W\3HK4hXn>`SIOCR,MrZd0ho)A_65R6tf=o7&n5#)hJcC<=./Q678'O\C2<Vs1c`W:oN4fpU*8D0XMN1rjd(b
%(1+B`[dOD[L*Ep&,s+mf;[<4#>7i2n\f@[j#h%e=Cj)_)XNBgLmUp8J$J`:`r,AQ01;[o!\<-EDL$`^fK+E&cd6%RuZA!Sf*8<%U
%5hR5UdV5,-`R^mtk0N3$n5`+J6BsPN1?7^KjlhiBm0p^0s691If`aBq7au+F!4pVfQkOsslB&%q.!Y^?&>qI0?d&9d_o5Q:IR;fQ
%%%#VJ:*Y/X/!]+M#:cC6"7f6HiFaZ"S4JFnaZk5<_&#G/jSh(\O-#%-5K`lHGNjD<Do@AX#FE+Y7p7+NC>>gVI?a9.;0c#E%aQ"X
%;Nph_e?4o4bQI[ME(TdI&7rRbFr(ij2J;%nm.(N!h)0t9P@FqKC:r/NR4=I-feahEU`["CG1%M#ghN79Fq8C"iucFbSp^Pi*SLlk
%4.aqqTg0M<d--O2YI;hgXak?T8QqVdm7$hRm8'WC95^2rqa3>r"QDO,>Qe\M%]bch4`/tHg0u"RhY1[KhEuf=S$\Qf?VA13WD_iV
%aaO[lSHra5`h[KD-hr/%eN!2hRiNQ-G])F@%8Tf6O#4mN7epUpC`Vh<@cB'%Ml:blohgXkA_E9G35+u.HbaB:E;oER'#"<[C:,H_
%gRPL&#ihu*.:7Z,b\^H.=o\YTI-GNf$/2E%-n[g2.]4b'0;T*20HDBBIt66H;[jYhoOao>RM1&C,o@6@EU)fBZ_95OZ,C+EZkV]-
%Iue_&Fo!-o*$nR4W\lW1T3q*T[pVX?1pG,f:&9KVrRDp8XZ37>M-+dg$)cQZ^*,]4ZrL&!81LFLS.N&J1+1+?-26=Oh_6hFZg3Ma
%c$u^,=_#",UOTGDOm*(8MX2<NYXA`Z-G@I?XAa'SoOMXcD"hVQ)JKG<s1*ENi^@Ys7j19!kO)@k]PA\'BUGrG)uM4p_XDWlenX97
%nGpT_T1A6L1SMMO$N1<9f0TIR9Xk#c3/?gH[R13?8f;%eFtH](As[orq!b*BC&Mb'*`/lug!Mb#L.Sc/NYLR7*K4uURM]uJDiA2D
%.,[!?!](4Z@7^m:9Oi\aVJ!9t;SR(,%e(Zto))EmBU_'-,]->QJjJARXXttlXR<0_)pMBgTXR2"UIH54r[i`pg"j-5j8)&@Z3I88
%qm2-Xl%lK>G/bl'^j-#IR7>]tn*`8hr8kZCfZN)?_pBkk"SWY`S2hMaPaK9?^&25/QLs0^4GsO(+ZI*:CD&UC"GMb8@aM>h5,oq5
%\pmJ=G,'gS#uk;c7WT69&k3'^#:ZXBjPd(<D5K3b7GfEZ,cCGa8tTN%,NZ/9(/;H!Sln.YUT1BGj_cR;Ys[N^VU]`ndf&bNTDS3c
%`7sgX;OY6u2c@;QroN<?i0T3`%GYh!B`.AkT++Ae?ni))1aMa*K#+S(ku$!cO/^+CXZXd-)B2IJp[RG(p?<9Kg!ducIl^]WA77Q9
%GG!om;PBQH^3VotVk8IfVu'J`.SXQO5I1%&6_Mp[6BQj.AWA+%)mg5U\&'cPCnZpW[WigP@T8^P>fDK]bLqLXV_p.[F68H_7<okV
%Ucl.[>ai(!/Mr;%"ui(JFR0NZ";/(k&MIdn8Wu3s6GRWCY1gLEf@Qh3L,]ml2TAdU%Gi)?C-80"cdUCFI5Z46E:_`A"Z"Zp-;5NF
%#W]?ZYRDNlF<<RYK,;oG28oGEE&F=g0lWMeUOXM(/n<\4dqcl,_'rP3dajMM<FYHH)1@TE$Jo^ol(bukqMeKgMuYZ.U<rNjOKL?@
%TRF&VL[ITBeED*^gAdcn2,W#Af^Id9!qQp8/a*P_Db%WHHs4tBjEHB"\f:&DrCo6UP"D7S+C0#(-?eQEHHke:j;C+)*@=+QI89cc
%VP1Ch\2s*#ca%22q>=O!*q:Z\E'M'tC"oAUind=/70hf)qV_X.W#HBXl%R^-?Y`FR@uZ"%^<@\C2AD5@o6ik&^?uBA95`jh)c+Wo
%9eGH%[QV7m\qbb*l+Wd>s+e@>amS^Olt;p!E^5r3o<bb^mT[3&$rGED@ldE-1K\fn9!H-aUf1a"PlCc8HlR.a?_d[-?(Z1lKI1Ga
%28ZWG'gaYic\<^t:mr1Q#78Hn(FG>kqFZfBk"hd8KAkN+cPHs-G`/tpr6U1mb=`<\DJCGaSHOc2)#@oo*nHdXT*?nE'"c?O@'_FY
%`WT,>;,SBJTOb;lgs:OLb`pC#Zcl"G!E&sCkNO"i0-Q24Of1KQd.6DBBbZnSbhk)O`G&q*?KY)=bcn>kCrtXaR?qU(r5?rjbj5/#
%rkB0E7s<+sVio@ZA@7IDp0;^;O$r_ZWu19pUlYj5XTsRYNT@u#9H)5O/UdBV,_6D]_s?_XT)X1-%@'2@6!APaa/+j8rr%k<O)t9K
%]hmW#_I`3b-JVtg^*'RsX-'3XK@3]]]'b"%?7im0KB?s,"k\W$/3^6Lb"/ZdSj2%6TTi,q<:-(X$aA7m<n0HAmPZHIgfp!rQ\$'+
%FnF8S2us#N5B#(Yd3P^U#GL7']P+V8oJ;n@M/jo>F2G+PeqMY+,eWrPj<99=-G1drB9aX)kE;L!qfl8JBPh$:)ia*Zn2*#u`8)3j
%GF7u3HPt-W4Nqh09`B8c=eP)G!:a\+GYHT)qE/M(bMU=S+bP3Re7b42*coKD/^b3'hO9],Bq[6d.Ihmt7ngp\6F%.(p.H@p)N:YI
%im0\a'&+oV>_d'KZ0HiAK18HeISKOmbmYr,e&+8mU`fO>gS3>ARdiGj2+*u/nV5B:4AA?Y.GJFAj%+O*B$"M"qE"tgHUJ*WM9VWI
%-ef=ik+7e*juH_PhK#I5>\;Gp0\uVOY.m-9;9U-lK3t:rJP!ef(^nDUIUt]1jY(4MQXl4$-#*?Up(c%>_\S,gT)DEd"JXoj&$Q6+
%^o(3je9u\7euPo#h$qCXQU:F`*qi'O,A65Z1^29s?XM(OTJef*"%f3^G'%PF+M2*)GIFp-S9O\QdCh&E[O(P_g;L,,)RsFUcT*/8
%_Po4*%@k1^1<6$,QH!AnTZ-&Z/HjKj7dsGCn)ccb_(!AtC?Em._@G?JRZ&Fo0s&d?9LWbn\\l$sacVXL#L?c2]]E7#4dh7Me]$a3
%Oopo-7bNj6dT.B31t\Y<Cs-]^([9SIV5Y1UBd54H1U1a(6A<ZKH.qCqQ2:"A2*bR_2_/pYNeS!qD&^p'R/sT,[`RJbogI##)OV$d
%d_cq*25&GhCpD2oP=]p0jUI+]jYS%[Wgr4GP4m?"TWug)>1+jfb4AC2^^bIs+Z>]OGA)e48#C(n^4I*$oSXe;ZGEQLnbN0*q(iri
%9R@d,gO0<"J%^S#8I"M;G8*:d0>;QH+6hri;eANAoQ(<kqs\,8LSC@)Dr/aX4KWIk@jA/%BH3.[f<uIWU.pM;W0LcR5@,a+_@b=,
%k>b+AeRJ?N32UTr@6,Db+GorhHc3D.<i@EqW,X)G3n8d*>X:=^W4W<'oD>oDS#*_?H:=.Ah/h47QY&(sjC2mCS%36ss)V;?"@\j\
%Q/<cpJd]UHPM#2C8a//Y;_)]'NoV%Y02]!M/D]JrP7]kH]JuF]3>3-GM[6+SYPS6=!+$k/)?a/g)a%A^=#YBEPWisfd"#[HmIo_*
%InhRA1tZLbbT626nJ7-Fd%Me]%]\crCK-uG*=rJ+:R9Q;2-!lIEBV&P@F$^+\'neQWWW"r:jOt.&_5l[^/(2p3=U1KYJZSgg'12#
%r@hpV!C:U"JB;fV0/j=^?M49IqgTZacS1rkgtT"9#;d:>`Ot*Rjg^!crTge\<(Ia,5VGcb..G5FG##8_s54T9fUN$$>I&2)mDi(6
%GM[Gdp3(nQ@]hCXZ=O(Xk`/4Ij&C&O3:IjRh*:AAV:5EYlVGjQn)a_beT+-Ga&.7QMJ0$%G95p\TW'&JojF?ZoA3%/G&@:'4r<sV
%_V/m;E6</8+eCnON3s_M3F%E%%dBX1]tln$#K[6r4C4'Gq\+A902MT(^PQlZBAs+P<GVEJHl8pR#QsnOR-o0a]rN"sK)TQ7OaN<H
%'u^:15BZ[(VEd^p*+U8G.8MaT9-R;;R5h_e6P[dT_bi[@d=YYgfPoC#jW9S1Z4p/(Y`G/u%T+Y)n[?r<^Fq@t)_@Pn`+N@6"/F$u
%5_P83NoprE(kCpBlsk0@&bdGs1&0Y!r'cfjU7PZc@VGMWh#qS>"-P(RUR<X>O_Q8t"$c^sM<U`3%ag40b%@mPIa\`lg&K8Y61T&c
%1U!'K]M+O"V$Q`eVo^^G1`7CajF#fXPOUh2QB4:=:3V_1O*5=G5;cT1!>ho5;/E%?gbtZ6AJL)C:bm2J:>;:Zl*6TC(sf]=I;A*N
%TE^,4)nSO8H:./T7iO<O.5OqCcI947Y+&bPedr<3[TFKsZtbI[Dce!/%IK@,8Cun7VBN`Of+a$NFR5l.,ba&jBZL;.&5G!ofI-Gk
%+Y<>tp;aIg=8"lq*qgG[EP!.nIGEYja3o7:V.2.?@ZM+.o98^Upu\2NI/#4Al/JI.*o)&t:pf%r?]2b`eN0[W@Q)b$0BYDjA,Xs6
%*f`'nSs+2s;W'0oZY/<.e^I*23fku*D6Iel<s]hI,#7Oi!8H+FA1W0d%0.<:fuMi@BE=J6M(kM_gpXp:jSkRm8!KPYq`Uo>9TbOK
%*Nb%pf*u1:@QJ@:>*eaRX?&"EbQb5j;48_tXO<fKp2gB-9]gk2pa&gX1Bjc)pT\VL*KIj'Z3RRfo_hQNTMH*dQSSm%&'nUB%3cr9
%8uY:qiQ:DW45Z5eGC(R#o1RlW;Q_?tq"bJ6,;PI(d[^H$\T3<$9E:ga_EO@W+aJ6A4WttVQjS&V=;nHBR4<_9+%fW"\sqQKPEHkU
%G6u$!p69)_i'T0ZUbl;jp+5l"5^r`&9@AZ\H,PaiF!#R.\&['`PS?Y]pmaQ\*eQ[]n&5F:s8V_gVJ8]R_0aD7GmO!)-;n<-QfpE?
%l?7gC_cJr7,W,b]`)`\1n=]2)jAMBk#:gQAh2'YnoAV:oo6<<'M+tks!)IHE1<^ao4W)Z<+/?sDLMO<^f9.hskJKF`=Qen.MHq[.
%oAu<ZAph]#&rF%H[mtE\>s30sD9=VEo,M4%_OBV33.ZORnYfU(r'*9DI0=lKm&kF=AQomiZe"k#>-=260pCVn:S,lTI(r]&Va$a5
%Bq@5%?n"6]52m>/UO`+tgcle,BoGoqG:DQA"hE_eP)(mH[3h[@nGIP*BDC)nW+H?sn65#CmT_HURlZTETjT-4/glA/$o'r+$GV7_
%CsH(;_^$(7K]E42R@0@-'=9?U-9`Cb<n9Aac@8X:BIjDgo79eP:mVH+\P\lDc<*W9kLk`2&0Be";qF3;%g0f%bk7Z)BB#ir<u;R*
%G,+[-QqJdaEq-*^V6>DG[>8QYbp!L2qgaJqO5#rPIEV4;rnH3=m%_<t)e/a;(#E;p6`g$\(VE[[)"1k33ROghp"O:E"fQ$=OFqQm
%"Elg<oPmBphC3-*o_GXSrnN>\o?_Gm^DK=,O%+3mp8'U24X]t:3PFf>gk&t(at8Ot2htHY%4&mQc00Nc;9,`Lre\ZZcC$^H^\G&=
%#TdQ6[4;W:7i-K`4*NCW&DXfg#-$&^PUm[&+2,Qm9Sj#897ZeDh=YD&RiK:k\p_?kZ*uRmGC#\lNn/MmGrgHfm`9"W5jfdY^k(oi
%&0C(Ge$pNIjA+f&o[f#5re\[5bB2%l?iJ]`;eJ`kYc;p^YBEsr[KI`T7H.p]$b+[hlfB^IXBk]uZB80'cq)GJ!XmtpSiSd*T3K/E
%l@)C)QH#JKp'4@\#ZLDF^:`usIIT5ECR=IX:Kcd\<T[h[IsJ$h\Uhf<1I]nLO,03-kdF7,f%Sl7-:6?G`:;&UR*t\I!5qH2@Ok^%
%HXFpmam;o'ek^7#)ZLa3C!&4X;f0j'6_["UalKJBRWGhgVG7r[lX=Ue;:XYQk?Im:;ASo:hL/>q*;jl!&*m+c'=PMW28M7UUnGcN
%5l85m-0)8N^(cOP1OI7X%)qYp(H345`[RD^/PL?-h:e@_55Y]b4.^t_pI9><C*,XiI]W8uLk@JoeKj1"*O[g$<;*[Vl;VHu5E2c%
%\O/*3IVd;%.kb4V<8?]X22K[/4qXP1a*!"qeo172luP34pS.V"'6@W'A;MZ#eo-a]W^D8h[A[!X"Qu@(/B7)HdnkRq*#JpmI/4@`
%7WIflK$2,$a,)2nc)KGH#i:<2RtW@sik,An8Q-[tQ`%KgM^?uOUTpJTJqjJW5E)RjD";(!?TT(gW?ALGiZ'0$3A3)iP5ehp2V%Rt
%47.KPD&]B-iW)f>or+>6[X9.MS;W!H7ruqGG+?u;C/"2^FCXf-;^Y31:URGSdrbCq9:0$CL?4L2e680KRHT7\;SM-u)u$`:kN=kO
%+?228LTs9Tl019QA+kT7Icnbj6j@XdXjEAR$7I+U;%L2*.`0DI<Yg>NjC123R>kEM9&,^`9u5^hM1YKUfE=iV?RpP`ENP?`>.*5#
%g)AkPjhL,1r(W&sCrc_(X(2R,`Vct_DH!f[5WZ?VXWhLqB;]TB+D=#Jf?auW>7^2:&#l"ARb'5/AC"/@GEXE'EM&#2)Q.FD4ub?:
%8I"McS`DO-B,q!E8uj_gjC;#(O8et0(']l9f#@b7D7FT8ap#5rc0(pumER@kgn0'Ss4'bHkYTKCjp)_:k(5KUbUhF](2cUU,<LuA
%JAI;PVHM;jUP3BErbGc)qo+a5I*R-IYpfiMZK*?Y,s=AOKq+eF3JhL(Xn["@c<:ar<(6?GJ!\/bEP,gMbF<c4f":nUF=hSCQ57aN
%4,SDsLH>fV"0ptpB(;utgKBQ4Z'6+*[^.p9HD%Re,Z>.KMP.:[8N35*T)on7pe"Ogefl)_(m?V*IF-8/:@lG;q,V(1`s:X-KjP.M
%fnW?$eBQU-U4@.-f$g;[OUH[=quq2+2/YF6M:%)5!1#3mrFE]uhI$YI4]JXd+bEXHjM75-3Aq"bJ@+ILLbVZZ&umKkNpqGAWP@qZ
%aL8oBG-?H*<A?c7@d.$@7&UHdVOi\d:d-K!rR6OPOccL?r,jW%E;>UinTlaTa1/kY"Q,mK"_uQBqGaTK_$MYUA=9G-$,Z8'i_Dda
%=25X*`^lM1ka*1rgF(Q"4%jeO/:NF!(GJ7FbkC&^A/UM;_@?=[PGS#(?7-+o^JC&)?4,ORDB2<LrRgGq[1,:009;u"HVMYmoaM8s
%,1Ua<oAs>@YWC&OeJ@Fs2QNjn_R%fp%F1l].;fARVIh_GG!dEhj=\FRF_*#u:>6C%<%$GICO:haF=\4f%p'eH",\s2*pEDDiaD#e
%a7SO[-^@%md/as#3FH>g04\N"5%1liE]1q>EiH>4j44-7g#mV!Z.h[PDYJ_H(M=bJqr>sj=J:.l>$eHcpP!iHrl,=C*BElSmMEGV
%$U4?uADVcXT.XS7+\>>S@'(!3SS1j*_CU?R\KS!haWU`ee!UZM^eiQs][(h+qraark>I%!-g)+KQJ=?HmkjHV?jOss7qI-<%b=kd
%q1HDBNbRGMW6%L&oI#^\QcJj$KDqd]!a66O-b3R->RmVp&a1^-rP^b1rVB7:M7h=NBc4NB4B'9%%L?K&2Nl?(:J9Ogr0"7)<2t<t
%7XPGba!XSqK>d.`4'M7kSDWRk`]1?GOYg'P3g%m[!cgec9kmMcERE^Kd2?H8c-3`Oe_\(0&S*:41l7h%^6/E'a2*H"Du"gB+M+/Z
%mnrJgk>Q;5-%G_6IROip;P5]O!SY=<oPk(F-F<haO>f[><3+83>0k`d``gQh&n*jMpi.VkN])W_-_[GlUn+*,]B2[.1tt:hEOq?b
%RQ3D3p?lCXa/@=[i8"Y>^AhIW:SVc!-mJ7q>J-<lX0HUVpok<P>!3?DL$+5V1Ek3jYqLZeI%Dp_KJCWWIO2l/@pA5c$TOJ9;p)%d
%&@k,4L!0EWm;R="!n*]]rdO(08A;n!r^of8rWt]H6UqSjbuV))1c;.,KUF,[4jQQIJkcR'1$sH7,8*80hL68'8N]6#8>\@Irl9DY
%rD':_j6(.H)cY7X%\frl2f:,[cDL8p[UJpDN)TmaRRH%]W2)>UEn8:2\l((.L-C<ei23"I0S7[2nG^<F5K?j=HV-rW9K7j]K=9XK
%^e#)D,)gh,ffm!uXkV"J;MQH3DOQM[1T(f-XITG'T6n8.17aPT4K[*(4DJ(DcSk,M\Y@s6!/.5cNjfb_EjI1*4VlGplenP.$Bg3N
%qQ:t,P^$\`'PP\`?7RPuSrZO,h$ZfWNC,JZ2qWuu8ZeIqel'2#*S:f6:hI@'5C0chL>!L")B)Q.3;9L'`SBmE#[55#jK\WTG[S[8
%fEV.\-G@+4"V:7Z#:N3kMKA3O#8_5dAEp;F0q1r*2+#*H/2`(=@sI)+>>iTsmp%^QfVC!B/hWOYl>$QAHckP;gkuu#-K!;akX8OQ
%n2ma^F^N3:ZB%c<(H8M3ad;9_X46%W1kRid8?J@8dqr[BJ6MomF:UaW0P/9-A0!e%fV5.<^rIDoCdI71V&F03_:sKeK-IRafsbPW
%8\#kL[Q-M-9<F@EIc@bYqVHCDm\+\3QreM1[`(iqjFjS(kM)/N%=-o/Q2DYfn0Q`[o-Da%3@N_$o'0_;Wdr@b-<h`1TiZI:[`(ie
%.1Re?Fn#je95Z*a/j.:@Zi\^JS7]UI`i3S4&L@QU-=>oS9ttPEP3PQ1d/0>]+mGBN5RNQbHnHg]!hP(6SDa-3Im4`"*=4%bIUCn%
%gX[g9GEL-!L^2b!9TZCN^X;,-q"L0)>*+/5r3J0^R3-"`g*j?*E/K%Wn[DedZgj'FDGsg:-pF\e*UM_[$.FVncblMhGDn3Kng:bI
%d1,'fH]q`4:(-Md"B"o+q3(98f9W1b^UZJ(i='AR1*/;0@O#7:q#>`(Q/RRaWk5s`YRDn82LU#aFi0L5C7+;hF&#m"3bS.%`nR!=
%k'!bs`i0L$h.Zeq[HdS!>WW4"oNM/1K@m5%NT7#X?L;89jMO5\?JUCc/RK.(RCH+94iO/`rQ^T$<`NeuY5gb5TCU#p5Oli$8pRV+
%aX?tO(-McCo%tdA*-lR;_64p7e:14`^!h2-_9HL)%.V*5B1igTrX4!1onhf^5WHKpA2_mEE27"LHi/,$-D<XU:B@IHrCQd!M;#Xf
%:1!8XQgXt1htru4V``ktcD%!Fe2$,Kf4m^B%F\5FUs<NaS7rQ]:9U2N,\TkDAj^d<#'W0fa$A:NZKN@h_mo&_f5[?WAtl"WZYeI[
%I$,f+9Y!gX:qIQc!u^_q>eB[j.0l-j')J9^A''p,`W&u.MHsog[%UJCCE7nj`sT3BanR]H*qjjc-MfR-%QKZR9IqnsW*1Weka^CV
%Iu,IG72+<Ok8THT5+;&0k$Ib0od(^1_RjuJ4_\chHTf'upO]6oDDG-'=jE*pg,A:s[CNT:Ji(c@mb@M%/$Sa_7$Qr0HI6Gs6B@7$
%I<puMJ%R^OhMo(`qKMU=QYX'lZt=c`4Sr[EdhhshqtJ(D*)>7rp5_>>FQ%MJV98.OaSOfZ-,qMQe&+o^+E)XlW@uNB_tZ@L%4RgL
%2A#^SQGPR48g+Ea!&%Z`7'Q]oA,iE\?at,j.;_r84$)?Cg:MW-BO$uiFW66T0C.h[L\FcS*WKe+qNN:+kr%C#0<9a=cO'<\'Tm>J
%?>g)oD,1U5H!4]<-i\A^93^iVA3@V`g`?qYaJ7i\F-!QL*5,h'l;81#+![KsSdR<Ak6=Qn*3rCWTLA1Xg'&fb/S+4X)MoHcR\a(I
%,S9*a@*2gaR4tKTjWb0oD9)qLCCt^AC7bqGm"5"CqCqg0>:Nt,W#U56O^maMD[Jr^UC_TA,)]sW.)=6InXF8r/X1.#YGmeUp=%!%
%Bc#mI15#;WNm655S'WQm8B?$3cuU_HY!@Z=n>dF\OQdo9]M>S]6p/Lbj&Y.^&*&#5d/-#t\9J>'A3FiJWh,/Ccf/;WZBm1u`gglO
%;oLR84geZq'c?UJ"d,)DF<"KZ"WLW6p[Qp8Ib)e5l`nqB(:p;]$OE=-TSoL@AUqt(aCpURW]B7]NBF=lN)`LF]Ht5hFZ[16N!GQT
%D&(sJ's-).gQ$#:5<[dVE`rK\5cit>3:cAa8*PB&M$3Vn>JQn5FDPZ"gXr3@Ej0fUXP#j;f:Fa9^#&fDL'<#Ja(3M1_nhJ2S<i4u
%U)YQZkA3!sS_Q%PDjGlW3`.22^:\dZpXc21);V!e0:D8\X@bX4K-+.]G;';XQjn&V4fogQ@8nsa7(b$`5Y@o#\]!c!f>GQJ_I/q!
%i"7^/"eWfJ;U""6;I]'u95Ap=+=(Z)Ce4e>S"rlU^=n'#"H)>b$@Y/=5MdsIjn!lTK0`HR[nui74krau:A\kaCMZ&/$DNJF=!&@4
%!$B_sQ8RsX.)&*1Iqt%!Z*P!EB-03]Amtp6+=fk>iXW(KS%At3p/m2b$Qe#*$s\mC7ZuN3[ZGoV67*d7,O'7E@]_7XrCj["-n6%%
%mS`&.N7j4[H7mYR2j#4"m#RrhJ)mgldBH[5(?hfPba1s_^at8sTQ(?mj2HA[FmXn?8q*K,<HM`O'<EXO(J-&sPlP]R\"_Cq4^([u
%c)*nMSu2u]o3\#8_S9LXn13GTq-dr<FqNO!`0.F(A\a`o_:0LBMQl_`,6:c'k<@CQE%7mN'DeVi&fj>CKHIX/`lRT?\CB'AEj-Kp
%Y0#gBkmP-q!S1\K6/>"Y;U)j'[)caa*-nti(6$QAf?kq[FocuP9n89lOfFn7"ue=0L?R6Q$^g%#;5o3]p<5r'PJd%0*(>Oc\jdcc
%^`aBpE;<.sL5NT-*pW^sZ[Uc&^KmJm9RY*o)QXeT_:RBc>u<P+25EN/VVZMnZ>)9KCZ3=G6$K?c=mEDAJYS$u:/>Fq@4"m,ZL-CR
%-C;JW%?pV%F;D3j9&>rEAg].&D@mbSk[J]QJ#e:=,rW(%XrKiBSQ7of^n&8[XXhYHk7i`H]-*9l*:R8,-u_kh)Noh(iLq_Y,'WP/
%'#1XF0dTf]s(57.EAYE2_>;R>P$.UnHerX3hij['Fuk9ACrkd35c<Ti0`\hIkP[ZO[tl[!cAq"_D(f_5SD,(qem'kT4JV._(RRl8
%r?8!]iNNdTC=KDX)c]34lWJ=+R8M/ak==^a_n=*emD=\WlhrM_n`lC]1#jodN!t\7h60!A]6Se*7jfl.L+]bApR)Gb&:$8uVelcZ
%N,Q,aa,mu\>WT[.A3g"$je0nlEgQa.oCKd&NhJ?6bND2[&%rE-,G"]$di%CWVi38O$uXq>OKL$\Md&]S/!1e+?B_Do\[#9.]:Z2;
%Ja#LoCtgGo=htM#T1ku]KP=keb,OG36A<<'\**#!X5nqoDCI4aSPL#<f=-Gf=SXb@P(fls<`7)b4`ae3gQQ&L4oE])l?@;cHa_Nh
%N-X,T]t)ngo2\R1,aFCGfMGM/i.]d6JjSHXFX:t"]e=UkP@5F$kYhW#)CfS]RRKUU11PY_YR(b\0$F7%eurolNWKtHc+fh!4Lk^E
%J3K`5R)p5Kh'J/QK.?XIs1c<T$Vr&kb@VRQ#2\fQV,a7)b6SVqCB8#M#6]UU]C;lOngttWs*(W^XdTjjH,MPH%WR8;Mc,[UmIV'@
%@@l)CU[#1t/L"u<aPI>m2[9]W:ZGJj*eUD%P)t!$5IUo,(!i]cn:ATkN\l/^qm^P&cNmDcgUJ6"as+6Lh+6:??S?"VqDq05SI$@W
%9eNlfTUVe"Mg61%CZ2^gagMsP2oA^64b#>K`FW]ZR.*M2ked3R\"]EN4&?!G#]KnE#s*#UD$?Prcbq&&F=\=bEj^fS<LDe>3mI"M
%`k_IK+TWZG'jE#q8ffUrUF5!MoG4&Zb=U,8NP_pQEPT7PZQB+i%W2(9D;DufEjeAfVA5XENFchs@T<PrMa5PORih;?+t*%/q?l.4
%A2nVY7Dg7)0$?M#Po4PTG_u0e=FPE'RVjDBV=q1kiu\/XKAO%O_V_if%!l1S$Wis/*iC$K,+%K:$.t<.]T,38s7GsGr1s[5B9;Hn
%3dO9i0pjW6rA,/L.@n<1[dW^ofY:M'!B-EmNs@TY6Tn+ml7$G2][>nZc>@*ieueBuh$Tnhpq'u#W-7)(ePcn6X#0tS^Up!S)Npj;
%J*CK*+kTh>Am*T#mn-A_rds$4.QPu*6g)LTN24+$2dgU*jRaYjS;I0q>2AdpX(%-.o2/Koe#ph,h8jopr0:6_fGU2sHbeNRL)F_e
%QD;NL5iZl+4N?p1OMC`pEg_D3#;g-$S>t=9FOU'Xj]Q3A>/;^'g"9Jr\.r#qD(M1<mMdq7rkcpJZ;FT%gE&7cp"&K"4)JckZrc!a
%c*Y&,(\<fcM$2=tL%f_[638WE/5<CjGcRY'?Uqef-+)Z7:kf=<e6LAd'oZeQ8BmiR\Y4>O3^uZ,%:8M3G]uM#R]_ud'0+8h<N2.J
%HEl!AS&]b[l2436,1h)n6B+iOYVE$7V-ZeJpL3[F?kr(s]NdL!WU$pn7J1&hP[DMVEp,PW7o?-;FN`s;MTlbgb3>hAkJnQ72bXtY
%^!895]Zaif5kPU3WlLCBG3@.sfNS-(qkM3E^bRHl-_cmRElPO>9"ce[_*)X*reu>s'S.D>_P?aLkRIm=>kC;BRG*!-]SaYmdY%%7
%M`^#TXe#>4A.lDG>bB%6cYMJ+\Yt9W?;R3Y9`9J/)F\/7HZ'8#gF"$+7"shr(Ws+`Jt?ob=%NofnZ[.7f7B5aWFMn:93'!K$$dr\
%ORTZ[A+;Eun>N&"$KbUdAGh\aNil;<UoWZk*-U&YRIo)f]PL?A3O6HbgCZ6`$r;;>&kaV\<e\8R7tXQmnI`?V14piPSbT'IIHtSA
%_4&Yaf3"<I"1./MAEHL&Gs9Q=&tZP9&%rhQpBuk0J$-aP%7rk_;'9G7'Q>@TVfis>]jk%8$XWh`$LFsfS[7-7AVP=WATYYO/)GYm
%i3t3B'MGngrq\:Ml$Pk+EI6>92R#PVmqHZG:+EnJPt2jJ_"ZJk5"V>RBhBOaKtu?ML2+K$BNFBD2C7,]iSB]D['L`q$F'J!Paqr!
%n".K\RCL6%_HC'h(J@Gr(HBDKNdqYT4UNME?GJ/XZn5:T,'rcW/!1QS%Wb8#rZ%nZko6_07mV\1DZNY_IJ9P)SgkPqfY-@Q/^a^<
%^8Z`55:j?\/#>1Pro3#;4R2C=5K7Kq@(U$i381Aje^UEA-rCnEP]`l,"?([n*IAE98?4=:-t/=D(=9lRntShE%Q\2u_LgVGJQNCp
%A>7+:+5SDGcZ:NsgV]m]KQECHCZh"F"4MV.7+bHsrV5uX311=Agl[:TD4Md!eBP'Md+$ad$mh#io&jU_LtdHM\,_FQF"@QEhgB[Q
%3b'N1*$(%5aub;'J-PsnB]UZnfn8$)q;Si3Gr>*[YJ8+b7G%ILIs_1l^\RWIJ,+kLqQJfTra10Mj6_".rq8SUrZ?Xb:Oi<@J,dCs
%J,J-[r8YQirl6+pr;N>fM*(b,5L+cTnrJ:uiEuTI5QC8/0E:V#rqV%PiCEVar9`D@_ghH*^\aN#%<]K1rr~>
%AI9_PrivateDataEnd
